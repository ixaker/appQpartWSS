<style>
    #ОтчетПоРаботе2022 {
        font-size: 0.9em;
    }

    @media (max-width: 800px) {
        #content {
            padding-left: 5px !important;
            padding-right: 5px !important;
        }

        .titlePage {
            font-size: 0.7em !important;
        }

        #ОтчетПоРаботе2022 th {
            width: auto !important;  
        }

        #ОтчетПоРаботе2022 {
            font-size: 0.5em !important;  
        }

        .checkboxInTable {
            height: 15px !important; 
        }

        .btnRow {
            font-size: initial !important; 
        }
    }
</style>

<style>
    /* .titlePage {
        line-height: 40px;
        font-weight: bold;
    }

    table {
        width: 100%;
        table-layout: fixed;
        border-collapse: collapse; 
        font-size: smaller;
    }

    tr {
        height: 45px;
    }

    th, td {
        overflow: hidden; 
        text-overflow: ellipsis; 
        border: 1px solid rgb(202, 202, 202);
    }

    th {
        background-color: darkgreen;
        color: white;
        border: 1px solid white;
        text-align: center;
    }

    td {
        white-space: nowrap; 
        font-size: 1.3em;
        background-color: #FFFFFF;
    }

    td input {
        width: 100%;
        box-sizing: border-box; 
        border: 0;
    }

    .ui-autocomplete {
        max-height: 115px;
        overflow-y: auto;
        overflow-x: hidden;
        font-size: 1.3em;
    }

    .stanok {
        text-align: center;
    }

    table td:nth-child(2) {
        text-align: center;
    }

    .apply {
        height: 25px;
        margin-top: 7px;
    }

    .naladka {
        height: 25px;
        margin-top: 7px;
    }

    .codeOperatoin {
        text-align: center;
    }

    .textAlignCenter {
        text-align: center;
    }

    .textAlignEnd {
        text-align: end;
    }

    .btnDeleteCell {
        text-align: center;
    }

    .btnDelete {
        font-size: x-large;
        color: #FF0000;
        display: block;
    }

    .btnEdit {
        font-size: x-large;
        color: #007431;
        display: block;
    }

    table tr td:first-child {
        text-align: center;
    }

    .operator {
        padding: 5px;
        text-align: left;
    } */
</style>

<h3 class="titlePage" >Список отчетов операторов которые надо проверить</h3>

<table  id="ОтчетПоРаботе2022" 
        url="/app/getCurrentReportOperatorForCheck" 
        callbackBeforeInitTable="callbackBeforeInitTable" 
        filter="filter" 
        callbackAfterInitTable="callbackAfterInitTable" 
        addNevRow="callbackAddNewRow" 
        callbackAfterWrite="callbackAfterWrite" 
        append="end" 
        init header>
    <tr class="config" style="display: none;">
        <td title="Оператор" 
            name="Сотрудник" 
            key="Наименование" 
            style="width: 170px;"><div class="dataCell"></div></td>
        <td title="Станок" 
            name="Станок" 
            key="ИнвентарныйНомер" 
            style="width: 60px;">
            <input  type="text" 
                    minLength=1 
                    url="/app/autocompleteStanok"   
                    checkValid  
                    class="dataCell textAlignCenter" 
                    style="padding: 0px;"></td>
        <td title="Номер детали" 
            name="Деталь" 
            key="АртикулНаименование" 
            style="width: 100%;">
            <input  type="text" 
                    minLength=1 
                    url="/app/autocompleteArticle"  
                    checkValid 
                    class="dataCell"></input></td>
        <td title="МЛ"  
            name="Заказ" 
            key="Номер" 
            style="width: 50px;">
            <input  type="text" 
                    inputmode="numeric" 
                    minLength=0 
                    url="/app/autocompleteZakaz"  
                    checkValid 
                    class="dataCell textAlignCenter"></input></td>
        <td title="Этап" 
            name="ЭтапПроизводства" 
            key="КодНовый" 
            style="width: 55px;">
            <input  type="text" 
                    inputmode="numeric" 
                    minLength=0 
                    url="/app/autocompleteCodeOperation"  
                    checkValid 
                    class="dataCell textAlignCenter"></input></td>
        <td title="Время маш." 
            name="МашинноеВремя" 
            style="width: 55px;">
            <input  type="text" 
                    inputmode="numeric" 
                    checkValid 
                    placeholder="мм:сс"
                    limitHourse="99" 
                    data-mask="99:A9"
                    class="dataCell textAlignCenter"></input></td>
        <td title="Время полное" 
            name="ПолноеВремя" 
            style="width: 58px;">
            <input  type="text" 
                    inputmode="numeric" 
                    checkValid 
                    placeholder="мм:сс"
                    limitHourse="99" 
                    data-mask="99:A9" 
                    class="dataCell textAlignCenter"></input></td>
        <td title="Дет за 1 уст" 
            name="КоличествоДеталейЗаОднуУстановку" 
            style="width: 50px;">
            <input  type="number" 
                    inputmode="numeric"  
                    checkValid  
                    min="0" 
                    class="dataCell quantity textAlignEnd" 
                    style=""></td>
        <td title="К-во изгот" 
            name="КоличествоИзготовлено" 
            style="width: 55px;">
            <input  type="number" 
                    inputmode="numeric"  
                    checkValid  
                    min="0" 
                    class="dataCell quantity textAlignEnd" 
                    style=""></td>
        <td title="Кол-во остаток" 
            name="КоличествоОсталосьНаЭтапе" 
            style="width: 65px;">
            <input  type="number" 
                    inputmode="numeric"  
                    checkValid  
                    min="0" 
                    class="dataCell textAlignEnd" 
                    style=""></td>
        <td title="Готов" 
            name="Проведен"
            style="width: 50px;"> 
            <input  type="checkbox" 
                    sync="none" 
                    class="dataCell checkboxInTable"></td>
        <td title="" 
            style="width: 55px;"><div class="groupBtnRow">
                <i class="bi bi-check-circle btnRow btnOk colorGreen" style="display: none;"></i>
                <i class="bi bi-pencil btnEdit btnRow colorGreen"></i>
            </div></td>
    </tr>
</table>

<script>
    $(document).ready(function() {
        let tableID = '#ОтчетПоРаботе2022';

        initTables();

        // callback при получении данных от сервера по wss
        callbackWSS = async function(data){callbackTable(data)};

        // callback перед отрисовкой таблицы
        callbackBeforeInitTable = function(data) {}

        // callback при изменении данных в строке для определения показать или убрать строку
        filter = function(data, result = true) {
            console.log('filter', data);

            if (!data['СтатусОператора']) {
                result = false;    
            }

            if (data['Проведен']) {
                result = false;    
            }

            if (data['ПометкаУдаления']) {
                result = false;    
            }

            if (!data['ЭтоОтчетОператора']) {
                result = false;    
            }

            return result;
        }

        // callback после отрисовки таблицы
        callbackAfterInitTable = function(data) {}

        // callback после вставки новой пустой строки, перед заполнением данными
        callbackAddNewRow = function(data) {}

        // callback после внесения изменений в строку с сервера
        callbackAfterWrite = function(data) {
            console.log('callbackAfterWrite', data);


        }

        // клик по кнопке Редактировать
        $(tableID).on('click', '.btnEdit', function(event){
            const row = $(this).closest('tr');
            const data = $(row).data('data');

            $(tableID).find('.btnEdit').show();
            $(tableID).find('.btnOk').hide();
            $(tableID).find('input').prop('disabled', true);

            $(row).find('.btnOk').show();
            $(row).find('.btnEdit').hide();
            $(row).find('input').prop('disabled', false);

            clickAnimate($(row).find('.btnOk'));
            logToServer('Нажата кнопка "Редактировать"', data);
        });

        // клик по кнопке Применить
        $(tableID).on('click', '.btnOk', function(event){
            const row = $(this).closest('tr');
            const data = $(row).data('data');

            $(row).find('.btnOk').hide();
            $(row).find('.btnEdit').show();
            $(row).find('input').prop('disabled', true);

            clickAnimate($(row).find('.btnEdit'));
            logToServer('Нажата кнопка "Применить"', data);
            sendNotificationOnChangeRowTable(this);
        });





/*         currentMenu = 'Список отчетов операторов которые надо проверить';
        logToServer('Загрузка странички');
        subscriptions = [];
        subscriptions.push(docName);
        subscriptions.push(docName + '_all');
        updateSubscribeWSS(); */

 /*        $.get("/app/getCurrentReportOperatorForCheck", function(response) {
            var responseObject = JSON.parse(response);
            console.log(responseObject);

            responseObject.reports.forEach((report) => {
                callbackWSS(report);
            });

            highlight = true;
        }); */

        /* callbackWSS = async function(data) {
            console.log("callbackWSS", data);

            if (data.topic === docName) {
                const reportRow = $('#' + data.uid);
                const newReport = data.data;

                if (reportRow.length) {
                    console.log("reportRow", reportRow);
                    checkVisibleReport(reportRow, newReport);

                    if (await reportChanged(reportRow, newReport)) {
                        console.log("report edited");

                        reportRow.attr('fullTimeAll', newReport['ДлительностьЧасов']);

                        for (let name in newReport) {
                            const element = reportRow.find('[name="' + name + '"]');

                            if (element.length) {
                                const value = newReport[name];

                                if (typeof value === 'object' && value !== null) {
                                    const newUid = value['uid']||'';

                                    if (newUid !== '') {
                                        const oldUid = element.attr('uid')||'';
                                        const key = element.attr('key')||'';

                                        if (newUid !== oldUid) {
                                            if (key.length) {
                                                highlightElement(element);
                                                element.attr('uid', newUid);
                                                setValueCell(element, value[key]);
                                                eventOnBlur(element);
                                                setValid(element, true);
                                            }
                                        }
                                    }else{
                                        element.attr('uid', '');
                                        setValueCell(element, '');
                                        setValid(element, false);
                                    }

                                    if (name === 'Деталь') {
                                        const reportCurrentWork = $('#countDetalForCurrentReport').attr('report');

                                        if(data.uid === reportCurrentWork) {
                                            $('#nameDetalForCurrentReport').text(element.val());
                                            highlightElement($('#nameDetalForCurrentReport'));
                                        }
                                    }
                                } else {
                                    const oldValue = getValueCell(element);

                                    if (String(oldValue) !== String(value)) {
                                        highlightElement(element);
                                        console.log('set new value', 'type', typeof value , value, element);
                                        console.log('old value', 'type', typeof oldValue , oldValue);

                                        if (typeof value === 'boolean') {
                                            element.prop('checked', value);
                                        }else{
                                            setValueCell(element, value)
                                            element.val(value);

                                            console.log('setValid', name,  String(value) !== '');

                                            setValid(element, String(value) !== '');
                                        }

                                        if (name === 'Проведен') {
                                            onChangeApplyReport(reportRow, value);
                                        }

                                        if (name === 'КоличествоИзготовлено') {
                                            const reportCurrentWork = $('#countDetalForCurrentReport').attr('report');

                                            if(data.uid === reportCurrentWork) {
                                                $('#countDetalForCurrentReport').text(value);
                                                highlightElement($('#countDetalForCurrentReport'));
                                                resetTimer();
                                            }
                                        }

                                        if (name === 'ПолноеВремя') {
                                            console.log();
                                            const reportCurrentWork = $('#countDetalForCurrentReport').attr('report');

                                            if(data.uid === reportCurrentWork) {
                                                $('#timerNorma').text(value);
                                                highlightElement($('#timerNorma'));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }else{
                    addNewRow(newReport);
                }
            }
            console.log("end callback WSS");
        }; */

        /* async function addNewRow(newReport) {
            console.log('addNewRow', newReport);

            const reportDate = new Date(newReport['Дата']);

            let reportRow = $(`
            <tr id="${newReport.uid}" fullTimeAll="${newReport['ДлительностьЧасов']}" disabled>
                <td><input 
                    type="checkbox" 
                    name="Проведен" 
                    class="apply" ${newReport['Проведен'] ? 'checked' : ''}></td>
                <td><div 
                    name="Сотрудник" 
                    key="Наименование" 
                    class="operator" 
                    uid="${newReport['Сотрудник'].uid || ''}" 
                    >${newReport['Сотрудник']['Наименование'] || ''}</div></td>
                <td><input 
                    type="text" 
                    url="/app/autocompleteStanok" 
                    minLength=1 
                    name="Станок" 
                    key="ИнвентарныйНомер" 
                    class="stanok" 
                    uid="${newReport['Станок'].uid || ''}" 
                    value="${newReport['Станок']['ИнвентарныйНомер'] || ''}"></td>
                <td ><input 
                    type="text" 
                    inputmode="numeric" 
                    url="/app/autocompleteCodeOperation" 
                    minLength=1 
                    name="ЭтапПроизводства" 
                    key="КодНовый" 
                    class="codeOperatoin" 
                    uid="${newReport['ЭтапПроизводства'].uid || ''}" 
                    value="${newReport['ЭтапПроизводства']['КодНовый'] || ''}"></td>
                <td class="hideIfNoSpace500"><input 
                    type="text" 
                    url="/app/autocompleteArticle" 
                    minLength=1 
                    name="Деталь" 
                    key="Артикул" 
                    class="article" 
                    uid="${newReport['Деталь'].uid || ''}" 
                    value="${newReport['Деталь']['Артикул'] || ''}"></td>
                <td><input 
                    type="text" 
                    inputmode="numeric" 
                    url="/app/autocompleteZakaz" 
                    minLength=0
                    name="Заказ" 
                    key="Номер" 
                    class="ml textAlignCenter" 
                    uid="${newReport['Заказ'].uid || ''}" 
                    value="${newReport['Заказ']['Номер'] || ''}"></td>
                <td><input 
                    type="number" 
                    name="КоличествоИзготовлено" 
                    min="0" 
                    class="quantity textAlignEnd" 
                    value="${newReport['КоличествоИзготовлено']}"></td>
                <td class="hideIfNoSpace1000"><input 
                    type="text" 
                    inputmode="numeric" 
                    name="МашинноеВремя" 
                    placeholder="мм:сс"
                    mask="00:A0" 
                    class="machineTime textAlignCenter" 
                    value="${newReport['МашинноеВремя']}"></td>
                <td ><input 
                    type="text" 
                    inputmode="numeric" 
                    name="ПолноеВремя" 
                    placeholder="мм:сс" 
                    mask="00:A0" 
                    class="fullTime textAlignCenter" 
                    value="${newReport['ПолноеВремя']}"></td>
                <td class="hideIfNoSpace500"><input 
                    type="number" 
                    name="КоличествоДеталейЗаОднуУстановку" 
                    min="0" 
                    class="install textAlignEnd" 
                    value="${newReport['КоличествоДеталейЗаОднуУстановку']}"></td>
                <td class="hideIfNoSpace500"><input 
                    type="number" 
                    name="КоличествоДеталейЗаОднуУстановку" 
                    min="0" 
                    class="install textAlignEnd" 
                    value="${newReport['КоличествоДеталейЗаОднуУстановку']}"></td>
                <td class="btnDeleteCell">
                    <div class="groupBtnRow">
                        <i class="bi bi-x-circle btnDelete" name="ПометкаУдаления" report="${newReport.uid}" style="display: none;"></i>
                        <i class="bi bi-pencil btnEdit" report="${newReport.uid}"></i>
                    </div>
                    </td>
            </tr>`).insertAfter("#table tr:first");

            $(reportRow).find('input').prop('disabled', true);
            highlightElement(reportRow.find('input'));

            reportRow.find('[url]:not([url=""])').each(function() {
                setAutocomplete(this);
                setValid(this, ($(this).attr('uid')||'') !== '');
            });

            reportRow.find('input:not([url])').each(function() {
                setEventOnChange(this);
                setValid(this, $(this).val() !== '');
            });

            reportRow.find('[mask]:not([mask=""])').each(function() {
                setTimeInputMask(this);
            });

            const newReportMD5 = await getHash(newReport);
            reportRow.attr('MD5', newReportMD5);

            checkVisibleReport(reportRow, newReport);
        } */

        /* function highlightElement(element) {
            if (highlight) {
                element.addClass('highlight').delay(600).queue(function(next) {
                    element.removeClass('highlight');
                    next();
                });
            }
        } */

        /* $('#table').on('click', '.btnEdit', function(event){
            clickAnimate(this);
            
            const report = $(this).attr('report');

            $('#table').find('.btnDelete').hide();
            $('#table').find('.btnEdit').show();
            $('#table').find('input').prop('disabled', true);

            var reportRow = $('#' + report);
            console.log('reportRow', reportRow); 

            const currDetal = $(reportRow).find('[name="Деталь"]').val();

            $(reportRow).find('.btnDelete').show();
            $(reportRow).find('.btnEdit').hide();
            $(reportRow).find('input').prop('disabled', false);

            logToServer('Нажата кнопка "Редактировать"', {report:report, currDetal:currDetal});
        }); */

        /* $('#table').on('click', '.btnDelete', function(event){
            clickAnimate(this);
            if (confirm("Вы уверены, что хотите удалить строку?")) {
                const report = $(this).attr('report');
                const reportRow = $('#' + report);
                const currDetal = $(reportRow).find('[name="Деталь"]').val();

                logToServer('Нажата кнопка "Удалить"', {report:report, currDetal:currDetal});

                sendNotification($(this).attr('report'), $(this).attr('name'), true);
            }
        }); */

        /* function sendNotification(report, name, value) {
            payload = {};
            payload.type = 'Документы';
            payload.docName = docName;
            payload.doc = report;
            payload.keyName = name;
            payload.value = value;

            sendWSS(action = 'updateDataOnServer', docName, payload);
        } */

        /* function checkVisibleReport(reportRow, newReport) {
            const oldVisible = reportRow.is(":visible");

            var newVisible = false;
            const operatorState = newReport['СтатусОператора'];
            const stanokExist = !(Object.keys(newReport['Станок']).length === 0);

            console.log('operatorState', operatorState, 'stanokExist', stanokExist);

            if (operatorState && stanokExist) {
                newVisible = true;
            }

            if (newVisible) {
                reportRow.show();
            }else{
                reportRow.hide();
            }

            //reportRow.toggle(state);

            //reportRow.toggle(newReport['СтатусОператора']);

            newVisible = reportRow.is(":visible");

            if (oldVisible != newVisible) {
                highlightElement(reportRow.find('input'));
            }
        } */

        /* async function reportChanged(reportRow, newReport) {
            const newReportMD5 = await getHash(newReport);
            const oldReportMD5 = reportRow.attr('MD5')||'';
            reportRow.attr('MD5', newReportMD5);
            console.log('newReportMD5', newReportMD5, 'oldReportMD5', oldReportMD5);
            return newReportMD5 !== oldReportMD5;
        } */

        /* function setValueCell(element, value) {
            if (element.is(':input')) {
                element.val(value);
            } else {
                element.text(value);
            }
        } */

        /* function getValueCell(element) {
            if (element.is(':input')) {
                return element.val();
            } else {
                return element.text();
            }
        } */

        /* function onChangeApplyReport(reportRow, value) {
            console.log('onChangeApplyReport', value, reportRow);
            //$(reportRow).find('input').prop('disabled', value);
            //$(reportRow).find('.btnDelete').toggle(!value);
            //$(reportRow).find('.groupBtnRow').toggle(!value);
            //$(reportRow).find('input').prop('disabled', value);
            //$(reportRow).find('.apply').prop('disabled', true);

            if (value) {
                $(reportRow).find('input').prop('disabled', true);
                $(reportRow).find('.btnDelete').hide();
                $(reportRow).find('.btnEdit').show();
            }

        } */

        /* function setAutocomplete(element) {
            const url = $(element).attr('url');

            $(element).autocomplete({ 
                source: function(req, res) { fetchAutocomplete(url, req, res, this.element);},
                select: function(event, ui){ 
                    eventOnSelect(this, ui);
                    //event.preventDefault();
                    $(this).blur()
                },
                position: { my: "left bottom", at: "left top" },
                minLength: parseInt($(element).attr('minLength'))
            }).on("input" , function() { eventOnInput(this) 
            }).on("blur"  , function() { eventOnBlur(this)
            }).on("focus", function() { $(this).autocomplete("search")
            }).on('click', function() {
                var val = this.value;
                this.value = '';
                this.value = val;
            }).on('keyup', function(event) {
                if (event.which == 13) {
                    event.preventDefault();
                    $(this).blur();
                }
            });
        } */

        /* function setEventOnChange(element) {
            $(element).on('change', function() {
                var userInput;
                var type = $(this).attr('type');

                if (type == 'checkbox') {
                    userInput = $(this).is(":checked"); // Булево значение
                } else if (type == 'number') {
                    userInput = parseFloat($(this).val()); // Число
                } else {
                    userInput = $(this).val(); // Для всех остальных типов вернём строку
                }


                logToServer('Изменено значение "'+ $(this).attr('name') +'" = ' + userInput);
                console.log('Изменено значение "'+ $(this).attr('name') +'" = ' + userInput, $(this));


                setValid(this, userInput !== '');
                $(element).parent().parent().attr('MD5', '');
                sendNotificationOnChange(this, userInput);

                

            });

            $(element).on('keyup', function(event) {
                if (event.which == 13) {
                    event.preventDefault();
                    $(this).blur();
                }
            });

            $(element).on('click', function() {
                var val = this.value;
                this.value = '';
                this.value = val;
            });
        } */

        /* function setTimeInputMask(element) {
            $(element).mask('00:A0', {
                'translation':{A: {pattern: /[0-5]/}},
                onComplete: function(cep) {
                    if(cep != '00:00'){setValid(this, true);}},
                onChange: function(cep){
                    setValid(this, false);}
            });
        } */

        /* function eventOnInput(element) {
            console.log('eventOnInput');
            $(element).attr('uid', '');
            $(element).data("json", {});
            setValid(element, false);
            $(element).parent().parent().attr('MD5', '');
        } */

        /* function eventOnBlur(element) {
            console.log('eventOnBlur');
            var data = $(element).data("autocompleteData")||[];
            console.log('eventOnBlur autocompleteData', data); // выводим данные в консоль
            console.log($(element).attr('uid'), ($(element).attr('uid')||''), ($(element).attr('uid')||'') === ''); // выводим данные в консоль

            if(($(element).attr('uid')||'') === ''){
                if (data.length == 1) {
                    eventOnSelect(element, { item: data[0]})
                }else{
                    $(element).val('');
                    eventOnInput(element);
                    sendNotificationOnChange(element, {});
                }
            }else{
                setValid(element, true);
            }
        } */

        /* function fetchAutocomplete(url, request, response, element) {
            const report = element.parent().parent().attr('id');

            $.ajax({
                url: url,
                dataType: "json",
                data: {
                    term: request.term,  // это ваше текущее значение input
                    report: report
                },
                success: function(data) {
                    response(data);
                    element.data("autocompleteData", data);
                }
            });
        } */

        /* function eventOnSelect(element, ui) {
            console.log('eventOnSelect');
            $(element).attr('uid', ui.item.uid);
            $(element).data("json", ui.item);
            setValid(element, true);
            //$(element).blur();

            setTimeout(() => {
                $(element).blur();
            }, 50); // время анимации в миллисекундах

            sendNotificationOnChange(element, ui.item);

            const report = $(element).parent().parent().attr('id');
            var reportRow = $('#' + report);
            const currDetal = $(reportRow).find('[name="Деталь"]').val();

            logToServer('Изменено значение "'+ $(element).attr('name') +'" = ' + ui.item.value, {item:ui.item, report:report, currDetal:currDetal});
        } */

        /* function sendNotificationOnChange(element, value) {
            console.log('sendNotificationOnChange');
            const report = $(element).parent().parent().attr('id');

            payload = {};
            payload.type = 'Документы';
            payload.docName = docName;
            payload.doc = report;
            payload.keyName = $(element).attr('name');
            payload.value = value;

            sendWSS('updateDataOnServer', docName, payload);
        } */


    });
</script>