<style>
  #container {
    max-width: 600px;
  }

  .qr-code {
    font-size: xx-large;
    font-size: xx-large;
    margin-right: 10px;
    margin-left: 10px;
  }

  #userScan {
    font-size: xx-large;
    font-size: xx-large;
    margin-right: 10px;
    margin-left: auto;
  }

  #qrContainer {
    background-color: rgba(255, 255, 255, 0.9);
    position: fixed;
    width: 100%;
    max-width: 600px;
    height: 100%;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    display: none;
    justify-content: center;
    align-items: center;
  }

  .qrImage {
    width: 90%;
  }

  #closeQR {
    position: absolute;
    top: 9px;
    right: 10px;
    font-size: xxx-large;
    background: lightgrey;
    border-radius: 50%;
    padding: 10px;
    color: black;
  }

  .titleContainer {
    width: 100%;
    justify-content: start;
    align-items: center;
  }
  .userFotoContainer {
    margin-top: 10px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
  }

  .userFoto {
    width: 100%;
    min-width: 150px;
    min-height: 150px;
    height: auto;
    max-width: 220px;
    position: relative;
    display: flex;
    align-items: center;
  }

  .userFotoContent {
    object-fit: contain;
    background-color: #f0f0f0;
    width: 100%;
  }

  .userFotoDelete {
    position: absolute;
    top: 0;
    right: 0;
    font-size: xxx-large;
    color: red;
  }

  .userFotoCount {
    position: absolute;
    top: 10px;
    left: 10px;
    font-size: xx-large;
    width: 40px;
    height: 40px;
    background-color: rgb(255 255 255 / 61%);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    padding: 5px;
  }

  .dateLastFinded {
    position: absolute;
    bottom: 3px;
    left: 3px;
    font-size: medium;
    color: white;
    text-align: left;
    background-color: rgb(0 0 0 / 50%);
    border-radius: 5px;
    padding: 2px 5px;
  }

  #userListContent {
    max-width: 900px;
    margin: auto;
  }

  #content {
    min-width: 400px;
  }

  /* #btnLoadUserList {
      font-size: 1em;
      margin: auto;
      white-space: nowrap;
      padding: 1%;
      margin: 0;
      flex-grow: 1;
    }

    #btnUpdateFaceID {
      font-size: 1em;
      margin: 0;
      white-space: nowrap;
      padding: 1%;
      flex-grow: 1;
    } */

  #usersContainer {
    margin-top: 10px;
  }

  .noFoto {
    margin: 0 auto;
  }

  .commandBtn {
    display: flex;
    justify-content: space-between;
    gap: 10px;
  }

  .fullCommandLine {
    display: none;
  }

  .emptyCommandLine {
    display: none;
  }

  #btnDeleteAllFoto {
    display: flex;
    align-items: center;
    gap: 5px;
    display: flex;
    justify-content: center;
    flex-grow: 1;
  }

  .userList {
    padding: 0 3px;
  }

  .plateListItem {
    display: flex;
  }

  .userActions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-bottom: 5px;
  }
  .countFaceID {
    margin-left: auto;
    line-height: 45px;
    position: relative;
    width: 125px;
  }

  .btnUserEdit {
    /* margin-left: 10px;
      margin-top: 5px;
      margin-bottom: 5px; */
    background-color: aliceblue;
  }

  #formVideoCamera {
    border: 1px solid #999;
    border-radius: 5px;
    background-color: rgba(225, 225, 225, 0.93);
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 70%;
    max-width: 400px;
    /* height: 70%; */
    padding: 10px;
  }

  #blockFormForVideoScaner {
    background-color: rgba(105, 105, 105, 0.9);
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  .avatarImg {
    width: 100%;
    max-width: 400px;
    margin: auto;
  }

  #videoScaner {
    width: 100%;
    max-width: 400px;
    margin: auto;
  }

  .btnUserVideoScaner {
    background-color: aliceblue;
    width: 40%;
  }

  #groupBtnVideoScaner {
    display: flex;
    margin-top: 5px;
  }

  #groupUserInfoForVideoScaner {
    display: flex;
  }

  #selectedUserForVideoScaner {
    font-size: 1.6em;
  }

  #infoForSelectedUserForVideoScaner {
    font-size: 1.6em;
    margin-left: auto;
  }

  .groupSearch {
    width: auto;
    border: 1px solid #aaa;
    background-color: #fff;
    display: flex;
    align-items: center;
    flex-grow: 2;
    font-size: 1em;
  }

  #search {
    border: none;
    line-height: 100%;
    height: 100%;
    padding-right: 0;
  }

  #search:focus {
    box-shadow: none;
  }

  #search-addon {
    background-color: #fff;
  }

  .work {
    margin-right: 5px;
  }

  .userNameText {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-bottom: 5px;
  }

  .userNameFaceID {
    margin-bottom: 0px;
  }

  .userMenuFaceID {
    width: 23%;
    font-size: 0.8em;
    padding: 5px;
    /* margin-left: 20px; */
  }

  /* Посада */
  .userProfaFaceID {
    width: 23%;
    font-size: 0.8em;
    padding: 5px;
    /* margin-left: auto; */
  }

  .userActionButton {
    width: 8%;
    font-size: 2em;
    display: flex;
    justify-content: center;
  }

  #groupBtn {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 4%;
  }

  #groupBtn button {
    flex: 1 1 48%;
    max-width: 48%;
  }

  .groupSearch {
    flex: 1 1 100%;
    margin-top: 10px; /* Відступ між рядами */
  }

  .btnTop {
    font-size: small;
    width: 48%;
    padding: 10px;
    margin: 0 !important;
  }

  @media (max-width: 700px) {
    #content {
      min-width: 375px;
    }

    .userNameText {
      width: auto;
      flex-wrap: wrap;
    }

    .userMenuFaceID {
      display: none;
      text-wrap: nowrap;
    }

    .userProfaFaceID {
      font-size: 1.5em;
      width: 30%;
    }

    .userActionButton {
      width: 8%;
      font-size: 2em;
    }

    .input-group {
      width: 100%;
      padding: 5px;
    }
  }

  .hide {
    display: none;
  }

  mark {
    background: yellow;
    padding: 0;
  }

  details {
    font-size: small;
  }

  .burger-menu {
    font-size: xxx-large;
    z-index: 1;
  }

  .aboutRow {
    display: flex;
    justify-content: space-between;
  }

  .empCode {
    font-size: small;
    text-align: start;
    position: relative;
    left: -99px;
    top: 44px;
  }

  .login {
  }

  .phone {
    display: flex;
    gap: 5px;
    position: relative;
  }

  .phone i {
    display: flex;
    align-items: center;
    min-height: 36px;
  }

  .phoneMenu {
    position: absolute;
    display: none;
    flex-direction: column;
    width: auto;
    min-width: fit-content;
    background-color: rgb(255 255 255 / 90%);
    border: 1px solid lightgrey;
    border-radius: 10px;
    top: 110%;
    left: -120px;
    display: none;
    z-index: 1;
  }

  .phoneItem {
    display: flex;
    width: fit-content;
    align-items: center;
  }

  .phoneText {
    text-wrap: nowrap;
    text-decoration: none;
    color: black;
  }

  .phoneText a {
    color: black;
  }

  .phoneCopy {
  }

  .phone a:visited {
    color: inherit;
    text-decoration: none;
  }

  .phone a:hover {
    text-decoration: none;
  }

  .viberSvg {
    width: 51px;
    height: 51px;
  }

  .phoneIcon a {
    color: black;
  }

  .profa {
    font-size: small;
    text-align: end;
    overflow: hidden;
    text-wrap: nowrap;
    text-overflow: ellipsis;
    margin-bottom: 3px;
  }

  .infoRow {
    display: flex;
    justify-content: space-between;
    gap: 10px;
  }
  .actionRow {
    display: flex;
    justify-content: space-evenly;
    font-size: large;
    padding: 0px;
    align-items: center;
  }

  .photoCount {
    display: flex;
    gap: 10px;
  }

  .arrival {
    text-align: right;
    font-size: medium;
    display: flex;
    gap: 5px;
  }

  .menuContainer {
    position: relative;
    line-height: normal;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
  }

  [data-work='true'] {
    border: 3px solid #28ac28;
  }

  [data-work='false'] {
    border: 3px solid lightgray;
  }

  .tabelContainer {
    display: none;
    text-align: center;
  }

  .fotoContainer {
    display: none;
    padding-top: 10px;
  }

  .galleryContainer {
    text-align: center;
  }

  .hideTabel {
    margin: 10px 0;
  }

  .tabel {
    border: 1px;
    font-size: medium;
  }

  .avatarContainer {
    width: 90px;
    height: 90px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    min-width: 84px;
    flex-shrink: 0;
  }

  .avatar {
    width: 90px;
    height: 90px;
  }

  .userCardHead {
    display: flex;
    gap: 5px;
    width: 100%;
  }

  .basicInfo {
    flex-grow: 1;
    min-width: 0;
  }

  .info {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  .infoColumn {
    width: 100%;
  }

  .userNameFaceID {
    overflow: hidden;
    text-wrap: nowrap;
    text-overflow: ellipsis;
    text-align: center;
    width: 100%;
  }

  .btn-light {
    border-color: #afc3ad;
    padding: 5px 8px;
    overflow: hidden;
    text-wrap: nowrap;
    text-overflow: ellipsis;
  }

  .isNewFoto {
    background-color: lightgreen;
  }
</style>

<script id="listContainer" type="text/x-handlebars-template">
  {{#each items}}
    {{> ContainerTemplate canLoginUser=../canLoginUser}}

  {{/each}}
</script>

<script id="ContainerTemplate" type="text/x-handlebars-template">
  <div id='{{uid}}' empCode='{{emp_code}}' class='plateListItem'>
    <div class='itemContainer'>
      {{> ContentTemplate canLoginUser=canLoginUser}}
    </div>
    <div class='tabelContainer'></div>
    <div class='fotoContainer'>
      <div class='commandBtn fullCommandLine'>
        <div id='btnDeleteAllFoto' class='btn btn-secondary' onClick='deletePhotos(event)'>Видалити всі фото</div>
        <div class='addFoto addPhoto btn btn-lg btn-light'>
          <i class='bi bi-person-plus-fill'></i>
        </div>
        <div class='addFoto addPhotoFromFile btn-lg btn btn-light'>
          <input type='file' class='fileInput' id='fileInput_{{uid}}' style='display: none;' accept='image/*' />
          <i class='bi bi-download'></i>
        </div>
      </div>

      <div class='commandBtn emptyCommandLine'>
        <div id='btnDeleteAllFoto' class='btn btn-secondary'>Немає фото</div>
        <div class='addFoto addPhoto btn btn-lg btn-light'>
          <i class='bi bi-person-plus-fill'></i>
        </div>
        <div class='addFoto addPhotoFromFile btn btn-lg btn-light'>
          <input type='file' class='fileInput' id='fileInput_{{uid}}' style='display: none;' accept='image/*' />
          <i class='bi bi-download'></i>
        </div>
      </div>

      <div class="galleryContainer">
      </div>
    </div>
  </div>
</script>

<script id="ContentTemplate" type="text/x-handlebars-template">
  <div class='itemContent'>
    <div class='userCardHead'>
      <div class='avatarContainer' data-work='{{work}}'>
        <div class="online" style="display:none">{{#if work}}онлайн{{/if}}</div>
        <img
          class='avatar'
          src='/auth_files/biophoto/{{emp_code}}.jpg'
          alt='Фото користувача {{uid}}'
          onerror="this.onerror=null; this.src='/img/avatar.png';"
        />
      </div>
      <div class='basicInfo'>
        <div class='userNameText'>
          <h4 class='userNameFaceID'>
            <span class='userName'>{{name}}</span>
          </h4>
        </div>
        <div class='infoRow'>
          <div class='empCode'>{{emp_code}}</div>
          <div class='profa'>{{profa}}</div>
        </div>
        <div class='actionRow'>
          {{#if canLoginUser}}
          <div class='login'>
              <i class="bi bi-box-arrow-in-right btn btn-light btn-login"></i>
            </div>
          {{/if}}

          <div class='phone'>
            {{#if tel1}}
              <!-- <a href='tel:{{tel1Solid}}'><i class='bi bi-telephone-fill btn btn-light'>{{#if tel2}}1{{/if}}</i></a> -->
              <i class='bi bi-telephone-fill btn btn-light btnTel'></i>
              <div class="phoneMenu">
                <div class="phoneItem btn">
                  <span class="phoneText"><a href='tel:{{tel1Solid}}'>{{tel1}}</a></span>
                  <span class="phoneIcon"><a href='tel:{{tel1Solid}}'><i class='bi bi-telephone-fill btn btn-lg'></i></a></span>
                  <span class="phoneCopy"><i class="bi bi-clipboard btnCopy btn btn-lg"></i></span>
                  <span class="messageViber"><a href="viber://chat?number={{tel1Solid}}"><img src="/img/viber.svg" alt="viber" class="btn-lg viberSvg"/></a></span>
                  <span class="hidePhone" style="display: none">{{tel1Solid}}</span>
                </div>
                {{#if tel2}}
                <div class="phoneItem btn">
                  <span class="phoneText"><a href='tel:{{tel2Solid}}'>{{tel2}}</span></a>
                  <span class="phoneIcon"><a href='tel:{{tel2Solid}}'><i class='bi bi-telephone-fill btn btn-lg'></i></a></span>
                  <span class="phoneCopy"><i class="bi bi-clipboard btnCopy btn btn-lg"></i></span>
                  <span class="messageViber"><a href="viber://chat?number={{tel2Solid}}"><img src="/img/viber.svg" alt="viber" class="btn-lg viberSvg"/></a></span>
                  <span class="hidePhone" style="display: none">{{tel2Solid}}</span>
                </div>
                {{/if}}
              </div>
            {{/if}}
          </div>
          <!-- {{#if tel2}}
            <div class='phone'>
              <a href='tel:{{tel2}}'><i class='bi bi-telephone-fill btn btn-light'>2</i></a>
            </div>
          {{/if}} -->
          <div class='photoCount userCountFaceID btn btn-light {{#if isNewFoto}}isNewFoto{{/if}}'>
            <i class='bi bi-image'></i>
            <div class='counFoto'>{{count}}</div>
          </div>
          <div class='arrival btn btn-light'>
            <i class='bi bi-person-down'></i>
            <div class="timeContainer">{{timeFromLastProhod}}</div>

          </div>
        </div>
        <div class='info displayFlex'></div>
      </div>
    </div>
  </div>
</script>

<script id="tabelTemplate" type="text/x-handlebars-template">
  {{#if tabelFormatted}}
    {{#if tabelFormatted.length}}
        <i class='bi bi-caret-up-fill'></i></button>
      <table class='tabel'>
        <thead>
          <tr>
            <th style='width: 50%'>Дата</th>
            <th style='width: 25%'>Прихід</th>
            <th style='width: 25%'>Ухід</th>
          </tr>
        </thead>
        <tbody>
          {{#each tabelFormatted}}
            {{#if this}}
              <tr>
                <td>{{this.date}}</td>
                <td>{{this.arrival}}</td>
                <td>{{this.departure}}</td>
              </tr>
            {{/if}}
          {{/each}}
        </tbody>
      </table>
    {{else}}
      <div>Дані не доступні</div>
    {{/if}}
  {{else}}
    <div>Дані не доступні</div>
  {{/if}}
</script>

<!-- <script id="fotoEmptyTemplate" type="text/x-handlebars-template">
  <div class='commandBtn'>
    <div id='btnDeleteAllFoto' class='btn btn-secondary'>Немає фото</div>
    <div class='addFoto addPhoto btn btn-light'>
      <i class='bi bi-person-plus-fill'></i>
    </div>
    <div class='addFoto addPhotoFromFile btn btn-light'>
      <input type='file' class='fileInput' id='fileInput_{{uid}}' style='display: none;' accept='image/*' />
      <i class='bi bi-download'></i>
    </div>
</script> -->

<script id="fotoTemplate" type="text/x-handlebars-template">
  <div class='userFotoContainer attachedImgContainer'>
    {{#each this}}
      <div class='userFoto attachedImg'>
        <img
          class='userFotoContent src-source'
          src='/foto/{{userId}}/{{fileName}}'
          src-source='/foto/{{userId}}/{{fileName}}'
          alt='{{fileName}}'
          title='{{fileName}}'
          loading='lazy'
          onerror="this.src='/img/emptyUserPhoto.png'"
        />
        <span class='userFotoCount'>{{countFileUse}}</span>
        <span class='userFotoDelete'> <i class='bi bi-trash'></i></span>
        {{#if dateLastFinded}}
          <div class='dateLastFinded'> {{dateLastFinded}}</div>
        {{/if}}
      </div>
    {{/each}}
  </div>
</script>

<div id="userListContent">
  <div id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-people-fill" id="pageIcon"></i>
      <div id="titleText">
        <h3 class="titlePage2">Перелік користувачів</h3>
      </div>
      <i class="bi bi-person-exclamation" id="userScan"></i>
      <i class="bi bi-qr-code-scan qr-code" id="qr-code"></i>
    </div>
  </div>

  <div id="groupBtn">
    <button
      id="btnLoadUserList"
      type="button"
      class="btn btn-secondary btn-lg mainColor btnTop"
      onclick="loadUserListFrom1C()"
    >
      Загрузить список из 1С
    </button>
    <button
      id="btnUpdateFaceID"
      type="button"
      class="btn btn-secondary btn-lg mainColor btnTop"
      onclick="updateFaceID()"
    >
      Обновить FaceID
    </button>

    <div class="input-group rounded groupSearch">
      <input
        type="search"
        id="search"
        class="form-control rounded"
        placeholder="Поиск по ФИО и должности"
        aria-label="Search"
        aria-describedby="search-addon"
      />
      <span class="input-group-text border-0" id="search-addon">
        <i class="bi bi-search"></i>
      </span>
    </div>
  </div>

  <div id="usersContainer">
    <div
      id="userList"
      url="user/api"
      callbackAfterLoadData="callbackAfterLoadData"
      callbackForRender="callbackForRender"
      type="plate"
      paggination="false"
    ></div>

    <style>
      #formUpdateAvatar {
        background-color: rgba(105, 105, 105, 0.9);
        position: fixed;
        top: 0;
        left: 0;
        position: absolute;
        padding: 10px;
        border-radius: 3px;
      }

      #formAddPhoto {
        position: fixed;
        background-color: rgba(0, 0, 0, 0.7);
        width: 100vw;
        height: 100vh;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }

      #formScanPhoto {
        position: fixed;
        background-color: rgba(0, 0, 0, 0.7);
        width: 100vw;
        height: 100vh;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }

      #addPhotoClose {
        /* position: relative; */
        align-self: flex-end;
        font-size: x-large;
      }

      #scanPhotoClose {
        position: relative;
        align-self: flex-end;
        font-size: x-large;
      }

      .addPhotoContent {
        background-color: white;
        padding: 20px;
        font-size: large;
        display: flex;
        flex-direction: column;
        gap: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgb(255 255 255 / 92%);
        max-width: 600px;
        overflow-y: auto;
        height: fit-content;
        max-height: 95dvh;
        margin: 0 10px;
      }

      .addPhotoHeader {
        display: flex;
      }

      .addPhotoTitle {
        font-size: x-large;
        margin: 0 auto;
      }

      .addPhotoText {
        font-size: large;
      }

      .checkPhoto {
        width: 100%;
      }

      #scanResult {
      }

      .resultTitle {
        display: flex;
        justify-content: center;
        font-size: x-large;
        margin-bottom: 10px;
      }

      #resultText {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
      }

      #resultPhoto {
        display: flex;
        justify-content: space-between;
        gap: 10px;
        margin-bottom: 10px;
      }

      #sourcePhoto,
      #originalPhoto {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        flex: 1;
        position: relative;
      }

      #sourcePhoto::after,
      #originalPhoto::after {
        position: absolute;
        top: 10px;
        width: 100%;
        text-align: center;
        text-shadow: 1px 1px 1px white;
      }

      #sourcePhoto::after {
        content: 'Завантажене фото';
      }
      #originalPhoto::after {
        content: 'Знайдене фото';
      }

      #photoArray {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
      }

      .photoItem {
        max-width: 300px;
        width: 100%;
        position: relative;
      }

      .photoItem img {
        width: 100%;
        height: auto;
      }

      .photoSim {
        position: absolute;
        top: 10px;
        right: 10px;
        text-shadow: 1px 1px 1px white;
      }

      .photoUserName {
        position: absolute;
        top: 10px;
        left: 10px;
        text-shadow: 1px 1px 1px white;
        font-size: small;
      }

      .btnContainer {
        font-size: xxx-large;
        display: flex;
        justify-content: center;
        gap: 10px;
        width: 100%;
      }

      #btnScanMakePhoto,
      #btnScanLoadPhoto {
        font-size: xxx-large;
      }

      #btnCloseAvatarForm {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.5);
        border: none;
        top: 20px;
        right: 20px;
        border-radius: 50%;
        width: 40px;
        height: 40px;
      }

      .closeBtn {
        font-size: x-large;
        color: white;
        cursor: pointer;
        z-index: 10000;

        display: flex;
        justify-content: center;
        align-items: center;
      }

      #groupBtnUpdateAvatar {
        display: flex;
        justify-content: space-between;
        gap: 10px;
      }

      #btnMakePhoto {
        flex: 1;
      }

      .forBtnMakePhoto {
        margin: 0;
        flex: 1;
        font-size: xxx-large;
      }

      .forBtnLoadPhoto {
        margin: 0;
        flex: 1;
        font-size: xxx-large;
      }

      #btnMakePhoto,
      #btnLoadPhoto,
      #scanMakePhoto,
      #scanLoadPhoto {
        display: none;
      }
    </style>

    <div id="formUpdateAvatar" style="display: none">
      <div id="groupBtnUpdateAvatar">
        <label for="btnMakePhoto" class="btn btn-outline-dark btn-light forBtnMakePhoto">
          <i class="bi bi-camera"></i>
        </label>
        <input type="file" id="btnMakePhoto" accept="image/*" capture="camera" />
        <label for="btnLoadPhoto" id="forBtnLoadPhoto" class="btn btn-outline-dark btn-light forBtnLoadPhoto">
          <i class="bi bi-download"></i>
        </label>
        <input type="file" id="btnLoadPhoto" accept="image/*" />
      </div>
    </div>

    <div id="formAddPhoto" style="display: none">
      <div class="addPhotoContent">
        <div id="addPhotoClose"><i class="bi bi-x-lg"></i></div>
        <div class="addPhotoTitle"></div>
        <div class="addPhotoText">
          <p>Додайте ще хоча б одне фото.</p>
        </div>

        <div class="btnContainer">
          <div class="addFoto addPhoto btn btn-lg btn-light" id="addPhotoPhoto">
            <i class="bi bi-person-plus-fill"></i>
          </div>
          <div class="addFoto addPhotoFromFile btn-lg btn btn-light" id="addPhotoDownload">
            <i class="bi bi-download"></i>
          </div>
        </div>
      </div>
    </div>

    <div id="formScanPhoto" style="display: none">
      <div class="addPhotoContent">
        <div class="addPhotoHeader">
          <div class="addPhotoTitle">Перевірка фото</div>
          <div id="scanPhotoClose"><i class="bi bi-x-lg"></i></div>
        </div>

        <div class="addPhotoText">
          <p>Додайте фото для сканування</p>
        </div>

        <div class="btnContainer">
          <label for="scanMakePhoto" class="addFoto addPhoto btn btn-lg btn-light" id="btnScanMakePhoto">
            <i class="bi bi-camera"></i>
          </label>
          <input type="file" id="scanMakePhoto" accept="image/*" capture="camera" />
          <label for="scanLoadPhoto" class="addFoto addPhotoFromFile btn-lg btn btn-light" id="btnScanLoadPhoto">
            <i class="bi bi-download"></i>
          </label>
          <input type="file" id="scanLoadPhoto" accept="image/*" />
        </div>
        <div id="scanResult" style="display: none">
          <div class="resultTitle">Результат перевірки</div>
          <div id="resultText">
            <span id="userName"></span>
            <span id="similarity"></span>
            <span id="score"></span>
            <span id="emotion"></span>
          </div>
          <div id="resultPhoto" class="attachedImgContainer">
            <div id="sourcePhoto"></div>
            <div id="originalPhoto"></div>
          </div>
          <div id="photoArray" class="attachedImgContainer"></div>
        </div>
      </div>
    </div>

    <div id="qrContainer">
      <img class="qrImage" src="img/qrcode.png" alt="qr" />
      <i class="bi bi-x-lg closeBtn" id="closeQR"></i>
    </div>

    <div id="blockFormForVideoScaner" style="display: none">
      <div id="formVideoCamera">
        <video id="videoScaner" width="250" height="auto" autoplay></video>

        <div id="groupBtnVideoScaner">
          <button
            id="btnStartScanFace"
            class="btn btn-outline-dark btnUserVideoScaner"
            style="display: none"
            onclick="startVideoScaner()"
          >
            Начать
          </button>
          <button class="btn btn-outline-dark btnUserVideoScaner rightAlign" onclick="closeVideoScaner()">
            Закрыть
          </button>
        </div>

        <div id="groupUserInfoForVideoScaner">
          <div id="selectedUserForVideoScaner"></div>
          .
          <div id="infoForSelectedUserForVideoScaner"></div>
        </div>
      </div>
    </div>

    <script>
      var videoScaner = document.getElementById('videoScaner');
      var selectedUID = '';
      var scannerActive = false;
      var canvasVideoScaner = document.createElement('canvas');

      pageUID = '944bf4ef-27bf-11ee-8208-000c29006152';
      userRights = $('#menu').data('userRight')[pageUID];

      hasCamera = false;
      async function initializeCamera() {
        hasCamera = await checkForCamera();
      }
      initializeCamera();

      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        console.log('navigator.mediaDevices', navigator.mediaDevices);

        navigator.mediaDevices
          .getUserMedia({ video: true })
          .then(function (stream) {
            videoScaner.srcObject = stream;
          })
          .catch(function (error) {
            console.error('Ошибка доступа к веб-камере: ', error);
            toastr['error']('Ошибка доступа к веб-камере');
          });
      } else {
        console.error('Браузер не поддерживает API доступа к медиа-устройствам');
        toastr['error']('Браузер не поддерживает API доступа к медиа-устройствам');
      }

      videoScaner.addEventListener('loadeddata', () => {
        console.log('event loadeddata videoScaner');
        $('#btnStartScanFace').show();
      });

      $(document).on('click', function (e) {
        const phoneMenu = $('.phoneMenu');
        const formAddPhoto = $('#formAddPhoto');
        const formScanPhoto = $('#formScanPhoto');
        if (!$(e.target).closest('.phoneMenu').length && !$(e.target).closest('.btnTel').length) {
          $('.phoneMenu').each(function () {
            $(this).hide();
          });
        }

        if (!$(e.target).closest('.addPhotoContent').length) {
          addPhotoClose();
        }

        if (!$(e.target).closest('#formUpdateAvatar').length && !$(e.target).closest('.avatar').length) {
          $('#formUpdateAvatar').hide();
        }
      });

      $('#userList').on('click', '.btnTel', function (e) {
        console.log('this', this);
        const container = $(this).closest('.plateListItem');
        const uid = container.attr('id');
        const phoneMenu = container.find('.phoneMenu');
        console.log('phoneMenu', container, phoneMenu);

        if (phoneMenu.is(':visible')) {
          phoneMenu.hide();
          return;
        }
        $('.phoneMenu').hide();
        phoneMenu.css('display', 'flex');
      });

      function getTelText(element) {
        const container = $(element).closest('.phoneItem');
        const telText = container.find('.phoneText').text();
        return telText;
      }

      $('#userList').on('click', '.phoneIcon', function (e) {
        clickAnimate(this);
      });

      $('#userList').on('click', '.messageViber', function (e) {
        clickAnimate(this);
      });

      $('#userList').on('click', '.btnCopy', function (e) {
        clickAnimate(this);
        const container = $(this).closest('.phoneItem');
        const telText = container.find('.phoneText').text();
        console.log('telText', telText);
        navigator.clipboard
          .writeText(telText)
          .then(() => {
            console.log('Text copied to clipboard');
            toastr.success('Текст скопійовано');
          })
          .catch(err => {
            console.error('Failed to copy text: ', err);
          });
      });

      $('#qr-code').on('click', function (e) {
        console.log('qr click');
        $('#qrContainer').css('display', 'flex');
      });

      $('#closeQR').on('click', function () {
        $('#qrContainer').hide();
      });

      $('#qrContainer').on('click', function () {
        $('#qrContainer').hide();
      });

      $('#userList').on('click', '.addPhoto', function (e) {
        const uid = $(this).closest('.plateListItem').attr('id');
        const name = $(this).attr('name');
        const count = $(this).attr('count');
        console.log('this, uid, name, count', this, uid, name, count);
        addPhoto(this, uid, name, count);
      });

      function addPhoto(btn, uid, name, count) {
        console.log('addPhoto userRights', btn, uid, name, count, userRights.canAddFoto);

        if (!userRights.canAddFoto) {
          toastr.error('У Вас немає прав додавати фото!');
          return;
        }
        selectedUID = uid;

        if (hasCamera) {
          $('#selectedUserForVideoScaner').text(name);
          $('#infoForSelectedUserForVideoScaner').text($('#' + selectedUID + ' .userCountFaceID').text());
          $('#blockFormForVideoScaner').show();
          $('#blockFormForVideoScaner').data('uid', uid);
        } else {
          toastr.error('На цьому пристрої немає камери');
        }
      }

      $(document).on('change', '.fileInput', function (event) {
        uploadFromFile(event.target);
      });

      $('#userList').on('click', '.addPhotoFromFile ', function (e) {
        const uid = $(this).closest('.plateListItem').attr('id');
        const name = $(this).attr('name');
        const count = $(this).attr('count');
        console.log('this, uid, name, count', this, uid, name, count);
        addPhotoFromFile(this, uid, name, count);
      });

      function addPhotoFromFile(btn, uid, name, count) {
        console.log('addPhotoFromFile', btn, uid, name, count);

        if (!userRights.canAddFoto) {
          toastr.error('У Вас немає прав додавати фото!');
          return;
        }

        selectedUID = uid;
        const fileInputId = `fileInput_${uid}`;
        const fileInput = document.getElementById(fileInputId);

        if (fileInput) {
          fileInput.value = '';
          fileInput.click();
        }
      }

      function closeVideoScaner() {
        console.log('closeVideoScaner');
        const uid = $('#blockFormForVideoScaner').data('uid');
        const container = $('.plateListItem[id="' + uid + '"]');
        generatePhotos(container);
        $('#blockFormForVideoScaner').hide();
        scannerActive = false;
        $('#btnStartScanFace').html('Начать');
      }

      function startVideoScaner() {
        console.log('startVideoScaner selectedUID', selectedUID);
        scannerActive = !scannerActive;

        if (scannerActive) {
          $('#btnStartScanFace').html('Остановить');
          savePhoto();
        } else {
          $('#btnStartScanFace').html('Начать');
        }
      }

      async function checkVideoCapabilities() {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ video: true });
          const track = stream.getVideoTracks()[0];
          const capabilities = track.getCapabilities();

          console.log('Video Capabilities:', capabilities);
        } catch (error) {
          console.error('Error checking video capabilities:', error);
        }
      }

      function savePhoto() {
        console.log('start uploadPhoto selectedUID', selectedUID);

        try {
          if (scannerActive) {
            if ($('#videoScaner').is(':visible')) {
              NProgress.start();
              checkVideoCapabilities();
              const context = canvasVideoScaner.getContext('2d');

              canvasVideoScaner.width = videoScaner.videoWidth * 4;
              canvasVideoScaner.height = videoScaner.videoHeight * 4;
              console.log(
                'videoScaner.width, videoScaner.videoWidth',
                videoScaner.width,
                videoScaner.videoWidth,
                $(videoScaner)
              );

              context.drawImage(videoScaner, 0, 0, canvasVideoScaner.width, canvasVideoScaner.height);

              canvasVideoScaner.toBlob(function (blob) {
                console.log('blob', blob);

                const reader = new FileReader();
                reader.onloadend = function () {
                  $.post(
                    '/saveFace',
                    { photo: reader.result, uid: selectedUID },
                    function (response) {
                      console.log('response from reader.onloadend', response);
                      NProgress.done();

                      console.log('response.detectFace, response.user', response.detectFace, response.user);
                      if (response.detectFace && response.user) {
                        $('#infoForSelectedUserForVideoScaner').text(response.similarity + ' - ' + response.user.count);
                        $('#' + selectedUID + ' .counFoto').text('' + response.user.count);
                        toastr['info']('OK');
                      } else {
                        toastr['error']('Лицо не обнаружено');
                      }

                      setTimeout(() => {
                        savePhoto();
                      }, 500);
                    },
                    'json'
                  ).fail(function (jqXHR, textStatus, errorThrown) {
                    console.log('error - /saveFace');
                    NProgress.done();

                    setTimeout(() => {
                      savePhoto();
                    }, 500);
                    console.log('--------------- error from fail --------------', textStatus);
                    toastr['error']('ERROR');
                  });
                };
                reader.readAsDataURL(blob);
              }, 'image/jpeg');
            }
          }
        } catch (error) {
          console.log('--------------- error from face scan ------------------', error);
          setTimeout(() => {
            savePhoto();
          }, 500);
          toastr['error'](error);
        }
      }

      function fileToBase64(file, callback) {
        console.log('fileToBase64 start');
        const reader = new FileReader();
        reader.onloadend = function () {
          callback(reader.result);
        };
        reader.readAsDataURL(file);
      }

      function updateCountPhoto(uid, number) {
        const placeholder = $('.plateListItem[id="' + uid + '"]').find('.counFoto');
        placeholder.text(number);
      }

      function generatePhotos(container) {
        console.log('generatePhotos start');
        let galleryContainer = $(container).find('.galleryContainer');
        const newUserID = $(container).attr('id');
        const fullCommandLine = $(container).find('.fullCommandLine');
        const emptyCommandLine = $(container).find('.emptyCommandLine');
        console.log('generatePhotos', galleryContainer);
        NProgress.start();

        try {
          $.ajax({
            url: '/userListFoto',
            type: 'GET',
            dataType: 'json',
            data: { UserID: newUserID },
            success: function (response) {
              console.log('response', response);

              let dataForTemplate = response.map(element => {
                return {
                  fileName: element.fileName,
                  countFileUse: element.countFileUse,
                  userId: element.userId,
                  dateLastFinded: element.dateLastFinded ? formatter.format(new Date(element.dateLastFinded)) : '',
                };
              });

              console.log('dataForTemplate', dataForTemplate);
              if (response.length > 0) {
                emptyCommandLine.hide();
                fullCommandLine.css('display', 'flex');
                generateFromTemplate('#fotoTemplate', dataForTemplate, galleryContainer);
                updateCountPhoto(newUserID, response.length);
              } else {
                emptyCommandLine.css('display', 'flex');
              }
              container[0].scrollIntoView({
                behavior: 'smooth',
                block: 'start',
              });
              NProgress.done();
            },
          });
        } catch (error) {
          NProgress.done();
        }
      }

      $('#btnMakePhoto, #btnLoadPhoto').on('change', function (e) {
        console.log('changeAvatarForm click', $(this).closest('.plateListItem'));
        const file = this.files[0];
        if (!file) {
          toastr.error('Будь ласка, виберіть файл.');
          return;
        }

        if (file && !file.type.startsWith('image/')) {
          toastr.error('Невірний тип файлу. Виберіть зображення.');
          event.target.value = '';
        }

        const formUpdateAvatar = $('#formUpdateAvatar');

        const uid = $('#formUpdateAvatar').data('uid');
        const plateListItem = $('.plateListItem').filter(function () {
          return $(this).attr('id') === uid;
        });
        const userData = plateListItem.data('data');
        const empCode = $('#formUpdateAvatar').data('empCode');
        console.log('file, formUpdateAvatar, uid, userData', this, file, formUpdateAvatar, uid, userData);
        $('#formUpdateAvatar').hide();
        uploadAvatarFromFile(file, uid, empCode)
          .then(response => {
            console.log('after uploadAvatarFromFile response', response);
            const addUserPhotoResult = response.data.addUserPhotoResult;
            if (addUserPhotoResult.addedFoto) {
              console.log('Фото успішно додано до галереї користувача.');
            } else {
              console.warn('Фото не додано до галереї користувача. ');

              $('#formAddPhoto').data('uid', uid);
              $('#formAddPhoto').show();
            }
            this.value = '';
          })
          .catch(error => {
            console.error('Upload error:', error);
            this.value = '';
          });
      });

      function uploadAvatarFromFile(file, uid, empCode) {
        console.log('file from uploadAvatarFromFile', file, uid);

        return new Promise((resolve, reject) => {
          if (!file) {
            toastr.error('Будь ласка, виберіть файл.');
            return reject(new Error('No file selected'));
          }

          if (file.size > 5 * 1024 * 1024) {
            toastr.error('Файл завеликий. Максимальний розмір — 5MB.');
            return reject(new Error('File size exceeds limit'));
          }

          fileToBase64(file, function (base64Image) {
            NProgress.start();
            $.ajax({
              url: '/updateAvatar',
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({ photo: base64Image, uid: uid, empCode: empCode }),
              dataType: 'json',
              success: function (response) {
                console.log('response from uploadAvatarFromFile', response);
                const updateResponse = response.data.updateResult;
                const addUserPhotoResult = response.data.addUserPhotoResult;

                if (updateResponse.data.ret === 0) {
                  toastr.success('Фото профіля успішно збережено.');
                } else {
                  toastr.error('Помилка зберігання фото профіля.');
                }

                if (addUserPhotoResult.addedFoto) {
                  toastr.success('Фото додано в галерею користувача.');
                } else {
                  toastr.error('Фото не збережено до галереї користувача');
                  console.log('');
                }
                resolve(response);
              },
              error: function (jqXHR, textStatus, errorThrown) {
                console.error('error from fail', textStatus, errorThrown);

                let errorMessage = 'ERROR';
                if (jqXHR.responseJSON && jqXHR.responseJSON.error) {
                  errorMessage = 'помилка ' + jqXHR.responseJSON.error;
                } else if (jqXHR.responseText) {
                  errorMessage = 'помилка ' + jqXHR.responseText;
                }

                toastr['error'](errorMessage);
                reject(new Error(errorMessage));
              },
              complete: function () {
                NProgress.done();
              },
            });
          });
        });
      }

      function uploadFromFile(fileInput) {
        const file = fileInput.files[0];
        console.log('file from uploadFromFile', file, fileInput.files);
        const fileInputId = $(fileInput).attr('id');
        const selectedUID = fileInputId.split('_')[1];
        const container = $(fileInput).closest('.plateListItem');

        if (!file) {
          toastr.error('Будь ласка, виберіть файл.');
          return;
        }

        if (file.size > 5 * 1024 * 1024) {
          toastr.error('Файл завеликий. Максимальний розмір — 5MB.');
          return;
        }

        fileToBase64(file, function (base64Image) {
          NProgress.start();
          $.post(
            '/savePhotoOnly',
            { photo: base64Image, uid: selectedUID },
            function (response) {
              console.log('response from savePhotoOnly', response);
              if (response.success) {
                toastr['info']('Фото успішно збережено!');
              } else if (response.error) {
                toastr['error']('Помилка при збереженні фото.');
              } else if (response.exception) {
                toastr['error']('Виникла невідома помилка.');
              }
            },
            'json'
          )
            .done(function () {
              NProgress.done();
              generatePhotos(container);
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
              console.log('error - /savePhotoOnly textStatus, errorThrown', textStatus, errorThrown);
              console.error('error from fail');
              toastr['error']('ERROR');
              NProgress.done();
            });
        });
      }

      $('#scanMakePhoto, #scanLoadPhoto').on('change', function (e) {
        console.log('scanMakePhoto, #scanLoadPhoto change');
        const file = this.files[0];
        if (!file) {
          toastr.error('Будь ласка, виберіть файл.');
          return;
        }

        if (file && !file.type.startsWith('image/')) {
          toastr.error('Невірний тип файлу. Виберіть зображення.');
          event.target.value = '';
          this.value = '';
          return;
        }

        checkPhoto(file);
        this.value = '';
      });

      async function sendPhotoForCheck(base64Image) {
        console.log('sendPhotoForCheck');
        NProgress.start();

        $.ajax({
          url: '/checkPhoto',
          method: 'POST',
          data: { photo: base64Image },
          success: function (response) {
            if (response.error) {
              toastr.error(response.error);
            } else {
              toastr.success('Фото успішно оброблено.');
              console.log(response.result);
              renderCheckInfo(response.result, base64Image);
            }
          },
          error: function (xhr, status, error) {
            const errorMessage = `Помилка при обробці фото: ${xhr.responseText || error}`;
            console.log(errorMessage);
            toastr.error(errorMessage);
          },
          complete: function () {
            NProgress.done();
          },
        });
      }

      async function checkPhoto(file) {
        console.log('checkPhoto');
        try {
          fileToBase64(file, base64Image => {
            sendPhotoForCheck(base64Image);
          });
        } catch (error) {
          toastr.error(`Помилка при перетворенні файла: ${error.message}`);
        }
      }

      function renderCheckInfo(info, sourcePhotoBase64) {
        console.log('info', info);
        const scanResult = $('#scanResult');
        scanResult.show();
        const resultText = $('#resultText');
        const userName = $('#userName');
        const resultPhoto = $('#resultPhoto');
        const sourcePhotoContainer = $('#sourcePhoto');
        const originalPhotoContainer = $('#originalPhoto');
        const similarity = $('#similarity');
        const score = $('#score');
        const emotionDisplay = $('#emotion');
        const photoArrayContainer = $('#photoArray');

        sourcePhotoContainer.empty();
        originalPhotoContainer.empty();
        originalPhotoContainer.hide();
        resultText.text();
        userName.text('');
        similarity.text('');
        score.text('');
        emotionDisplay.text('');
        photoArrayContainer.empty();

        const sourcePhoto = `
        <div 
            class="attachedImg" 
            src-source="/foto/${info.user.uid}/${info.originalPhotoName}"
          >  
          <img class="checkPhoto src-source" src="${sourcePhotoBase64}" />
        </div>
        `;
        sourcePhotoContainer.append(sourcePhoto);

        if (info.detectFace) {
          resultText.text('Обличчя розпізнано');
        } else {
          resultText.text('Обличчя не розпізнано');
        }
        resultText.append(`<br />`);

        if (!info.detectUser) {
          resultText.append('Користувача не знайдено');
          resultText.append(`<br />`);
        }
        if (info.user) {
          originalPhotoContainer.show();
          const originalPhoto = `
          <div 
            class="attachedImg" 
            src-source="/foto/${info.user.uid}/${info.originalPhotoName}"
          >
            <img 
              class="checkPhoto photoForSim src-source"  
              src="/foto/${info.user.uid}/${info.originalPhotoName}" 
              src-source="/foto/${info.user.uid}/${info.originalPhotoName}"
            />
          </div>
          `;
          originalPhotoContainer.append(originalPhoto);
          resultText.append(`Співробітник: ${info.user.name}`);
          resultText.append(`<br />`);
        }

        if (info.finded) {
          resultText.append(`Схожість: ${info.finded.similarity.toFixed(2)}`);
          resultText.append(`<br />`);
          resultText.append(`Бал: ${info.score}`);
          resultText.append(`<br />`);
        }

        if (info.finded2 && Array.isArray(info.finded2)) {
          info.finded2.forEach(item => {
            console.log('from info.finded2 item', item);
            const photoItem = `
                <div class="photoItem attachedImg" src-source="/foto/${item.uid}/${item.file}">
                    <img 
                      class='photoForSim src-source' 
                      src="/foto/${item.uid}/${item.file}" 
                      src-source="/foto/${item.uid}/${item.file}"
                    />
                    <span class="photoSim">${item.similarity.toFixed(2)}</span>
                    <span class="photoUserName">${item.userName}</span>
                </div>
            `;
            photoArrayContainer.append(photoItem);
          });
        }

        // if (info.emotion) {
        //   const emotions = info.emotion.map(emotionObj => emotionObj.emotion);
        //   resultText.append(`Емоції: ${emotions.join(', ')}`);
        //   resultText.append(`<br />`);
        // }
      }

      function deletePhotos(e) {
        console.log('userRights', userRights);
        if (!userRights.canDeleteFoto) return;
        const target = e.currentTarget;
        const uid = $(target).closest('.plateListItem').attr('id');

        if (!confirm('Ви впевнені, що хочете видалити всі фото цього користувача?')) return;
        $.post('/deleteFaces', { uid: uid }, function (response) {
          console.log(response);
          $('#' + response.user.uid + ' .counFoto').text('' + response.user.count);
          const galleryContainer = $(target).closest('.plateListItem').find('.galleryContainer');
          const fullCommandLine = $(target).closest('.plateListItem').find('.fullCommandLine');
          const emptyCommandLine = $(target).closest('.plateListItem').find('.emptyCommandLine');
          galleryContainer.children().remove();
          fullCommandLine.hide();
          emptyCommandLine.css('display', 'flex');
        });
      }

      function loadUserListFrom1C() {
        NProgress.start();

        $.ajax({
          url: '/loadUserListFrom1C',
          type: 'GET',
          timeout: 5000, // 30 секунд
          success: function (response) {
            NProgress.done();
            $('#content').html(response);
          },
          error: function (xhr, status, error) {
            NProgress.done();
            if (status === 'timeout') {
              console.log('Запрос превысил максимальное время ожидания');
            } else {
              console.log('Произошла ошибка: ' + error);
            }
          },
        });
      }

      function updateFaceID() {
        NProgress.start();
        if (!confirm('Ви впевнені, що хочете оновити FaceID?')) {
          return;
        }

        $.ajax({
          url: '/updateFaceID',
          type: 'GET',
          timeout: 200000, // 30 секунд
          success: function (response) {
            NProgress.done();
            $('#content').html(response);
          },
          error: function (xhr, status, error) {
            NProgress.done();
            if (status === 'timeout') {
              console.log('Запрос превысил максимальное время ожидания');
            } else {
              console.log('Произошла ошибка: ' + error);
            }
          },
        });
      }

      $('#userList').on('click', '.btn-login ', function (e) {
        const uid = $(this).closest('.plateListItem').attr('id');
        loginUser(uid);
      });

      $('#userList').on('click', '.avatar', function (e) {
        console.log('avatar this', this);
        const $avatar = $(this);
        const offset = $avatar.offset();
        const width = $avatar.outerWidth();
        const height = $avatar.outerHeight();
        const formUpdateAvatar = $('#formUpdateAvatar');

        const top = offset.top;
        const left = offset.left + width + 10;

        formUpdateAvatar.css({
          top: top + 'px',
          left: left + 'px',
          position: 'absolute',
        });

        const container = $(this).closest('.plateListItem');
        const oldUid = formUpdateAvatar.data('uid');
        const uid = container.attr('id');
        const empCode = container.attr('empCode');
        formUpdateAvatar.data('uid', uid);
        formUpdateAvatar.data('empCode', empCode);
        const userData = container.data('data');
        console.log('container, containerData, userData', container, container.data('data'), userData);
        formUpdateAvatar.data('data', userData);

        console.log('hasCamera', hasCamera);
        if (!hasCamera) {
          $('#forBtnLoadPhoto').click();
          return;
        }

        if (oldUid === uid) {
          formUpdateAvatar.toggle();
        } else {
          formUpdateAvatar.show();
        }
      });

      $('#btnCloseAvatarForm').on('click', function (e) {
        event.stopPropagation();
        clickAnimate(this);
        $('#formUpdateAvatar').hide();
      });

      // function updateAvatar(uid) {
      //   NProgress.start();

      //   $.ajax({
      //     url: '/updateAvatar',
      //     type: 'post',
      //     dataType: 'json',
      //     data: { uid: uid },
      //     headers: {},
      //     success: function (response) {
      //       console.log('updateAvatar success', response);
      //     },
      //     error: function (xhr, status, error) {
      //       console.log('updateAvatar error', error);
      //     },
      //     complete: function () {
      //       NProgress.done();
      //     },
      //   });
      // }

      function loginUser(uid) {
        console.log('userRights', userRights.canLoginUser);
        if (!userRights.canLoginUser) return;
        $.post('/token', { user: uid }, function (data, status) {
          console.log('logToServer', 'Data: ', data, '\nStatus: ', status);
          console.log('token', data.token);

          $('#content').html('');
          $('#menu').html('');
          localStorage.setItem('PageUID', '');
          PageUID = '';
          $.cookie('token', data.token);
          authentication();
        });
      }

      $(document).ready(function () {
        const platesID = '#userList';
        const defaultParam = {};

        $(platesID).data('defaultParam', defaultParam);

        console.log('userRights', userRights);

        if (!userRights.canLoadUsersFrom1C) {
          $('#btnLoadUserList').remove();
        }

        if (!userRights.canRunUpdateEmbDB) {
          console.log('userRights.canRunUpdateEmbDB', userRights.canRunUpdateEmbDB);
          $('#btnUpdateFaceID').remove();
        }

        Handlebars.registerPartial('ContentTemplate', document.getElementById('ContentTemplate').innerHTML);
        Handlebars.registerPartial('ContainerTemplate', document.getElementById('ContainerTemplate').innerHTML);
        Handlebars.registerHelper('debug', function (options) {
          console.log(options.data.root);
          return '';
        });

        const listContainerSource = document.getElementById('listContainer').innerHTML;
        const listContainerTemplate = Handlebars.compile(listContainerSource);

        function generateContentForBlock(uid, data) {
          console.log('generatecontentForBlock uid, data', uid, data);
          const containerId = `#${uid}`;
          const container = $(containerId);

          if (container.length) {
            const contentHtml = Handlebars.compile(document.getElementById('ContentTemplate').innerHTML)(data);
            container.find('.itemContainer').html(contentHtml);
          }
        }

        initListPlate(platesID, true);

        addSubscribeWSS('users_all');

        callbackWSS = async function (data) {
          console.log('callbackWSS data', data);
          const containerId = `#${data.uid}`;
          console.log('callbackWSS container');
          const container = $(containerId);

          if ($(containerId).length) {
            if (data.fired) {
              $(containerId).remove();
            }
          } else if (!data.fired) {
            const newContainerHtml = listContainerTemplate([data]);
            $(platesID).prepend(newContainerHtml);
          }
          data.canLoginUser = userRights.canLoginUser;
          data.timeFromLastProhod = calcLastProhod(data.lastProhod);
          generateContentForBlock(data.uid, data);

          let fotoContainer = container.find('.fotoContainer');
          console.log('fotoContainer', fotoContainer, container);
          if (fotoContainer.is(':visible')) {
            generatePhotos(container);
          }
        };

        function render(data) {
          const html = listContainerTemplate({
            items: data.list,
            canLoginUser: data.canLoginUser,
          });
          document.getElementById('userList').innerHTML = html;
        }

        function calcLastProhod(lastProhod) {
          const inputDate = new Date(lastProhod);

          if (isNaN(inputDate.getTime())) {
            return '';
          }
          const currentDate = new Date();
          const diffInMilliseconds = currentDate - inputDate;

          const diffInHours = Math.floor(diffInMilliseconds / (1000 * 60 * 60));
          const diffInDays = Math.floor(diffInMilliseconds / (1000 * 60 * 60 * 24));

          function getDayLabel(days) {
            if (days % 10 === 1 && days % 100 !== 11) {
              return 'день';
            } else if (days % 10 >= 2 && days % 10 <= 4 && (days % 100 < 10 || days % 100 >= 20)) {
              return 'дня';
            } else {
              return 'днів';
            }
          }

          function getHourLabel(hours) {
            if (hours % 10 === 1 && hours % 100 !== 11) {
              return 'година';
            } else if (hours % 10 >= 2 && hours % 10 <= 4 && (hours % 100 < 10 || hours % 100 >= 20)) {
              return 'години';
            } else {
              return 'годин';
            }
          }

          if (diffInDays > 100) {
            return 'ніколи';
          } else if (diffInDays >= 1) {
            return `${diffInDays} ${getDayLabel(diffInDays)}`;
          } else {
            return `${diffInHours} ${getHourLabel(diffInHours)}`;
          }
        }

        callbackAfterLoadData = function (data) {
          console.log('callbackAfterLoadData data', data);
          data.passRender = true;
          if (userRights && userRights.canLoginUser) {
            data.canLoginUser = userRights.canLoginUser;
          }
          console.log('data.list', data, userRights);

          data.list.forEach(item => {
            if (item.lastProhod) {
              item.timeFromLastProhod = calcLastProhod(item.lastProhod);
              item.tel1Solid = item.tel1
                .replaceAll(' ', '')
                .replaceAll('(', '')
                .replaceAll(')', '')
                .replaceAll('+', '');
              if (item.tel2) {
                item.tel2Solid = item.tel2.replaceAll(' ', '').replaceAll('(', '').replaceAll(')', '');
              }
            } else {
              item.timeFromLastProhod = '';
            }
          });

          render(data);
        };

        // callbackForRender = function (data) {
        //   console.log('callbackForRender data', data);
        //   render(data.list);
        //   containerForTile = `#${data.uid}`;
        //   if ($(containerForTile).length === 0) return;
        //   console.log('QPART data', data, containerForTile, $(containerForTile));
        //   const workStyle = data.work;
        //   data.styleWork = data.work ? 'onWork' : 'offWork';
        //   function formatHours(hours) {
        //     if (hours > 999) {
        //       return 'ніколи';
        //     } else if (hours > 48) {
        //       let days = Math.floor(hours / 24);
        //       return `${days} днів`;
        //     } else {
        //       return `${hours} годин`;
        //     }
        //   }

        //   data.formattedHours = formatHours(data.hoursLastProhod);

        //   data.tabelFormatted = data.tabel.map(day => ({
        //     date: day[1],
        //     arrival: day[2],
        //     departure: day[3],
        //   }));
        //   console.log('data', data);

        //   // generateFromTemplate('#tileTemplate', data, containerForTile);
        // };

        $('#userList').on('click', '.arrival ', function (e) {
          console.log('data from id', $(platesID).data('data'), $(this).closest('.plateListItem').attr('id'));
          const data = $(platesID).data('data');
          const currentId = $(this).closest('.plateListItem').attr('id');
          const oldId = $(this).attr('id') || '';
          const currentData = data.list.find(plate => plate.uid === currentId);
          target = e.currentTarget;
          let tabelContainer = $(this).closest('.plateListItem').find('.tabelContainer');
          currentData.tabel.tabelFormatted = currentData.tabel.map(day => ({
            date: day[1],
            arrival: day[2],
            departure: day[3],
          }));

          console.log('currentId, oldId', currentId, oldId);
          if (currentId === oldId && tabelContainer.is(':visible')) {
            tabelContainer.hide();
          } else {
            console.log('$(.tableContainer)', $('.tableContainer'));
            $('.tabelContainer').each(function () {
              $(this).hide();
            });
            $('#userFoto').hide();
            tabelContainer.show();
            $(this).attr('id', currentId);
            generateFromTemplate('#tabelTemplate', currentData.tabel, tabelContainer);
          }
        });

        function openTabel(e) {
          console.log('data from id', $(platesID).data('data', response));
          target = e.currentTarget;
          let container = $(target).closest('.plateListItem');
          let tabel = container.find('.tabelContainer');
          tabel.toggle();
          console.log('openTable');
        }

        $('#search').on('input', function () {
          let searchTerms = $(this).val().split(' ').filter(Boolean);

          $('.plateListItem').each(function () {
            let found = true;
            let elements = $(this)
              .find('.userName, .userProfaFaceID, .empCode, .timeContainer, .profa, .phoneText, .hidePhone, .online')
              .map(function () {
                return { el: $(this) };
              })
              .get();
            elements.forEach(element => {
              element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');
            });

            if (searchTerms.length > 0) {
              found = searchTerms.every(term => {
                const regex = new RegExp(`(${term})`, 'gi');
                return elements.some(element => {
                  if (element.text.match(regex)) {
                    element.text = element.text.replace(regex, '<mark>$1</mark>');
                    console.log('element.text', element.text);
                    return true;
                  }
                  return false;
                });
              });
            }

            $(this).toggleClass('hide', !found);
            elements.forEach(element => {
              element.el.html(element.text);
            });
          });
        });

        // клик по количеству фото .userCountFaceID
        $('#userList').on('click', '.userCountFaceID', function (event) {
          console.log('userCountFaceID');

          clickAnimate(this);

          const row = $(this).closest('.plateListItem');
          const newUserID = row.attr('id');
          const oldUserID = $('#userFoto').attr('UserID') || '';
          let fotoContainer = $(this).closest('.plateListItem').find('.fotoContainer');
          // let galleryContainer = $(this).closest('.plateListItem').find('.galleryContainer');
          let fullCommandLine = $(this).closest('.plateListItem').find('.fullCommandLine');
          let emptyCommandLine = $(this).closest('.plateListItem').find('.emptyCommandLine');

          // let container = $(this).closest('.plateListItem');

          if (newUserID !== oldUserID) {
            console.log('newUserID !== oldUserID');
            console.log('row.find(.tabelContainer');
          }

          if (fotoContainer.is(':visible')) {
            fotoContainer.hide(100);
            fullCommandLine.hide();
            emptyCommandLine.hide();
          } else {
            $('.tabelContainer').hide();
            $('.fotoContainer').hide();
            fullCommandLine.hide();
            emptyCommandLine.hide();
            row.find('.isNewFoto').removeClass('isNewFoto');
            fotoContainer.show(100);
            fotoContainer.attr('UserID', newUserID);

            generatePhotos(row);

            // NProgress.start();

            // try {
            //   $.ajax({
            //     url: '/userListFoto',
            //     type: 'GET',
            //     dataType: 'json',
            //     data: { UserID: newUserID },
            //     success: function (response) {
            //       console.log('response', response);

            //       let dataForTemplate = response.map(element => {
            //         return {
            //           fileName: element.fileName,
            //           countFileUse: element.countFileUse,
            //           userId: element.userId,
            //           dateLastFinded: element.dateLastFinded ? formatter.format(new Date(element.dateLastFinded)) : '',
            //         };
            //       });

            //       console.log('dataForTemplate', dataForTemplate);
            //       if (response.length > 0) {
            //         fullCommandLine.css('display', 'flex');
            //         generateFromTemplate('#fotoTemplate', dataForTemplate, galleryContainer);
            //       } else {
            //         emptyCommandLine.css('display', 'flex');
            //       }
            //       console.log('fotoContainer[0]', fotoContainer[0]);
            //       container[0].scrollIntoView({
            //         behavior: 'smooth',
            //         block: 'start',
            //       });
            //       NProgress.done();
            //     },
            //   });
            // } catch (error) {
            //   NProgress.done();
            // }
          }
        });

        $(document).on('click', '.hideTabel', function () {});

        $('#userScan').on('click', function () {
          console.log('userScan');
          $('#scanResult').hide();
          $('#formScanPhoto').show();
        });

        $('#userList').on('click', '.userFoto', function (event) {
          console.log('click on photo', this);
          mediaviewer(this);
        });

        $('#formScanPhoto').on('click', '.checkPhoto, .photoItem', function (event) {
          console.log('click on photo', this);
          mediaviewer(this);
        });

        $('#userList').on('click', '.userFotoDelete', function (event) {
          console.log('userFotoDelete click', this);
          event.stopPropagation();
          clickAnimate(this);
          setTimeout(() => {
            if (!userRights.canDeleteFoto) return;
            let file = $(this).siblings('.userFotoContent').attr('alt');
            let indexFoto = $(this).attr('indexFoto');
            let UserID = $(this).closest('.plateListItem').attr('id');
            let fotoForDelete = $(this).closest('.userFoto');
            const deleteFoto = confirm('Ви впевнені, що хочете видалити цю фотографію?');

            if (deleteFoto) {
              try {
                $.ajax({
                  url: '/userListFoto',
                  type: 'DELETE',
                  dataType: 'json',
                  data: { UserID: UserID, file: file, indexFoto: indexFoto },
                  complete: function (response) {
                    console.log('on complete');
                    console.log(fotoForDelete);
                    NProgress.done();
                    let userCard = $(fotoForDelete).closest('.plateListItem');
                    const fullCommandLine = $(fotoForDelete).closest('.plateListItem').find('.fullCommandLine');
                    const emptyCommandLine = $(fotoForDelete).closest('.plateListItem').find('.emptyCommandLine');
                    let userCount = $(userCard).find('.counFoto');
                    let count = Number($(userCount).text());
                    userCount.text(count - 1);

                    if (count <= 1) {
                      fullCommandLine.hide();
                      emptyCommandLine.css('display', 'flex');
                    }

                    $(fotoForDelete).remove();
                  },
                });
              } catch (error) {
                console.log('error', error);
                NProgress.done();
              }
            }
          }, 200);
        });

        $('.userActions').hide();

        $('.userActionButton').on('click', function () {
          var $userActions = $(this).closest('.plateListItem').find('.userActions');
          $userActions.toggle(300);

          var $icon = $(this).find('i');
          $icon.toggleClass('bi-chevron-down bi-chevron-up');
        });
      });

      function addPhotoClose() {
        $('#formAddPhoto').hide();
      }

      function scanPhotoClose() {
        $('#formScanPhoto').hide();
      }

      $('#addPhotoPhoto').on('click', function () {
        const uid = $('#formAddPhoto').data('uid');
        $('.plateListItem[id="' + uid + '"]')
          .find('.addPhoto')
          .click();
        addPhotoClose();
      });

      $('#addPhotoDownload').on('click', function () {
        const uid = $('#formAddPhoto').data('uid');
        $('.plateListItem[id="' + uid + '"]')
          .find('.addPhotoFromFile')
          .click();
        addPhotoClose();
      });

      $('#addPhotoClose').on('click', function () {
        addPhotoClose();
      });

      $('#scanPhotoClose').on('click', function () {
        scanPhotoClose();
      });
    </script>
  </div>
</div>
