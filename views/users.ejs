<style>
  #container {
    max-width: 600px;
  }
  .userFoto {
    width: 100%;
    height: auto;
    max-width: 220px;
    /* width: 200px;
    margin: 5px; */
  }

  #userListContent {
    max-width: 900px;
    margin: auto;
  }

  #content {
    min-width: 400px;
  }

  #groupBtn {
    display: flex;
    justify-content: space-between;
    gap: 2vw;
  }

  .btnTop {
    font-size: 1.2em;
    width: 30%;
    padding: 10px;
    margin: 0 !important;
  }

  /* #btnLoadUserList {
    font-size: 1em;
    margin: auto;
    white-space: nowrap;
    padding: 1%;
    margin: 0;
    flex-grow: 1;
  }

  #btnUpdateFaceID {
    font-size: 1em;
    margin: 0;
    white-space: nowrap;
    padding: 1%;
    flex-grow: 1;
  } */

  #usersContainer {
    margin-top: 10px;
  }

  #userFoto {
    margin-top: 10px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
  }

  .noFoto {
    margin: 0 auto;
  }

  .hideFoto {
    margin: 10px auto 0 auto;
    display: flex;
    justify-content: center;
  }

  #btnDeleteAllFoto {
    margin-top: 10px;
    display: flex;
    align-items: center;
    gap: 5px;
    display: flex;
    justify-content: center;
  }

  .userList {
    padding: 0 3px;
  }

  .plateListItem {
    display: flex;
  }

  .userActions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-bottom: 5px;
  }
  .countFaceID {
    margin-left: auto;
    line-height: 45px;
    position: relative;
    width: 125px;
  }

  .btnUserEdit {
    /* margin-left: 10px;
    margin-top: 5px;
    margin-bottom: 5px; */
    background-color: aliceblue;
  }

  #formVideoCamera {
    border: 1px solid #999;
    border-radius: 5px;
    background-color: rgba(225, 225, 225, 0.93);
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 70%;
    max-width: 400px;
    /* height: 70%; */
    padding: 10px;
  }

  #blockFormForVideoScaner {
    background-color: rgba(105, 105, 105, 0.9);
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  #videoScaner {
    width: 100%;
    max-width: 400px;
    margin: auto;
  }

  .btnUserVideoScaner {
    background-color: aliceblue;
    width: 40%;
  }

  #groupBtnVideoScaner {
    display: flex;
    margin-top: 5px;
  }

  #groupUserInfoForVideoScaner {
    display: flex;
  }

  #selectedUserForVideoScaner {
    font-size: 1.6em;
  }

  #infoForSelectedUserForVideoScaner {
    font-size: 1.6em;
    margin-left: auto;
  }

  .groupSearch {
    width: auto;
    border: 1px solid #aaa;
    background-color: #fff;
    display: flex;
    align-items: center;
    flex-grow: 2;
    font-size: 1em;
  }

  #search {
    border: none;
    line-height: 100%;
    height: 100%;
    padding-right: 0;
  }

  #search:focus {
    box-shadow: none;
  }

  #search-addon {
    background-color: #fff;
  }

  .work {
    margin-right: 5px;
  }

  .userNameText {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-bottom: 5px;
  }

  .userNameFaceID {
    margin-bottom: 0px;
  }

  .userMenuFaceID {
    width: 23%;
    font-size: 0.8em;
    padding: 5px;
    /* margin-left: 20px; */
  }

  /* Посада */
  .userProfaFaceID {
    width: 23%;
    font-size: 0.8em;
    padding: 5px;
    /* margin-left: auto; */
  }

  .userActionButton {
    width: 8%;
    font-size: 2em;
    display: flex;
    justify-content: center;
  }

  @media only screen and (min-width: 700px) and (orientation: landscape) {
    .btnTop {
      font-size: 0.8em;
    }
  }

  @media (max-width: 700px) {
    #content {
      min-width: 375px;
    }

    .userNameText {
      width: auto;
      flex-wrap: wrap;
    }

    .userMenuFaceID {
      display: none;
      text-wrap: nowrap;
    }

    .userProfaFaceID {
      font-size: 1.5em;
      width: 30%;
    }

    .userActionButton {
      width: 8%;
      font-size: 2em;
    }

    .btn {
      padding: 5px;
    }

    #groupBtn {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    .btnTop {
      font-size: 1.7em;
      padding: 12px;
      width: 48%;
    }

    .groupSearch {
      font-size: 1.5em;
      width: 100%;
    }
    .input-group {
      width: 100%;
      padding: 5px;
    }
  }

  .hide {
    display: none;
  }

  mark {
    background: yellow;
    padding: 0;
  }

  details {
    font-size: small;
  }

  .burger-menu {
    font-size: xxx-large;
    z-index: 1;
  }

  .aboutRow {
    display: flex;
    justify-content: space-between;
  }

  .empCode {
    font-size: small;
    text-align: start;
    position: relative;
    left: -99px;
    top: 44px;
  }

  .phone {
    display: flex;
    gap: 5px;
  }

  .phone i {
    display: flex;
    align-items: center;
    min-height: 36px;
  }

  .phone a:visited {
    color: inherit;
    text-decoration: none;
  }

  .phone a:hover {
    text-decoration: none;
  }

  .profa {
    font-size: small;
    text-align: end;
    overflow: hidden;
    text-wrap: nowrap;
    text-overflow: ellipsis;
    margin-bottom: 3px;
  }

  .infoRow {
    display: flex;
    justify-content: space-between;
    gap: 10px;
  }
  .actionRow {
    display: flex;
    justify-content: space-evenly;
    font-size: large;
    padding: 0px;
    align-items: center;
    gap: 10px;
  }

  .photoCount {
    display: flex;
    gap: 10px;
  }

  .arrival {
    /* width: 50%; */
    text-align: right;
    font-size: medium;
  }

  .menuContainer {
    position: relative;
    line-height: normal;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
  }

  [data-work='true'] {
    border: 3px solid #28ac28;
  }

  [data-work='false'] {
    border: 3px solid lightgray;
  }

  .tabelContainer {
    display: none;
    text-align: center;
  }

  .hideTabel {
    margin: 10px 0;
  }

  .tabel {
    border: 1px;
    font-size: medium;
  }

  .avatarContainer {
    width: 90px;
    height: 90px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    min-width: 84px;
    flex-shrink: 0;
  }

  .avatar {
    width: 90px;
    height: 90px;
  }

  .userCardHead {
    display: flex;
    gap: 5px;
    width: 100%;
  }

  .basicInfo {
    flex-grow: 1;
    min-width: 0;
  }

  .info {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  .infoColumn {
    width: 100%;
  }

  .userNameFaceID {
    overflow: hidden;
    text-wrap: nowrap;
    text-overflow: ellipsis;
    text-align: center;
    width: 100%;
  }

  .btn-light {
    border-color: #afc3ad;
    padding: 5px 8px;
  }
</style>

<script id="listContainer" type="text/x-handlebars-template">
  {{#each this}}
    {{> ContainerTemplate}}
  {{/each}}
</script>

<script id="ContainerTemplate" type="text/x-handlebars-template">
  <div id='{{uid}}' class='plateListItem'>
    <div class='itemContainer'>
      {{> ContentTemplate}}
    </div>
    <div class='tabelContainer'></div>
  </div>
</script>

<script id="ContentTemplate" type="text/x-handlebars-template">
  <div class='itemContent'>
    <div class='userCardHead'>
      <div class='avatarContainer' data-work='{{work}}'>
        <img
          class='avatar'
          src='/auth_files/photo/{{emp_code}}.jpg'
          alt='Фото користувача {{uid}}'
          onclick="loginUser('{{uid}}');"
          onerror="this.onerror=null; this.src='/img/avatar.png';"
        />
      </div>
      <div class='basicInfo'>
        <div class='userNameText'>
          <h4 class='userNameFaceID'>
            <span class='userName'>{{name}}</span>
          </h4>
        </div>
        <div class='infoRow'>
          <div class='empCode'>{{emp_code}}</div>
          <div class='profa'>{{profa}}</div>
        </div>
        <div class='actionRow'>
          <div class='phone'>
            {{#if tel1}}
              <a href='tel:{{tel1}}'><i class='bi bi-telephone-fill btn btn-light'>{{#if tel2}}1{{/if}}</i></a>
            {{/if}}
          </div>
          {{#if tel2}}
            <div class='phone'>
              <a href='tel:{{tel2}}'><i class='bi bi-telephone-fill btn btn-light'>2</i></a>
            </div>
          {{/if}}
          <div class='photoCount userCountFaceID btn btn-light'>
            <i class='bi bi-image'></i>
            <div class='counFoto'>{{count}}</div>
          </div>
          <div class='addFoto btn btn-light' onclick="addPhoto(this, '{{uid}}', '{{name}}', '{{user.count}}');">
            <i class='bi bi-person-plus-fill'></i>
          </div>
          <div class='arrival btn btn-light'>
            <i class='bi bi-person-down'></i>
            {{lastProhod}}
          </div>
        </div>
        <div class='info displayFlex'></div>
      </div>
    </div>
  </div>
</script>

<script id="tabelTemplate" type="text/x-handlebars-template">
  {{#if tabelFormatted}}
    {{#if tabelFormatted.length}}
        <i class='bi bi-caret-up-fill'></i></button>
      <table class='tabel'>
        <thead>
          <tr>
            <th style='width: 50%'>Дата</th>
            <th style='width: 25%'>Час приходу</th>
            <th style='width: 25%'>Час уходу</th>
          </tr>
        </thead>
        <tbody>
          {{#each tabelFormatted}}
            {{#if this}}
              <tr>
                <td>{{this.date}}</td>
                <td>{{this.arrival}}</td>
                <td>{{this.departure}}</td>
              </tr>
            {{/if}}
          {{/each}}
        </tbody>
      </table>
    {{else}}
      <div>Дані не доступні</div>
    {{/if}}
  {{else}}
    <div>Дані не доступні</div>
  {{/if}}
</script>

<div id="userListContent">
  <div id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-people-fill" id="pageIcon"></i>
      <div id="titleText">
        <h3 class="titlePage2">Перелік користувачів</h3>
      </div>
    </div>
  </div>

  <div id="groupBtn">
    <button
      id="btnLoadUserList"
      type="button"
      class="btn btn-secondary btn-lg mainColor btnTop"
      onclick="loadUserListFrom1C()"
    >
      Загрузить список из 1С
    </button>
    <button
      id="btnUpdateFaceID"
      type="button"
      class="btn btn-secondary btn-lg mainColor btnTop"
      onclick="updateFaceID()"
    >
      Обновить FaceID
    </button>

    <div class="input-group rounded groupSearch">
      <input
        type="search"
        id="search"
        class="form-control rounded"
        placeholder="Поиск по ФИО и должности"
        aria-label="Search"
        aria-describedby="search-addon"
      />
      <span class="input-group-text border-0" id="search-addon">
        <i class="bi bi-search"></i>
      </span>
    </div>
  </div>

  <div id="usersContainer">
    <div
      id="userList"
      url="user/api"
      callbackAfterLoadData="callbackAfterLoadData"
      callbackForRender="callbackForRender"
      type="plate"
      paggination="false"
    ></div>

    <div id="userFoto" style="display: none">
      <!-- <button type="button" class="btn btn-secondary btn-sm" id="btnDeleteAllFoto" onClick="deletePhotos(event)">
        Видалити всі фото
      </button> -->
    </div>

    <div id="blockFormForVideoScaner" style="display: none">
      <div id="formVideoCamera">
        <video id="videoScaner" width="250" height="auto" autoplay></video>

        <div id="groupBtnVideoScaner">
          <button
            id="btnStartScanFace"
            class="btn btn-outline-dark btnUserVideoScaner"
            style="display: none"
            onclick="startVideoScaner()"
          >
            Начать
          </button>
          <button class="btn btn-outline-dark btnUserVideoScaner rightAlign" onclick="closeVideoScaner()">
            Закрыть
          </button>
        </div>

        <div id="groupUserInfoForVideoScaner">
          <div id="selectedUserForVideoScaner"></div>
          .
          <div id="infoForSelectedUserForVideoScaner"></div>
        </div>
      </div>
    </div>

    <script>
      var videoScaner = document.getElementById('videoScaner');
      var selectedUID = '';
      var scannerActive = false;
      var canvasVideoScaner = document.createElement('canvas');

      pageUID = '944bf4ef-27bf-11ee-8208-000c29006152';
      userRights = $('#menu').data('userRight')[pageUID];

      hasCamera = false;
      async function initialize() {
        hasCamera = await checkForCamera();
      }
      initialize();

      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        console.log('navigator.mediaDevices', navigator.mediaDevices);

        navigator.mediaDevices
          .getUserMedia({ video: true })
          .then(function (stream) {
            videoScaner.srcObject = stream;
          })
          .catch(function (error) {
            console.error('Ошибка доступа к веб-камере: ', error);
            toastr['error']('Ошибка доступа к веб-камере');
          });
      } else {
        console.error('Браузер не поддерживает API доступа к медиа-устройствам');
        toastr['error']('Браузер не поддерживает API доступа к медиа-устройствам');
      }

      videoScaner.addEventListener('loadeddata', () => {
        console.log('event loadeddata videoScaner');
        $('#btnStartScanFace').show();
      });

      function addPhoto(btn, uid, name, count) {
        console.log('addPhoto userRights', btn, uid, name, count, userRights.canAddFoto);

        if (!userRights.canAddFoto) {
          toastr.error('У Вас немає прав додавати фото!');
          return;
        }
        selectedUID = uid;
        console.log('hasCamera', hasCamera);
        if (hasCamera) {
          $('#selectedUserForVideoScaner').text(name);
          $('#infoForSelectedUserForVideoScaner').text($('#' + selectedUID + ' .userCountFaceID').text());
          $('#blockFormForVideoScaner').show();
        } else {
          toastr.error('На цьому пристрої немає камери');
        }
      }

      function closeVideoScaner() {
        console.log('closeVideoScaner');
        $('#blockFormForVideoScaner').hide();
        scannerActive = false;
        $('#btnStartScanFace').html('Начать');
      }

      function startVideoScaner() {
        console.log('startVideoScaner');
        scannerActive = !scannerActive;

        if (scannerActive) {
          $('#btnStartScanFace').html('Остановить');
          savePhoto();
        } else {
          $('#btnStartScanFace').html('Начать');
        }
      }

      function savePhoto() {
        console.log('start uploadPhoto');

        try {
          if (scannerActive) {
            if ($('#videoScaner').is(':visible')) {
              NProgress.start();

              const context = canvasVideoScaner.getContext('2d');

              canvasVideoScaner.width = videoScaner.videoWidth;
              canvasVideoScaner.height = videoScaner.videoHeight;

              context.drawImage(videoScaner, 0, 0, canvasVideoScaner.width, canvasVideoScaner.height);

              canvasVideoScaner.toBlob(function (blob) {
                console.log('blob', blob);

                const reader = new FileReader();
                reader.onloadend = function () {
                  $.post(
                    '/saveFace',
                    { photo: reader.result, uid: selectedUID },
                    function (response) {
                      console.log('response from reader.onloadend', response);
                      NProgress.done();

                      if (response.detectFace && response.user) {
                        $('#infoForSelectedUserForVideoScaner').text(response.similarity + ' - ' + response.user.count);
                        $('#' + selectedUID + ' .counFoto').text('' + response.user.count);
                        toastr['info']('OK');
                      } else {
                        toastr['error']('Лицо не обнаружено');
                      }

                      setTimeout(() => {
                        savePhoto();
                      }, 500);
                    },
                    'json'
                  ).fail(function (jqXHR, textStatus, errorThrown) {
                    console.log('error - /saveFace');
                    NProgress.done();

                    setTimeout(() => {
                      savePhoto();
                    }, 500);
                    console.log('--------------- error from fail --------------', textStatus);
                    toastr['error']('ERROR');
                  });
                };
                reader.readAsDataURL(blob);
              }, 'image/jpeg');
            }
          }
        } catch (error) {
          console.log('--------------- error from face scan ------------------', error);
          setTimeout(() => {
            savePhoto();
          }, 500);
          toastr['error'](error);
        }
      }

      function deletePhotos(e) {
        console.log('userRights', userRights);
        if (!userRights.canDeleteFoto) return;
        const target = e.currentTarget;
        const uid = $(target).closest('.plateListItem').attr('id');

        if (!confirm('Ви впевнені, що хочете видалити всі фото цього користувача?')) return;
        $.post('/deleteFaces', { uid: uid }, function (response) {
          console.log(response);
          $('#' + response.user.uid + ' .counFoto').text('' + response.user.count);
          $('#userFoto').children().remove();
          $('#btnDeleteAllFoto').remove();
        });
      }

      function loadUserListFrom1C() {
        NProgress.start();

        $.ajax({
          url: '/loadUserListFrom1C',
          type: 'GET',
          timeout: 5000, // 30 секунд
          success: function (response) {
            NProgress.done();
            $('#content').html(response);
          },
          error: function (xhr, status, error) {
            NProgress.done();
            if (status === 'timeout') {
              console.log('Запрос превысил максимальное время ожидания');
            } else {
              console.log('Произошла ошибка: ' + error);
            }
          },
        });
      }

      function updateFaceID() {
        return;
        NProgress.start();
        if (!confirm('Ви впевнені, що хочете оновити FaceID?')) {
          return;
        }

        $.ajax({
          url: '/updateFaceID',
          type: 'GET',
          timeout: 200000, // 30 секунд
          success: function (response) {
            NProgress.done();
            $('#content').html(response);
          },
          error: function (xhr, status, error) {
            NProgress.done();
            if (status === 'timeout') {
              console.log('Запрос превысил максимальное время ожидания');
            } else {
              console.log('Произошла ошибка: ' + error);
            }
          },
        });
      }

      function loginUser(uid) {
        console.log('userRights', userRights.canLoginUser);
        if (!userRights.canLoginUser) return;
        $.post('/token', { user: uid }, function (data, status) {
          console.log('logToServer', 'Data: ', data, '\nStatus: ', status);
          console.log('token', data.token);

          $('#content').html('');
          $('#menu').html('');
          localStorage.setItem('PageUID', '');
          PageUID = '';
          $.cookie('token', data.token);
          authentication();
        });
      }

      $(document).ready(function () {
        const platesID = '#userList';
        const defaultParam = {};

        $(platesID).data('defaultParam', defaultParam);

        console.log('userRights', userRights);

        if (!userRights.canLoadUsersFrom1C) {
          $('#btnLoadUserList').remove();
        }

        if (!userRights.canRunUpdateEmbDB) {
          console.log('userRights.canRunUpdateEmbDB', userRights.canRunUpdateEmbDB);
          $('#btnUpdateFaceID').remove();
        }

        Handlebars.registerPartial('ContentTemplate', document.getElementById('ContentTemplate').innerHTML);
        Handlebars.registerPartial('ContainerTemplate', document.getElementById('ContainerTemplate').innerHTML);

        const listContainerSource = document.getElementById('listContainer').innerHTML;
        const listContainerTemplate = Handlebars.compile(listContainerSource);

        function generateContentForBlock(uid, data) {
          const containerId = `#${uid}`;
          const container = $(containerId);

          if (container.length) {
            const contentHtml = Handlebars.compile(document.getElementById('ContentTemplate').innerHTML)(data);
            container.find('.itemContainer').html(contentHtml);
          }
        }

        initListPlate(platesID, true);

        addSubscribeWSS('users_all');

        callbackWSS = async function (data) {
          console.log('callbackWSS data', data);
          const containerId = `#${data.uid}`;

          if ($(containerId).length) {
            $(containerId).find('.itemContainer').empty();
          } else {
            const newContainerHtml = listContainerTemplate([data]);
            $(platesID).prepend(newContainerHtml);
          }

          generateContentForBlock(data.uid, data);
        };

        function render(data) {
          const html = listContainerTemplate(data);
          document.getElementById('userList').innerHTML = html;
        }

        callbackAfterLoadData = function (data) {
          console.log('callbackAfterLoadData data', data);
          data.passRender = true;
          render(data.list);
        };

        callbackForRender = function (data) {
          console.log('callbackForRender data', data);
          render(data.list);
          containerForTile = `#${data.uid}`;
          if ($(containerForTile).length === 0) return;
          console.log('QPART data', data, containerForTile, $(containerForTile));
          const workStyle = data.work;
          data.styleWork = data.work ? 'onWork' : 'offWork';
          function formatHours(hours) {
            if (hours > 999) {
              return 'ніколи';
            } else if (hours > 48) {
              let days = Math.floor(hours / 24);
              return `${days} днів`;
            } else {
              return `${hours} годин`;
            }
          }

          data.formattedHours = formatHours(data.hoursLastProhod);

          data.tabelFormatted = data.tabel.map(day => ({
            date: day[1],
            arrival: day[2],
            departure: day[3],
          }));
          console.log('data', data);

          // generateFromTemplate('#tileTemplate', data, containerForTile);
        };

        $('#userList').on('click', '.arrival ', function (e) {
          console.log('data from id', $(platesID).data('data'), $(this).closest('.plateListItem').attr('id'));
          const data = $(platesID).data('data');
          const currentId = $(this).closest('.plateListItem').attr('id');
          const oldId = $(this).attr('id') || '';
          const currentData = data.list.find(plate => plate.uid === currentId);
          target = e.currentTarget;
          let tabelContainer = $(this).closest('.plateListItem').find('.tabelContainer');
          currentData.tabel.tabelFormatted = currentData.tabel.map(day => ({
            date: day[1],
            arrival: day[2],
            departure: day[3],
          }));

          console.log('currentId, oldId', currentId, oldId);
          if (currentId === oldId && tabelContainer.is(':visible')) {
            tabelContainer.hide();
          } else {
            console.log('$(.tableContainer)', $('.tableContainer'));
            $('.tabelContainer').each(function () {
              $(this).hide();
            });
            $('#userFoto').hide();
            tabelContainer.show();
            $(this).attr('id', currentId);
            generateFromTemplate('#tabelTemplate', currentData.tabel, tabelContainer);
          }
        });

        function openTabel(e) {
          console.log('data from id', $(platesID).data('data', response));
          target = e.currentTarget;
          let container = $(target).closest('.plateListItem');
          let tabel = container.find('.tabelContainer');
          tabel.toggle();
          console.log('openTable');
        }

        $('#search').on('input', function () {
          let searchTerms = $(this).val().split(' ').filter(Boolean);

          $('.plateListItem').each(function () {
            let found = true;
            let elements = $(this)
              .find('.userName, .userProfaFaceID, .empCode, .arrival')
              .map(function () {
                return { el: $(this) };
              })
              .get();
            elements.forEach(element => {
              element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');
              console.log('element.text', element.text);
            });

            if (searchTerms.length > 0) {
              found = searchTerms.every(term => {
                const regex = new RegExp(`(${term})`, 'gi');
                return elements.some(element => {
                  if (element.text.match(regex)) {
                    element.text = element.text.replace(regex, '<mark>$1</mark>');
                    console.log('element.text', element.text);
                    return true;
                  }
                  return false;
                });
              });
            }

            $(this).toggleClass('hide', !found);
            elements.forEach(element => {
              element.el.html(element.text);
            });
          });
        });

        let hideFoto;
        // клик по количеству фото .userCountFaceID
        $('#userList').on('click', '.userCountFaceID', function (event) {
          console.log('userCountFaceID');

          clickAnimate(this);

          const row = $(this).closest('.plateListItem');
          console.log('row', row);
          const newUserID = row.attr('id');
          console.log('newUserID', newUserID);
          const oldUserID = $('#userFoto').attr('UserID') || '';
          console.log('oldUserID', oldUserID);

          if (hideFoto) {
            hideFoto.remove();
          }
          if (newUserID !== oldUserID) {
            console.log('newUserID !== oldUserID');
            $('#userFoto').hide();
            console.log('row.find(.tabelContainer);', row.find('.tabelContainer'));
          }

          if ($('#userFoto').is(':visible')) {
            $('#userFoto').hide(100);
          } else {
            $('#userFoto').children().remove();
            $('#userFoto').appendTo(row);
            $('.tabelContainer').hide();
            $('#userFoto').show(100);
            $('#userFoto').attr('UserID', newUserID);

            NProgress.start();

            try {
              $.ajax({
                url: '/userListFoto',
                type: 'GET',
                dataType: 'json',
                data: { UserID: newUserID },
                success: function (response) {
                  console.log('response', response);

                  if (response.length > 0) {
                    let indexFoto = 1;

                    response.forEach(item => {
                      console.log(item);

                      let newFoto = $(`<img class="userFoto" src="" alt="${item}" indexFoto="${indexFoto}">`);

                      if (item === 'notFound.png') {
                        newFoto = $(
                          `<img class="userFoto" src="${item}" alt="${item}" title="${item}" indexFoto="${indexFoto}">`
                        );
                      } else {
                        newFoto = $(
                          `<img class="userFoto" src="/foto/${newUserID}/${item}" alt="${item}" title="${item}" indexFoto="${indexFoto}">`
                        );
                      }

                      $('#userFoto').append(newFoto);

                      indexFoto += 1;
                    });

                    if (userRights.canDeleteFoto) {
                      hideFoto = $(
                        `<div id='btnDeleteAllFoto' class='btn btn-secondary' onClick="deletePhotos(event)">Видалити всі фото</div>`
                      );

                      $('#userFoto').before(hideFoto);
                    }
                  } else {
                    let newFoto = $(`<h6 class='noFoto'>Немає фотографій</h6>`);
                    $('#userFoto').append(newFoto);
                  }

                  NProgress.done();
                },
              });
            } catch (error) {
              NProgress.done();
            }
          }
        });

        $(document).on('click', '.hideTabel', function () {
          console.log('hideTabel');
          $('.tabelContainer').hide();
          // $('.hideFoto').hide();
        });

        $('#userFoto').on('click', '.userFoto', function (event) {
          if (!userRights.canDeleteFoto) return;
          let file = $(this).attr('alt');
          let indexFoto = $(this).attr('indexFoto');
          let UserID = $(this).closest('.plateListItem').attr('id');
          let fotoForDelete = this;
          let deleteFoto = confirm('Ви впевнені, що хочете видалити цю фотографію?');

          if (deleteFoto) {
            try {
              $.ajax({
                url: '/userListFoto',
                type: 'DELETE',
                dataType: 'json',
                data: { UserID: UserID, file: file, indexFoto: indexFoto },
                complete: function (response) {
                  console.log('on complete');
                  console.log(fotoForDelete);
                  NProgress.done();
                  let userCard = $(fotoForDelete).closest('.plateListItem');
                  let userCount = $(userCard).find('.counFoto');
                  let text = $(userCount).text();
                  let count = Number(text);
                  userCount.text(count - 1);
                  console.log('userCard', userCard);
                  console.log('userCount', userCount);
                  console.log('text', text);
                  if (count <= 1) {
                    userCard.find('#btnDeleteAllFoto').remove();
                  }

                  $(fotoForDelete).remove();
                },
              });
            } catch (error) {
              console.log('error', error);
              NProgress.done();
            }
          }
        });

        $('.userActions').hide();

        // Керування показом та приховуванням блоку userActions та зміна значення кнопки
        $('.userActionButton').on('click', function () {
          var $userActions = $(this).closest('.plateListItem').find('.userActions');
          $userActions.toggle(300);

          // Зміна значення кнопки на відповідну іконку в залежності від стану блоку userActions
          var $icon = $(this).find('i');
          $icon.toggleClass('bi-chevron-down bi-chevron-up');
        });
      });
    </script>
  </div>
</div>
