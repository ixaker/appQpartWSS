<style>
  .userFoto {
    width: 100%;
    height: auto;
    max-width: 220px;
    /* width: 200px;
    margin: 5px; */
  }

  #userListContent {
    max-width: 900px;
    margin: auto;
  }

  #content {
    min-width: 400px;
  }

  #groupBtn {
    display: flex;
    justify-content: space-between;
    gap: 2vw;
  }

  .btnTop {
    font-size: 1.2em;
    width: 30%;
    padding: 10px;
    margin: 0 !important;
  }

  /* #btnLoadUserList {
    font-size: 1em;
    margin: auto;
    white-space: nowrap;
    padding: 1%;
    margin: 0;
    flex-grow: 1;
  }

  #btnUpdateFaceID {
    font-size: 1em;
    margin: 0;
    white-space: nowrap;
    padding: 1%;
    flex-grow: 1;
  } */

  #usersContainer {
    margin-top: 20px;
  }

  #userFoto {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px; /* проміжок між зображеннями */
    /* width: 100%;
    min-height: 50px;
    padding: 5px; */
  }

  .userCard {
    border: 1px solid #bbbbbb;
    background-color: #ffffff;
    margin-top: 15px;
    border-radius: 7px;
    box-shadow: 2px 3px 5px #999;
    padding: 10px 10px;
  }

  .userActions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-bottom: 5px;
  }
  .countFaceID {
    margin-left: auto;
    line-height: 45px;
    position: relative;
    width: 125px;
  }

  .btnUserEdit {
    /* margin-left: 10px;
    margin-top: 5px;
    margin-bottom: 5px; */
    background-color: aliceblue;
  }

  #formVideoCamera {
    border: 1px solid #999;
    border-radius: 5px;
    background-color: rgba(225, 225, 225, 0.93);
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 70%;
    max-width: 400px;
    /* height: 70%; */
    padding: 10px;
  }

  #blockFormForVideoScaner {
    background-color: rgba(105, 105, 105, 0.9);
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  #videoScaner {
    width: 100%;
    max-width: 400px;
    margin: auto;
  }

  .btnUserVideoScaner {
    background-color: aliceblue;
    width: 40%;
  }

  #groupBtnVideoScaner {
    display: flex;
    margin-top: 5px;
  }

  #groupUserInfoForVideoScaner {
    display: flex;
  }

  #selectedUserForVideoScaner {
    font-size: 1.6em;
  }

  #infoForSelectedUserForVideoScaner {
    font-size: 1.6em;
    margin-left: auto;
  }

  .groupSearch {
    width: auto;
    border: 1px solid #aaa;
    background-color: #fff;
    display: flex;
    align-items: center;
    flex-grow: 2;
    font-size: 1em;
  }

  #search {
    border: none;
    line-height: 100%;
    height: 100%;
    padding-right: 0;
  }

  #search:focus {
    box-shadow: none;
  }

  #search-addon {
    background-color: #fff;
  }

  .work {
    margin-right: 5px;
  }
  /* Блок з даними користувача */
  .userNameText {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  /* Ім'я  */
  .userNameFaceID {
    width: 34%;
    font-size: 1.2em;
  }

  .userMenuFaceID {
    width: 23%;
    font-size: 0.8em;
    padding: 5px;
    /* margin-left: 20px; */
  }

  /* Посада */
  .userProfaFaceID {
    width: 23%;
    font-size: 0.8em;
    padding: 5px;
    /* margin-left: auto; */
  }

  .userCountFaceID {
    /* margin-left: auto; */
    width: 12%;
    text-align: center;
    font-size: 1.2em;
  }

  .userActionButton {
    width: 8%;
    font-size: 2em;
    display: flex;
    justify-content: center;
  }

  @media only screen and (min-width: 700px) and (orientation: landscape) {
    .btnTop {
      font-size: 0.8em;
    }
  }

  @media (max-width: 700px) {
    #content {
      min-width: 375px;
    }

    #userListContent {
      /* max-width: 350px; */
      /* margin-left: 5px; */
    }

    /* .userFoto {
      width: 100%;
      height: auto;
      max-width: 150px;
      /* width: 144px; */
    */

    /* Блок з даними про людину */
    .userNameText {
      width: auto;
      flex-wrap: wrap;
    }

    /* Ім'я  */
    .userNameFaceID {
      font-size: 2.2em;
      width: 48%;
    }

    /* Меню на планшет */
    .userMenuFaceID {
      display: none;
      text-wrap: nowrap;
    }

    /* Посада */
    .userProfaFaceID {
      font-size: 1.5em;
      width: 30%;
    }

    /* Фото */
    .userCountFaceID {
      width: 12%;
      font-size: 1.8em;
    }

    /* Кнопка розкрити */
    .userActionButton {
      width: 8%;
      font-size: 2em;
    }

    .btn {
      padding: 5px;
    }

    #groupBtn {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 15px;
    }

    .btnTop {
      font-size: 1.7em;
      padding: 12px;
      width: 48%;
    }

    .groupSearch {
      font-size: 1.5em;
      width: 100%;
    }
    .input-group {
      width: 100%;
      padding: 5px;
    }
  }

  .hide {
    display: none;
  }

  mark {
    background: yellow;
    padding: 0;
  }
</style>

<div id="userListContent">
  <div id="groupBtn">
    <button
      id="btnLoadUserList"
      type="button"
      class="btn btn-secondary btn-lg mainColor btnTop"
      onclick="loadUserListFrom1C()"
    >
      Загрузить список из 1С
    </button>
    <button
      id="btnUpdateFaceID"
      type="button"
      class="btn btn-secondary btn-lg mainColor btnTop"
      onclick="updateFaceID()"
    >
      Обновить FaceID
    </button>

    <div class="input-group rounded groupSearch">
      <input
        type="search"
        id="search"
        class="form-control rounded"
        placeholder="Поиск по ФИО и должности"
        aria-label="Search"
        aria-describedby="search-addon"
      />
      <span class="input-group-text border-0" id="search-addon">
        <i class="bi bi-search"></i>
      </span>
    </div>
  </div>

  <div id="usersContainer">
    <% users.forEach(function(user){ %>
    <div class="userCard" id="<%= user.uid %>">
      <div class="userNameText">
        <h4 class="userNameFaceID">
          <i class="bi bi-record-fill" <% if (user.work) { %>
            style="color: chartreuse;" <% } else { %> style="color: lightgrey;"
            <% } %> >
          </i>
          <span class="userName"><%= user.name %></span>
        </h4>
        <h6 class="userMenuFaceID"><%= user.menu %></h6>
        <h6 class="userProfaFaceID"><%= user.profa %></h6>
        <h4 class="userCountFaceID btn btn-outline-dark btnUserEdit">
          <%= user.count %> фото
        </h4>
        <h4 class="userActionButton">
          <i class="bi bi-chevron-down"></i>
        </h4>
      </div>

      <div class="userActions">
        <button
          class="btn btn-outline-dark btnUserEdit"
          onclick="loginUser('<%= user.uid %>')"
        >
          Залогиниться
        </button>
        <button
          class="btn btn-outline-dark btnUserEdit"
          onclick="deletePhotos('<%= user.uid %>')"
        >
          Удалить все фото
        </button>
        <button
          class="btn btn-outline-dark btnUserEdit"
          onclick="addPhoto(this, '<%= user.uid %>', '<%= user.name %>', '<%= user.count %>')"
        >
          Добавить фото
        </button>
      </div>
    </div>
    <% }); %>
  </div>

  <div id="userFoto" style="display: none"></div>
</div>

<div id="blockFormForVideoScaner" style="display: none">
  <div id="formVideoCamera">
    <video id="videoScaner" width="250" height="auto" autoplay></video>

    <div id="groupBtnVideoScaner">
      <button
        id="btnStartScanFace"
        class="btn btn-outline-dark btnUserVideoScaner"
        style="display: none"
        onclick="startVideoScaner()"
      >
        Начать
      </button>
      <button
        class="btn btn-outline-dark btnUserVideoScaner rightAlign"
        onclick="closeVideoScaner()"
      >
        Закрыть
      </button>
    </div>

    <div id="groupUserInfoForVideoScaner">
      <div id="selectedUserForVideoScaner"></div>
      .
      <div id="infoForSelectedUserForVideoScaner"></div>
    </div>
  </div>
</div>

<script>
  var videoScaner = document.getElementById("videoScaner");
  var selectedUID = "";
  var scannerActive = false;
  var canvasVideoScaner = document.createElement("canvas");

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    console.log(navigator.mediaDevices);

    navigator.mediaDevices
      .getUserMedia({ video: true })
      .then(function (stream) {
        videoScaner.srcObject = stream;
      })
      .catch(function (error) {
        console.error("Ошибка доступа к веб-камере: ", error);
        toastr["error"]("Ошибка доступа к веб-камере");
      });
  } else {
    console.error("Браузер не поддерживает API доступа к медиа-устройствам");
    toastr["error"]("Браузер не поддерживает API доступа к медиа-устройствам");
  }

  videoScaner.addEventListener("loadeddata", () => {
    console.log("event loadeddata videoScaner");
    $("#btnStartScanFace").show();
  });

  function addPhoto(btn, uid, name, count) {
    console.log("addPhoto", uid, btn);

    selectedUID = uid;

    $("#selectedUserForVideoScaner").text(name);
    $("#infoForSelectedUserForVideoScaner").text(
      $("#" + selectedUID + " .userCountFaceID").text()
    );
    $("#blockFormForVideoScaner").show();
  }

  function closeVideoScaner() {
    console.log("closeVideoScaner");
    $("#blockFormForVideoScaner").hide();
    scannerActive = false;
    $("#btnStartScanFace").html("Начать");
  }

  function startVideoScaner() {
    console.log("startVideoScaner");
    scannerActive = !scannerActive;

    if (scannerActive) {
      $("#btnStartScanFace").html("Остановить");
      savePhoto();
    } else {
      $("#btnStartScanFace").html("Начать");
    }
  }

  function savePhoto() {
    console.log("start uploadPhoto");

    try {
      if (scannerActive) {
        if ($("#videoScaner").is(":visible")) {
          NProgress.start();

          const context = canvasVideoScaner.getContext("2d");

          canvasVideoScaner.width = videoScaner.videoWidth;
          canvasVideoScaner.height = videoScaner.videoHeight;

          context.drawImage(
            videoScaner,
            0,
            0,
            canvasVideoScaner.width,
            canvasVideoScaner.height
          );

          canvasVideoScaner.toBlob(function (blob) {
            console.log("blob", blob);

            const reader = new FileReader();
            reader.onloadend = function () {
              $.post(
                "/saveFace",
                { photo: reader.result, uid: selectedUID },
                function (response) {
                  console.log("response from reader.onloadend", response);
                  NProgress.done();

                  if (response.detectFace) {
                    $("#infoForSelectedUserForVideoScaner").text(
                      response.similarity + " - " + response.user.count
                    );
                    $("#" + selectedUID + " .userCountFaceID").text(
                      "" + response.user.count + " шт"
                    );
                    toastr["info"]("OK");
                  } else {
                    toastr["error"]("Лицо не обнаружено");
                  }

                  setTimeout(() => {
                    savePhoto();
                  }, 500);
                },
                "json"
              ).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("error - /saveFace");
                NProgress.done();

                setTimeout(() => {
                  savePhoto();
                }, 500);
                console.log(
                  "--------------- error from fail --------------",
                  textStatus
                );
                toastr["error"]("ERROR");
              });
            };
            reader.readAsDataURL(blob);
          }, "image/jpeg");
        }
      }
    } catch (error) {
      console.log(
        "--------------- error from face scan ------------------",
        error
      );
      setTimeout(() => {
        savePhoto();
      }, 500);
      toastr["error"](error);
    }
  }

  function deletePhotos(uid) {
    console.log("deletePhotos", uid);

    $.post("/deleteFaces", { uid: uid }, function (response) {
      console.log(response);
      $("#" + response.user.uid + " .userCountFaceID").text(
        "" + response.user.count + " фото"
      );
      $("#userFoto").children().remove();
    });
  }

  function loadUserListFrom1C() {
    NProgress.start();

    $.ajax({
      url: "/loadUserListFrom1C",
      type: "GET",
      timeout: 5000, // 30 секунд
      success: function (response) {
        NProgress.done();
        $("#content").html(response);
      },
      error: function (xhr, status, error) {
        NProgress.done();
        if (status === "timeout") {
          console.log("Запрос превысил максимальное время ожидания");
        } else {
          console.log("Произошла ошибка: " + error);
        }
      },
    });
  }

  function updateFaceID() {
    NProgress.start();

    $.ajax({
      url: "/updateFaceID",
      type: "GET",
      timeout: 200000, // 30 секунд
      success: function (response) {
        NProgress.done();
        $("#content").html(response);
      },
      error: function (xhr, status, error) {
        NProgress.done();
        if (status === "timeout") {
          console.log("Запрос превысил максимальное время ожидания");
        } else {
          console.log("Произошла ошибка: " + error);
        }
      },
    });
  }

  function loginUser(uid) {
    $.post("/token", { user: uid }, function (data, status) {
      console.log("logToServer", "Data: ", data, "\nStatus: ", status);
      console.log("token", data.token);

      $("#content").html("");
      $("#menu").html("");
      localStorage.setItem("PageUID", "");
      PageUID = "";
      $.cookie("token", data.token);
      authentication();
    });
  }

  $(document).ready(function () {
    $("#search").on("input", function () {
      let searchTerms = $(this).val().split(" ").filter(Boolean);

      $(".userCard").each(function () {
        let found = true;
        let elements = $(this)
          .find(".userName, .userProfaFaceID")
          .map(function () {
            return { el: $(this) };
          })
          .get();
        elements.forEach((element) => {
          element.text = element.el.text().replace(/<mark>|<\/mark>/g, "");
          console.log("element.text", element.text);
        });

        if (searchTerms.length > 0) {
          found = searchTerms.every((term) => {
            const regex = new RegExp(`(${term})`, "gi");
            return elements.some((element) => {
              if (element.text.match(regex)) {
                element.text = element.text.replace(regex, "<mark>$1</mark>");
                console.log("element.text", element.text);
                return true;
              }
              return false;
            });
          });
        }

        $(this).toggleClass("hide", !found);
        elements.forEach((element) => {
          element.el.html(element.text);
        });
      });
    });

    // клик по количеству фото .userCountFaceID
    $(".userCountFaceID").on("click", function (event) {
      clickAnimate(this);

      const row = $(this).closest(".userCard");
      const newUserID = row.attr("id");
      const oldUserID = $("#userFoto").attr("UserID") || "";

      if (newUserID !== oldUserID) {
        $("#userFoto").hide();
      }

      if ($("#userFoto").is(":visible")) {
        $("#userFoto").hide(100);
      } else {
        $("#userFoto").children().remove();
        $("#userFoto").appendTo(row);
        $("#userFoto").show(100);
        $("#userFoto").attr("UserID", newUserID);

        NProgress.start();

        try {
          $.ajax({
            url: "/userListFoto",
            type: "GET",
            dataType: "json",
            data: { UserID: newUserID },
            success: function (response) {
              console.log("response", response);

              if (response.length > 0) {
                let indexFoto = 1;

                response.forEach((item) => {
                  console.log(item);

                  let newFoto = $(
                    `<img class="userFoto" src="" alt="${item}" indexFoto="${indexFoto}">`
                  );

                  if (item === "notFound.png") {
                    newFoto = $(
                      `<img class="userFoto" src="${item}" alt="${item}" title="${item}" indexFoto="${indexFoto}">`
                    );
                  } else {
                    newFoto = $(
                      `<img class="userFoto" src="/foto/${newUserID}/${item}" alt="${item}" title="${item}" indexFoto="${indexFoto}">`
                    );
                  }

                  $("#userFoto").append(newFoto);

                  indexFoto += 1;
                });
              } else {
                let newFoto = $(`<h6>Нет фотографий</h6>`);
                $("#userFoto").append(newFoto);
              }

              NProgress.done();
            },
          });
        } catch (error) {
          NProgress.done();
        }
      }
    });

    $("#userFoto").on("click", ".userFoto", function (event) {
      let file = $(this).attr("alt");
      let indexFoto = $(this).attr("indexFoto");
      let UserID = $(this).closest(".userCard").attr("id");
      let fotoForDelete = this;
      let deleteFoto = confirm(
        "Вы уверены, что хотите удалить эту фотографию?"
      );

      if (deleteFoto) {
        NProgress.start();

        try {
          $.ajax({
            url: "/userListFoto",
            type: "DELETE",
            dataType: "json",
            data: { UserID: UserID, file: file, indexFoto: indexFoto },
            complete: function (response) {
              console.log("on complete");
              //$('.userFoto[alt="' + file + '"]').remove();

              console.log(fotoForDelete);
              NProgress.done();

              let userCard = $(fotoForDelete).closest(".userCard");
              let userCountFaceID = $(userCard).find(".userCountFaceID");
              let text = $(userCountFaceID).text();
              let count = (parseInt(text) - 1).toString() + " фото";
              $(userCountFaceID).text(count);

              console.log("userCard", userCard);
              console.log("userCountFaceID", userCountFaceID);
              console.log("text", text);
              console.log("count", count);

              $(fotoForDelete).remove();
            },
          });
        } catch (error) {
          console.log("error", error);
          NProgress.done();
        }
      }
    });

    $(".userActions").hide();

    // Керування показом та приховуванням блоку userActions та зміна значення кнопки
    $(".userActionButton").on("click", function () {
      var $userActions = $(this).closest(".userCard").find(".userActions");
      $userActions.toggle(300);

      // Зміна значення кнопки на відповідну іконку в залежності від стану блоку userActions
      var $icon = $(this).find("i");
      $icon.toggleClass("bi-chevron-down bi-chevron-up");
    });
  });
</script>
