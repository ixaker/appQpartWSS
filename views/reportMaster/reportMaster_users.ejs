<style>
  .userFirstRow {
    font-size: x-large;
  }

  .avatarContainer {
    width: 70px;
    height: 70px;
    min-width: 0;
  }

  .avatar {
    width: 70px;
    height: auto;
  }

  .sotrudnikInfo {
    margin-left: 10px;
    flex-grow: 1;
    overflow: hidden;
  }

  .sotrudnikName {
    line-height: 22px;
  }

  .profa {
    font-size: large;
    flex-shrink: 0;
    white-space: nowrap;
    margin-top: 5px;
  }

  .machine {
    height: 25px;
    width: auto;
    padding: 0 3px 0 0;
    margin-bottom: 5px;
    position: relative;
  }

  .userIconsContainer {
    gap: 5px;
    font-size: large;
    height: 17px;
    margin-top: 4px;
  }

  .machineCount {
    font-size: large;
    width: 45px;
  }

  .btnTel {
    padding: 0;
    width: 5%;
  }

  .phone {
    width: 30px;
  }

  .phone i {
    min-height: auto;
  }

  .sotrudnikKkd {
    font-size: large;
    flex-shrink: 0;
    white-space: nowrap;
  }

  .sotrudnikKkdValue {
    width: 45px;
    text-align: end;
  }

  .isReports {
    width: 45px;
    display: flex;
    gap: 3px;
  }

  .blue {
    color: blue;
  }
  .green {
    color: green;
  }
  .red {
    color: red;
  }

  .userSecondRow {
    display: flex;
    font-size: large;
  }

  .stanokListDynamic {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
    width: 100%;
    max-width: 100%;
    margin-top: 15px;
  }

  .stanokList {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
    width: 100%;
    max-width: 100%;
    margin-top: 15px;
  }

  .stanok {
    width: 100px;
    text-align: center;
    padding: 8px;
    height: 2em;
    font-size: large;
    box-shadow: 2px 3px 5px #999;
    position: relative;
  }

  .input-container {
    width: 100px;
    position: relative;
    display: inline-block;
  }

  .input-container .stanok {
    width: 100%;
    padding-right: 1.5em; /* Місце для знака плюс */
  }

  .input-container .plus-sign {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    color: green;
    font-size: 4em;
    pointer-events: none;
  }

  .stanokItem {
    display: flex;
    font-size: large;
    border: 1px solid gray;
    border-radius: 5px;
    width: fit-content;
    box-shadow: 2px 3px 5px #ced4da;
    justify-content: center;
    align-items: center;
    padding: 0 5px;
    height: 2em;
    max-width: 100%;
  }

  .stanokDel {
    color: red;
  }

  .ui-dialog {
    background: white; /* Переконатися, що фон білий */
    width: auto !important;
  }

  .ui-dialog-titlebar {
    background: #f1f1f1; /* Задати фон для заголовка */
  }

  .ui-dialog {
    background-color: white !important;
  }

  .ui-widget-overlay {
    background: rgba(0, 0, 0, 0.5); /* Темний фон для overlay */
  }
</style>

<div id="usersContainer" class="container-slide" style="display: none">
  <header id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-arrow-left-circle backToMain" parent="#usersContainer"></i>
      <div class="titleChildren">Працівники</div>
      <span id="shiftDateUsers" class="titleShift"></span>
    </div>
    <div class="commandRow">
      <div class="input-group-search rounded groupSearch" id="groupSearch">
        <input
          type="search"
          id="searchUsers"
          class="form-control rounded search"
          placeholder="Поиск"
          aria-label="Search"
          aria-describedby="search-addon"
        />
        <span class="input-group-text border-0" id="search-addon">
          <i class="bi bi-search"></i>
        </span>
      </div>

      <div class="commandButtons">
        <i class="bi bi-funnel-fill menuButton filter" id="filterUsers"><div class="filterCount"></div> </i>
        <div id="filterMenuUsers" class="menuContainer">
          <div class="menuItem">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="operatorFilter" />
              <label class="form-check-label" for="operatorFilter"> Оператор </label>
            </div>
          </div>
          <div class="menuItem">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="naladchikFilter" />
              <label class="form-check-label" for="naladchikFilter"> Наладчик ЧПУ </label>
            </div>
          </div>
          <div class="menuItem">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="programmerFilter" />
              <label class="form-check-label" for="programmerFilter"> Программист ЧПУ </label>
            </div>
          </div>
          <div class="menuItem">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="masterFilter" />
              <label class="form-check-label" for="masterFilter"> Майстер </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>

  <!-- <div id="userList" url="user/api" callbackForRender="callbackForRenderUser" type="plate" paggination="false"></div> -->

  <div id="usersList" class="containerForRender"></div>

  <script id="menuTemplate" type="text/x-handlebars-template">
    {{#each profas}}
      <div class='menuItem'>
        <div class='form-check'>
          <input class='form-check-input' type='checkbox' value='' id='flexCheckDefault{{@index}}' />
          <label class='form-check-label' for='flexCheckDefault{{@index}}'> {{this}} </label>
        </div>
      </div>
    {{/each}}
  </script>

  <script id="usersTemplate" type="text/x-handlebars-template">
    {{#unless listUsers}} <h4 class="noUsers mt-4 text-center">Немає працівників на цій зміні </h4> {{/unless}}
    {{#each listUsers}}
      <div class='plateListItem' id='{{uid}}'>
        <div class='userFirstRow d-flex'>
          <div class='avatarContainer'>
            <img
              class='avatar'
              src='/auth_files/biophoto/{{emp_code}}.jpg'
              alt='Фото користувача {{uid}}'
              onerror="this.onerror=null; this.src='/img/avatar.png';"
            />
          </div>
          <div class='sotrudnikInfo'>
            <div class='sotrudnikName text-truncate'>
              {{Сотрудник}}
            </div>
            <div class='profa mr-2 text-truncate'>
              {{Должность}}
            </div>
            <div class='d-flex align-items-center userIconsContainer'>
              <div class='machineCount d-flex align-items-center'>
                <img src='/img/machine.png' alt='stanok' class='machine' />{{КоличествоСтанков}}
              </div>
              <div class='isReports'><i class='bi bi-file-earmark-text'></i>{{КоличествоОтчетов}}</div>

              <div class='phone'>
                <a href='tel:{{tel_1}}'> <i class='bi bi-telephone-fill btn btnTel'></i></a>
                <!-- <div class='phoneMenu'>
                <div class='phoneItem btn'>
                  <span class='phoneText'><a href='tel:{{tel_1}}'>{{tel_1}}</a></span>
                  <span class='phoneIcon'><a href='tel:{{tel_1}}'>
                      <i class='bi bi-telephone-fill btn btn-lg'></i></a></span>
                  <span class='phoneCopy'><i class='bi bi-clipboard btnCopy btn btn-lg'></i></span>
                  <span class='messageViber'><a href='viber://chat?number={{tel_1}}'><img
                        src='/img/viber.svg'
                        alt='viber'
                        class='btn-lg viberSvg'
                      /></a></span>
                </div>
              </div> -->
              </div>

              <div class='sotrudnikKkd d-flex'>ККД:
                <div class='sotrudnikKkdValue {{getColorByKkd ККД}} text-end'>{{ККД}}%</div>
              </div>

            </div>

          </div>

        </div>


          <div class='stanokListDynamic d-flex'>
            {{#if СписокСтанковНазначеныхМастером}}
            {{#each СписокСтанковНазначеныхМастером}}
              <div class='stanokItem' uid='{{uid}}'>
                <div class='stanokInv text-truncate'>
                  {{ИнвентарныйНомер}}
                </div>
                <div class='stanokDel'>
                  {{#if ../../canEdit}}
                  <i class='bi bi-x'></i>
                  {{/if}}
                </div>
              </div>
            {{/each}}
            {{/if}}
            {{#if ../canEdit}}
            <div class='input-container'>
              <input
                class='form-control stanok'
                url='/app/autocompleteStanok'
                aria-describedby='basic-addon3'
                data-editable='true'
                type='text'
                placeholder='станок'
                callbackAfterSelect='callbackAfterSelect'
              />
              <span class='plus-sign'>+</span>
            </div>
            {{/if}}
          </div>



        <div class='userSecondRow d-none'>
          <div class='stanokList'>
            {{#unless КоличествоОтчетов}}<div class="text-center w-100">Немає звітів</div>{{/unless}}
            {{#each listStanok}}

              <div class='reportContainer'>
                <div class='reportAutor text-center text-truncate'>{{Станок}}</div>
                {{#each listReport}}
                  <div class='stanokDetailGroup'>
                    <div class='stanokDetailHeader d-flex'>
                      <div class='stanokNameDet text-truncate'>{{Деталь}}</div>
                      <div class='notes d-flex'>
                        {{#if Проведен}}<i class='bi bi-check proveden'></i>{{/if}}
                        {{#if СтатусОТК}}<div class='otk'>ОТК</div>{{/if}}
                      </div>
                    </div>
                    <div class='stanokEtapCount displayFlex'>
                      <div class='nameStage'>{{Этап}}</div>
                      <div class='stanoValueDet'>{{КоличествоИзготовлено}} шт.</div>
                    </div>
                    <div class='reportTime d-flex gap-2'>
                      <i class='bi bi-clock color'> М <span class='time'>{{МашинноеВремя}}</span></i>
                      <i class='bi bi-clock color'> П <span class='time'>{{ПолноеВремя}}</span></i>
                      <i class='bi bi-clock color'> Д <span class='time'>{{ДлительностьВремя}}:00</span></i>
                    </div>
                  </div>
                {{/each}}
              </div>
            {{/each}}
          </div>
        </div>
      </div>
    {{/each}}
  </script>

  <script id="usersCloseShiftTemplate" type="text/x-handlebars-template">
    {{#each this}}
      <div class='plateListItem' id='{{uid}}'>
        <div class='userFirstRow d-flex'>
          <div class='avatarContainer'>
            <img
              class='avatar'
              src='/auth_files/biophoto/{{emp_code}}.jpg'
              alt='Фото користувача {{uid}}'
              onerror="this.onerror=null; this.src='/img/avatar.png';"
            />
          </div>
          <div class='sotrudnikInfo'>
            <div class='sotrudnikName text-truncate'>
              {{Сотрудник}}
            </div>
            <div class='profa mr-2 text-truncate'>
              {{Должность}}
            </div>
            <div class='d-flex align-items-center userIconsContainer'>
              <div class='machineCount d-flex align-items-center'>
                <img src='/img/machine.png' alt='stanok' class='machine' />{{КоличествоСтанков}}
              </div>
              <div class='isReports'><i class='bi bi-file-earmark-text'></i>{{КоличествоОтчетов}}</div>

              <div class='phone'>
                <a href='tel:{{tel_1}}'> <i class='bi bi-telephone-fill btn btnTel'></i></a>
                <!-- <div class='phoneMenu'>
                  <div class='phoneItem btn'>
                    <span class='phoneText'><a href='tel:{{tel_1}}'>{{tel_1}}</a></span>
                    <span class='phoneIcon'><a href='tel:{{tel_1}}'>
                        <i class='bi bi-telephone-fill btn btn-lg'></i></a></span>
                    <span class='phoneCopy'><i class='bi bi-clipboard btnCopy btn btn-lg'></i></span>
                    <span class='messageViber'><a href='viber://chat?number={{tel_1}}'><img
                          src='/img/viber.svg'
                          alt='viber'
                          class='btn-lg viberSvg'
                        /></a></span>
                  </div>
                </div> -->
              </div>

              <div class='sotrudnikKkd d-flex'>ККД:
                <div class='sotrudnikKkdValue {{getColorByKkd ККД}} text-end'>{{ККД}}%</div>
              </div>

            </div>

          </div>

        </div>
        <div class='userSecondRow d-none'>
          <div class='stanokList'>
            {{#each listStanok}}

              <div class='reportContainer'>
                <div class='reportAutor text-center text-truncate'>{{Станок}}</div>
                {{#each listReport}}
                  <div class='stanokDetailGroup'>
                    <div class='stanokDetailHeader d-flex'>
                      <div class='stanokNameDet text-truncate'>{{Деталь}}</div>
                      <div class='notes d-flex'>
                        {{#if Проведен}}<i class='bi bi-check proveden'></i>{{/if}}
                        {{#if СтатусОТК}}<div class='otk'>ОТК</div>{{/if}}
                      </div>
                    </div>
                    <div class='stanokEtapCount displayFlex'>
                      <div class='nameStage'>{{Этап}}</div>
                      <div class='stanoValueDet'>{{КоличествоИзготовлено}} шт.</div>
                    </div>
                    <div class='reportTime d-flex gap-2'>
                      <i class='bi bi-clock color'> М <span class='time'>{{МашинноеВремя}}</span></i>
                      <i class='bi bi-clock color'> П <span class='time'>{{ПолноеВремя}}</span></i>
                      <i class='bi bi-clock color'> Д <span class='time'>{{ДлительностьВремя}}:00</span></i>
                    </div>
                  </div>
                {{/each}}
              </div>

            {{/each}}

          </div>

        </div>
      </div>
    {{/each}}
  </script>

  <div id="dialog-confirm" title="Видалити станок?" style="display: none">
    <p>
      <span class="ui-icon ui-icon-alert" style="float: left; margin: 12px 12px 20px 0"></span>Цей станок буде видалено
      зі списку працівника.
    </p>
  </div>
</div>

<script>
  $(document).ready(function () {
    const platesID = '#userList';
    $(platesID).data('defaultParam', {});

    // initListPlate(platesID, true);

    callbackForRenderUser = function (data) {
      containerForTile = `#${data.uid}`;
      generateFromTemplate('#userTemplate', data, containerForTile);
      initInputAutocomplete('.stanok', 1);
      // initStankiAutocomplete();
    };

    // initStankiAutocomplete();

    callbackAfterSelect = function (data) {
      console.log('data', data);
      const thisInput = $(data.element);
      const inputContainer = thisInput.closest('.input-container');
      const stanokList = thisInput.closest('.userSecondRow').find('.stanokList');
      inputContainer.before(`
        <div class='stanokItem'>
          <div class='stanokInv'>
            ${data.item.value}
          </div>
          <div class='stanokDel'>
            <i class="bi bi-x"></i>
          </div>
        </div>
        `);

      const userUID = $(data.element).closest('.plateListItem').attr('id');
      const stanokUID = data.item.uid;
      console.log('data.item.value', data.item.value, data.item, data);
      const edited = [
        {
          key: 'Оператор',
          value: userUID,
        },
      ];

      saveReportMaster(stanokUID, edited);

      setTimeout(() => {
        thisInput.val('');
        console.log('thisInput', thisInput, thisInput.val());
      }, 100);
    };

    $(document).on('click', '.stanokItem', function () {
      console.log('stanokItem', this, isUserMaster());
      if (isUserMaster()) {
        const stanok = $(this).closest('.stanokItem');
        const stanokUID = $(this).attr('uid');

        const edited = [
          {
            key: 'Оператор',
            value: '',
          },
        ];

        function callbackAfterDelete() {
          $('#dialog-confirm').dialog('close');
          stanok.remove();
        }
        console.log('befre dialog confirm');
        $('#dialog-confirm').dialog({
          resizable: false,
          height: 'auto',
          width: 400,
          modal: true,
          buttons: {
            Видалити: function () {
              saveReportMaster(stanokUID, edited, callbackAfterDelete);
            },
            Відміна: function () {
              $(this).dialog('close');
            },
          },
        });
      }
    });

    function showCountOfFilters(idFilterButton, idFilterMenu) {
      const button = $(idFilterButton);
      const menu = $(idFilterMenu);

      const count = menu.find('.form-check-input:checked').length;
      button.find('.filterCount').text(count);
    }

    $('#filterMenuUsers input[type="checkbox"]').on('change', function () {
      const currentCheckbox = $(this);

      setTimeout(function () {
        if (currentCheckbox.prop('checked')) {
          $('#filterMenuUsers input[type="checkbox"]').not(currentCheckbox).prop('checked', false).trigger('change');
        }
      }, 0);
    });

    // filterItemsByText(['profa'], 'Оператор', '#operatorFilter');
    // filterItemsByText(['profa'], 'Наладчик ЧПУ', '#naladchikFilter');
    // filterItemsByText(['profa'], 'Программист ЧПУ', '#programmerFilter');

    initFilters({
      '#operatorFilter': {
        searchText: '',
        searchTerm: 'Оператор',
        classList: ['profa'],
      },
      '#naladchikFilter': {
        searchText: '',
        searchTerm: 'Наладчик ЧПУ',
        classList: ['profa'],
      },
      '#programmerFilter': {
        searchText: '',
        searchTerm: 'Программист ЧПУ',
        classList: ['profa'],
      },
      '#masterFilter': {
        searchText: '',
        searchTerm: 'Мастер',
        classList: ['profa'],
      },
    });

    $(document).on('click', '.btnTel', function (e) {
      console.log('btnTel');
      e.stopPropagation();
      console.log('this', this);
      const container = $(this).closest('.plateListItem');
      const phoneMenu = container.find('.phoneMenu');
      console.log('phoneMenu', container, phoneMenu);

      if (phoneMenu.is(':visible')) {
        phoneMenu.hide();
        return;
      }
      $('.phoneMenu').hide();
      phoneMenu.css('display', 'flex');
    });

    $(document).on('click', '.btnCopy', function (e) {
      clickAnimate(this);
      console.log('btn copy this', this);
      const container = $(this).closest('.phoneItem');
      const telText = container.find('.phoneText').text();
      console.log('telText', telText);
      navigator.clipboard
        .writeText(telText)
        .then(() => {
          console.log('Text copied to clipboard');
          toastr.success('Текст скопійовано');
        })
        .catch(err => {
          console.error('Failed to copy text: ', err);
        });
    });

    $(document).on('click', function (e) {
      const phoneMenu = $('.phoneMenu');
      if (!$(e.target).closest('.phoneMenu').length && !$(e.target).closest('.btnTel').length) {
        $('.phoneMenu').each(function () {
          $(this).hide();
        });
      }
    });

    $(document).on('click', '.userFirstRow', function () {
      console.log('userFirstRow click');
      const container = $(this).closest('.plateListItem');
      const reports = container.find('.userSecondRow');
      console.log('reports', container, reports);
      reports.toggleClass('d-none');
    });

    $('#searchUsers').on('input', function () {
      let searchTerms = $(this).val().split(' ').filter(Boolean);

      $('.plateListItem').each(function () {
        let found = true;
        let elements = $(this)
          .find(
            '.sotrudnikName , .profa, .stanokInv , .reportAutor , .stanokNameDet , .stanokEtapCount , .stanokNameDet, .otk, .nameStage   '
          )
          .map(function () {
            return { el: $(this) };
          })
          .get();
        elements.forEach(element => {
          element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');
        });

        if (searchTerms.length > 0) {
          found = searchTerms.every(term => {
            const regex = new RegExp(`(${term})`, 'gi');
            return elements.some(element => {
              if (element.text.match(regex)) {
                element.text = element.text.replace(regex, '<mark>$1</mark>');
                return true;
              }
              return false;
            });
          });
        }

        $(this).toggleClass('hide', !found);
        elements.forEach(element => {
          element.el.html(element.text);
        });
      });
    });
  });

  function initStankiAutocomplete(stankiList) {
    $('.stanok').autocomplete({
      source: listStanki,
      select: function (event, ui) {
        console.log('Selected value:', ui.item.value);
      },
    });
  }
</script>
