<%- include('reportMaster_testData') %> <%- include('reportMaster_details') %> <%- include('reportMaster_stanki') %> <%-
include('reportMaster_users') %>

<style>
  #main {
    min-height: 80vh;
    overflow: auto;
  }

  .main {
    width: 100%;
    max-width: 600px;
  }

  #container {
    max-width: 500px;
  }

  .titlePage {
    font-size: xx-large;
    line-height: normal;
  }

  .backToMain {
    font-size: xx-large;
    color: darkgreen;
    margin-left: 20px;
  }

  #shiftHeader {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .shiftButton {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    font-size: xx-large;
    color: darkgreen;
  }

  #shiftDate {
    font-size: large;
    text-align: center;
    border: 1px solid grey;
    border-radius: 5px;
    padding: 4px;
    margin-bottom: 4px;
    width: 150px;
    margin: 0 30px;
  }

  .plate {
    margin-bottom: 10px;
    border: 1px solid #bbbbbb;
    background-color: #ffffff;
    border-radius: 7px;
    box-shadow: 2px 3px 5px #999;
    padding: 10px;

    display: flex;
    flex-direction: column;
  }

  .header {
    font-size: xx-large;
    font-weight: bold;
  }

  .group {
    display: flex;
    font-size: x-large;
    line-height: 1.5em;
    justify-content: space-between;
    padding: 0 30px;
  }

  .name {
  }

  .value {
  }

  .detailGroup {
    font-size: large;
    padding: 0 10px;
    margin-bottom: 8px;
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: #f3f3f3;
  }

  .nameDet {
    font-weight: bold;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .nameStage {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .valueDet {
    margin-left: auto;
    overflow: hidden;
    white-space: nowrap;
  }

  #noShiftContainer {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: x-large;
    background: #ffffff;
    border-radius: 10px;
    border: 1px solid #e0e0e0;
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

    margin: 0 auto;
  }

  .noShiftText {
    text-align: center;
    color: #333;
    margin-bottom: 15px;
  }

  .noShiftTimer {
    border: 1px solid #cccccc;
    padding: 15px;
    border-radius: 8px;
    background-color: #f9f9f9;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #555;
    font-size: x-large;
    text-align: center;
  }

  .disabled {
    color: grey;
  }

  .qpartSpinerForWaiting {
    margin: 50px auto;
  }

  #ui-datepicker-div {
    left: 50% !important;
    transform: translateX(-50%);
  }
</style>

<div>
  <div id="main" class="screen container-slide">
    <header id="commandPanel" class="commandPanel">
      <h3 class="titlePage">Отчет мастера</h3>
    </header>

    <div id="shiftHeader">
      <button id="prevShift" class="shiftButton">
        <i class="bi bi-arrow-left-circle"></i>
      </button>
      <input id="shiftDate" name="shiftDate" type="text" readonly="" class="container-slide" />
      <button id="nextShift" class="shiftButton">
        <i class="bi bi-arrow-right-circle"></i>
      </button>
    </div>

    <div id="containerSumInfo" class="container-slide"></div>
    <div id="noShiftContainer" style="display: none">
      <div class="noShiftText">
        <p>Зміна ще не почалась.</p>
        <p>До початку зміни:</p>
      </div>
      <div class="noShiftTimer">00:00:00</div>
    </div>
  </div>
</div>

<script id="mainTemplate" type="text/x-handlebars-template">
  <div id='stanki' class='plate' children='#stanokContainer'>

    <div class='header'>Станки</div>
    <div class='group'>
      <div class='name'>Всього:</div>
      <div class='value'>{{stankiSumInfo.totalCount}}</div>
    </div>
    <div class='group'>
      <div class='name'>Задіяні:</div>
      <div class='value'>{{stankiSumInfo.used}}</div>
    </div>
    <div class='group'>
      <div class='name'>Незадіяні:</div>
      <div class='value'>{{stankiSumInfo.unused}}</div>
    </div>
    <div class='group'>
      <div class='name'>Зламані:</div>
      <div class='value'>{{stankiSumInfo.broken}}</div>
    </div>
    {{#unless active}}
      <div class='group'>
        <div class='name'>ККД, %:</div>
        <div class='value'>{{stankiSumInfo.kkd}}</div>
      </div>
    {{/unless}}
  </div>

  <div id='users' class='plate' children='#usersContainer'>
    <div class='header'>Працівники зміни</div>

    {{#each usersSumInfo.profa}}
      <div class='group'>
        <div class='name'>{{Должность}}:</div>
        <div class='value'>{{Количество}}</div>
      </div>
    {{/each}}
  </div>

  <div id='details' class='plate' children='#detailContainer'>
    <div class='header'>Зроблені деталі</div>
    {{#each detaliSumInfo.list}}
      <div class='detailGroup'>
        <div class='nameDet'>{{Артикул}} {{Деталь}}</div>
        <div class='etapCount displayFlex'>
          <div class='nameStage'>{{Этап}}</div>
          <div class='valueDet'>{{Количество}} шт.</div>
        </div>

      </div>
    {{/each}}
  </div>
</script>

<script id="optionsTemplate" type="text/x-handlebars-template">
  <option value=''></option>
  {{#each this}}
    <option value='{{uid}}'>{{Наименование}}</option>
  {{/each}}
</script>

<script>
  let listStanki;
  let activeShift;
  $(document).ready(function () {
    let currentDate;
    let currentShift;

    let selectedStanok = null;
    let selectedUser = null;

    // let render = true;

    addSubscribeWSS('ОтчетЗаСмену_all');

    init();

    function init() {
      const currentDay = getCurrentShift();
      currentDate = currentDay.currentDate;
      currentShift = currentDay.currentShift;
      getShift(0);
    }

    function getCurrentShift() {
      let shift = 'day';
      // const date = new Date();
      const date = new Date('2024-07-20T16:00:00');
      const currentHour = date.getHours();

      if (currentHour >= 19 || currentHour < 7) {
        shift = 'night';

        if (currentHour < 7) {
          date.setDate(date.getDate() - 1);
        }
      }

      return {
        currentDate: date,
        currentShift: shift,
      };
    }

    // function getCurrentShift() {
    //   currentShift = 'day';
    //   // currentDate = new Date();
    //   currentDate = new Date('2024-07-20T16:00:00');
    //   const currentHour = currentDate.getHours();

    //   if (currentHour > 19 && currentHour < 7) {
    //     currentShift = 'night';

    //     if (currentHour < 7) {
    //       currentDate.setDate(currentDate.getDate() - 1);
    //     }
    //   }

    //   console.log('currentDat, currentShift', currentDate, currentShift);
    // }

    $('#prevShift').click(function () {
      getShift(-1);
      clickAnimate(this);
    });

    $('#nextShift').click(function () {
      if ($(this).hasClass('disabled')) {
        event.preventDefault();
        return false;
      }
      clickAnimate(this);
      getShift(1);
    });

    function getShiftByDate(date) {
      console.log('getShiftByDate', date);
      currentDate = new Date(date);
      currentShift = 'day';
      console.log('getShiftByDate currentDate, currentShift', currentDate, currentShift);
    }

    function changeShift(direction) {
      const today = getCurrentShift();
      const todayDate = today.currentDate;
      const todayShift = today.currentShift;
      if (direction !== 0) {
        if (direction === 1 && currentShift === 'day') {
          direction = 0;
        }

        if (direction === -1 && currentShift === 'night') {
          direction = 0;
        }

        const newDate = new Date(currentDate);
        const newShift = currentShift === 'day' ? 'night' : 'day';
        newDate.setDate(currentDate.getDate() + direction);

        const todayShiftBegin = new Date(todayDate);
        todayShiftBegin.setHours(todayShift === 'day' ? 7 : 19, 0, 0, 0);

        const newShiftBegin = new Date(newDate);
        newShiftBegin.setHours(currentShift === 'day' ? 7 : 19, 0, 0, 0);

        if (todayShiftBegin < newShiftBegin) {
          $('#nextShift').addClass('disabled');
          $('#containerSumInfo').hide();
          $('#noShiftContainer').show();
        }
        currentDate = newDate;
        currentShift = newShift;
      }
    }

    function getInfoByParam(preset, callback) {
      console.log('getInfoByParam, currentShift', currentShift);
      const shift = { date: formatDateToYYYYMMDD(currentDate), smena: currentShift, preset: preset };
      universalRequest('app/reportMaster', 'GET', '', shift, callback);
    }

    function getShift(direction) {
      changeShift(direction);
      getReportFrom1C(direction);
    }
    async function getReportFrom1C(direction) {
      console.log('getReportFrom1C, currentDate, currentShift', currentDate, currentShift, direction);
      // changeShift(direction);
      renderTitle();

      const shift = { date: formatDateToYYYYMMDD(currentDate), smena: currentShift, preset: 'main' };

      const classForOut = direction === 1 ? 'outLeft' : direction === -1 ? 'outRight' : '';
      const classForIn = direction === 1 ? 'inRight' : direction === -1 ? 'inLeft' : '';

      $('#containerSumInfo').addClass(classForOut);
      console.log('$(#containerSumInfo).children(.plates)', $('#containerSumInfo').children('.plate'));
      $('#containerSumInfo').show();
      $('#noShiftContainer').hide();
      $('#containerSumInfo').children('.plate').html(skeleton);

      $('#shiftDate').addClass(classForOut);
      abortAllRequests();
      universalRequest('app/reportMaster', 'GET', '', shift, renderReport);
      setTimeout(() => {
        $('#containerSumInfo').removeClass(classForOut).addClass(classForIn);
        $('#shiftDate').removeClass(classForOut).addClass(classForIn);

        setTimeout(() => {
          $('#containerSumInfo').removeClass(classForIn);
          $('#shiftDate').removeClass(classForIn);
        }, 100);
      }, 100);
      // renderReport(testData);
    }
    // function formatDate(date) {
    //   const options = { day: '2-digit', month: '2-digit' };
    //   return new Intl.DateTimeFormat('en-GB', options).format(new Date(date));
    // }

    $('#shiftDate').datepicker({
      dateFormat: 'dd.mm',
      maxDate: new Date(),
      position: {
        my: 'center top',
        at: 'center bottom',
        of: '#shiftDate',
      },
      onSelect: function (dateText) {
        console.log('dateText', dateText);
        const [day, month] = dateText.split('.');
        const year = new Date().getFullYear();

        const selectedDate = new Date(year, month - 1, day, 8, 0, 0);

        if (isNaN(selectedDate.getTime())) {
          console.error('Invalid date provided');
          return;
        }
        console.log('selectedDate', selectedDate);
        getShiftByDate(selectedDate);
        getReportFrom1C(1);
      },
    });

    function renderTitle() {
      console.log('currentDate', currentDate, currentDate.toISOString());

      const formattedDate = formatDate(currentDate.toISOString());
      const formattedShift = currentShift === 'day' ? 'день' : 'ніч';
      const titleText = `${formattedDate} - ${formattedShift}`;
      console.log('titleText', titleText);
      $('#shiftDate').val(titleText);
    }

    function buttonDisable(idButton) {
      $(idButton).addClass('disabled');
      $(idButton).off('click');
    }

    callbackWSS = async function (data) {
      console.log('callbackWSS data', data);
      data.item = data.data;
      currentUID = $('#main').attr('uid');
      if (currentUID === data.data.uid) {
        renderReport(data);
      }
    };

    function getTimeToShiftStart() {
      const now = new Date();
      const currentHour = now.getHours();

      let shiftTime;
      if (currentShift === 'night') {
        shiftTime = new Date(now.toDateString() + ' 19:00:00');
      } else {
        shiftTime = new Date(now.toDateString() + ' 07:00:00');
      }

      const timeToShiftStart = Math.ceil((shiftTime - now) / 1000);

      return timeToShiftStart;
    }

    function startTimer(time, element) {
      let remainingTime = time;
      const timerInterval = setInterval(() => {
        $(element).text(formatSecondsToHHMMSS(remainingTime));
        remainingTime--;
        if (remainingTime < 0) {
          clearInterval(timerInterval);
          $(element).text('00:00:00');
        }
      }, 1000);
    }

    function generateOptions(listItem) {
      const templateHTML = $('#optionsTemplate').html();
      const template = Handlebars.compile(templateHTML);
      const options = template(listItem);

      return options;
    }

    function renderReport(data) {
      if (data.item) {
        activeShift = data.item.active;
        console.log('data,item.active, activeShift', data.item.active, activeShift);
        // const repairOrders = data.item.АктивныеЗаявкиНаРемонт;
        // console.log('repairOrders', repairOrders);
        // notWorkingStanki = repairOrders.filter(order => {
        //   return !order.ЗаявкаНаРемонт.НаСтанкеМожноРаботать;
        // });

        // const profaCount = {};
        // const sotrudnikiList = data.item.СписокСотрудников;
        // sotrudnikiList.forEach(sotrudnik => {
        //   const profa = sotrudnik.Должность?.Наименование;

        //   if (profa) {
        //     if (profaCount[profa]) {
        //       profaCount[profa]++;
        //     } else {
        //       profaCount[profa] = 1;
        //     }
        //   }
        // });

        // data.item.profaCount = Object.keys(profaCount).map(key => ({
        //   name: key,
        //   value: profaCount[key],
        // }));

        const finishedDetails = data.item.СписокСделанногоЗаСмену;
        console.log('finishedDetails', finishedDetails);

        console.log('data.item.СписокСтатусов', data.item.СписокСтатусов);
        data.item.options = generateOptions(data.item.СписокСтатусов);
        data.item.optionsList = data.item.СписокСтатусов;
        $('#nextShift').removeClass('disabled');
        $('#main').data('data', data.item);
        $('#main').attr('uid', data.item.uid);
        $('#stanokContainer').data('data', data.item.Станки);
        $('#usersContainer').data('data', data.item.СписокСотрудников);
        $('#containerSumInfo').show();
        $('#noShiftContainer').hide();
        generateFromTemplate('#mainTemplate', data.item, '#containerSumInfo');
      } else {
        console.log('not item');
        $('#nextShift').addClass('disabled');
        $('#containerSumInfo').hide();
        $('#noShiftContainer').show();
        if (data.error) {
          $('#noShiftContainer').text('Помилка!');
        }
        const secondsToShiftStart = getTimeToShiftStart();
        startTimer(secondsToShiftStart, '.noShiftTimer');
      }
    }

    function showPage(element) {
      const children = $(element).attr('children');
      containerAnimation('left', '#main', children);
      // $('#main').hide();
      // $(children).show();
    }

    // $(document).on('click', '#details', function () {
    //   showPage(this);
    // });
    Handlebars.registerHelper('log', function (something) {
      console.log(something);
    });

    function renderStanki(data) {
      // const data = $('#main').data('data');
      console.log('data', data.item.listStanki);
      if (activeShift) {
        console.log('activeShift');
        generateFromTemplate('#stanokTemplate', data.item.listStanki, '#stanokList');
      } else {
        console.log('not active shift');
        generateFromTemplate('#stanokCloseTemplate', data.item.listStanki, '#stanokList');
      }

      initSelect();
      initInputAutocomplete('.operator', 0, filterOperatorNaladchick);
      initOtherState();
      openMenu('filter', 'filterMenu', []);
      console.log('renderStanki', data);
    }

    $(document).on('click', '#stanki', function () {
      console.log('this', $(this).attr('id'));
      const param = $(this).attr('id');
      showPage(this);
      getInfoByParam(param, renderStanki);
      // renderStanki();
    });

    function renderUsers() {
      const data = $('#usersContainer').data('data');
      // const stankiData = $('#stanokContainer').data('data');
      // const users = data.map(user => ({
      //   uid: user.uid,
      //   name: user.Наименование,
      //   profa: user.Должность.Наименование,
      //   stanki: [],
      // }));

      // const profas = [...new Set(users.map(user => user.profa))];
      // const dataForMenu = { profas: profas };
      // console.log('profas', profas);

      // stankiData.forEach(stanok => {
      //   const stanokUID = stanok.Станок.uid;
      //   const stanokInv = stanok.Станок.ИнвентарныйНомер;

      //   users.forEach(user => {
      //     if (stanok.Оператор && stanok.Оператор.uid === user.uid) {
      //       user.stanki.push({
      //         stanokUID: stanokUID,
      //         stanokInv: stanokInv,
      //       });
      //     }
      //   });
      // });

      if (activeShift) {
        console.log('activeShift');
      } else {
        console.log('not active shift');
      }
      generateFromTemplate('#usersTemplate', users, '#usersList');
      generateFromTemplate('#menuTemplate', dataForMenu, '#filterMenuUsers');

      openMenu('filterUsers', 'filterMenuUsers', [
        isActive => searchFilter('ЧПУ', isActive),
        isActive => searchFilter('001', isActive),
      ]);
      console.log('renderUsers', users);
    }

    $(document).on('click', '#users', function () {
      console.log('click users');
      showPage(this);
      const param = $(this).attr('id');
      showPage(this);
      getInfoByParam(param, renderUsers);
      // renderUsers();
      // listStanki = $('#stanokContainer').data('data');
      // stankiForAutocomplete = listStanki.map(stanok => stanok.Станок.ИнвентарныйНомер);
      // console.log('listStanki', listStanki, stankiForAutocomplete, $('.stanok'));
      // initStankiAutocomplete(stankiForAutocomplete);
      // initInputAutocomplete('.stanok', 1);
    });

    $(document).on('click', '.backToMain', function () {
      console.log('backtomain click', this);

      // $('#main').show();
      const parent = $(this).attr('parent');
      // $(parent).hide();
      containerAnimation('right', parent, '#main');
      $(parent).find('.containerForRender').empty();
    });

    $('#usersContainer, #stanokContainer, #detailContainer').swipe({
      swipeRight: function (event, direction) {
        $('.backToMain').click();
      },
    });

    $('#main').swipe({
      swipeRight: function (event, direction) {
        console.log('swipeRight main');
        getShift(-1);
      },
      swipeLeft: function (event, direction) {
        console.log('swipeLeft main');
        getShift(1);
      },
    });
  });

  function saveReportMaster(stanokUID, edited, callbackAfterSave = () => {}) {
    const docUID = $('#main').attr('uid');

    const data = {
      doc: docUID,
      stanok: stanokUID,
      edited: edited,
    };

    universalRequest(
      'app/reportMaster',
      'POST',
      data,
      {},
      function onSuccess(response) {
        toastr.success('Збережено');
        console.log('Success callback:', response);
        callbackAfterSave();
      },
      function onError(error) {
        toastr.error('Помилка');
        console.log('Error callback:', error);
      }
    );
  }
</script>
