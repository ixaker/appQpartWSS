<%- include('reportMaster_details') %> <%- include('reportMaster_stanki') %> <%- include('reportMaster_users') %>

<style>
  #container {
    max-width: 500px;
  }
  #content {
    /* max-width: 500px; */
    margin: 0 auto;
  }

  #main {
    min-height: 80vh;
    overflow: auto;
    max-width: 500px;
    margin: 0 auto;
  }

  .main {
    width: 100%;
    max-width: 600px;
  }

  #containerSumInfo {
    padding: 10px 10px 0 10px;
  }
  #commandPanel {
    margin-bottom: 10px;
  }
  .titlePage {
    font-size: xx-large;
    line-height: normal;
  }

  .backToMain {
    font-size: xx-large;
    color: darkgreen;
    margin-left: 15px;
  }

  .menuButton {
    font-size: xx-large;
    color: darkgreen;
  }

  #shiftHeader {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .shiftButton {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    font-size: xx-large;
    color: darkgreen;
  }

  #shiftDate {
    font-size: large;
    text-align: center;
    border: 1px solid grey;
    border-radius: 5px;
    padding: 4px;
    margin-bottom: 4px;
    width: 150px;
    margin: 0 30px;
  }

  .plateListItem {
    border: 2px solid darkgreen;
  }
  .titleContainer {
    font-size: x-large;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 15px;
  }

  .titleChildren {
    font-size: x-large;
    font-weight: bold;
  }

  .plate {
    margin-bottom: 10px;
    border: 1px solid #bbbbbb;
    background-color: #ffffff;
    border-radius: 7px;
    box-shadow: 2px 3px 5px #999;
    padding: 5px 10px 10px 10px;

    display: flex;
    flex-direction: column;
  }

  .header {
    font-size: xx-large;
    font-weight: bold;
  }

  #stankiTable td {
    font-size: large;
    height: 1.5em;
  }

  #stankiTable td:first-child {
  }

  #stankiTable td:nth-child(2) {
    width: 16%;
    text-align: end;
  }

  .group {
    display: flex;
    font-size: large;
    line-height: 1.5em;
    justify-content: space-between;
    padding: 0 30px;
  }

  .group:nth-child(odd) {
    background-color: #e6e6e6;
  }

  .detailGroup {
    font-size: large;
    padding: 0 10px;
    margin-bottom: 8px;
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: #f3f3f3;
  }

  .nameDet {
    font-weight: bold;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .nameStage {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .valueDet {
    margin-left: auto;
    overflow: hidden;
    white-space: nowrap;
  }

  #noShiftContainer {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: x-large;
    background: #ffffff;
    border-radius: 10px;
    border: 1px solid #e0e0e0;
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

    margin: 0 auto;
  }

  .noShiftText {
    text-align: center;
    color: #333;
    margin-bottom: 15px;
  }

  .noShiftTimer {
    border: 1px solid #cccccc;
    padding: 15px;
    border-radius: 8px;
    background-color: #f9f9f9;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #555;
    font-size: x-large;
    text-align: center;
  }

  .disabled {
    color: grey;
  }

  .qpartSpinerForWaiting {
    margin: 50px auto;
  }

  #ui-datepicker-div {
    left: 50% !important;
    transform: translateX(-50%);
    font-size: large;
  }

  .ui-autocomplete {
    font-size: large;
  }

  #btnMakeMaster {
    font-size: xx-large;
    color: darkgreen;
    height: 36px;
  }

  th {
    background: #e6e6e6;
    color: black;
    padding: 0 5px 0 5px;
    border-color: #aaa;
    font-size: x-small;
  }

  td {
    font-size: small;
    width: auto;
    text-overflow: clip;
  }

  .tabulatorContainer {
    width: 100%;
  }

  .tabulator .tabulator-cell {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: clip;
  }

  .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {
    text-overflow: clip;
  }

  .tabulator
    .tabulator-header
    .tabulator-col.tabulator-sortable[aria-sort='none']
    .tabulator-col-content
    .tabulator-col-sorter
    .tabulator-arrow,
  .tabulator
    .tabulator-header
    .tabulator-col.tabulator-sortable[aria-sort='asc']
    .tabulator-col-content
    .tabulator-col-sorter
    .tabulator-arrow,
  .tabulator
    .tabulator-header
    .tabulator-col.tabulator-sortable[aria-sort='desc']
    .tabulator-col-content
    .tabulator-col-sorter
    .tabulator-arrow {
    display: none;
  }

  @media (min-width: 500px) {
    .tabulator
      .tabulator-header
      .tabulator-col.tabulator-sortable[aria-sort='none']
      .tabulator-col-content
      .tabulator-col-sorter
      .tabulator-arrow,
    .tabulator
      .tabulator-header
      .tabulator-col.tabulator-sortable[aria-sort='asc']
      .tabulator-col-content
      .tabulator-col-sorter
      .tabulator-arrow,
    .tabulator
      .tabulator-header
      .tabulator-col.tabulator-sortable[aria-sort='desc']
      .tabulator-col-content
      .tabulator-col-sorter
      .tabulator-arrow {
      display: block;
    }
  }

  #stanokList {
    max-width: 500px;
    margin: 0 auto;
  }

  #stanokTable td {
    font-size: x-small;
  }

  #stanokTable {
    display: none;
  }

  .tablesorter th {
    cursor: pointer;
  }

  .custom-arrow {
    position: relative;
    display: inline-block;
    cursor: pointer;
  }

  select {
    width: 18px;
    background: transparent;
    border: none;
    color: white;
  }

  select:focus-visible {
    outline: none;
  }

  select option {
    color: black;
  }

  .totalForTable {
    font-size: small;
    padding-right: 3px;
    margin-left: auto;
  }

  .totalForTables {
    font-size: large;
    padding-right: 3px;
    margin-left: auto;
  }
</style>

<div id="main" class="screen container-slide">
  <header id="commandPanel" class="commandPanel">
    <h3 class="titlePage">Отчет мастера</h3>
    <i class="bi bi-pencil" id="btnMakeMaster"></i>
  </header>

  <div id="shiftHeader">
    <button id="prevShift" class="shiftButton">
      <i class="bi bi-arrow-left-circle"></i>
    </button>
    <input id="shiftDate" name="shiftDate" type="text" readonly="" class="container-slide" />
    <button id="nextShift" class="shiftButton">
      <i class="bi bi-arrow-right-circle"></i>
    </button>
  </div>

  <div id="containerSumInfo" class="container-slide"></div>
  <div id="noShiftContainer" style="display: none">
    <div class="noShiftText">
      <p>Зміна ще не почалась.</p>
      <p>До початку зміни:</p>
    </div>
    <div class="noShiftTimer">00:00:00</div>
  </div>
</div>

<script id="mainTemplate" type="text/x-handlebars-template">
  <div id='stanki' class='plate' children='#stanokContainer'>
    <div class='header'>Станки</div>
    <table id='stankiTable' class='tablesorter'>
      <tbody>
        <tr>
          <td>Всього:</td>
          <td>{{stankiSumInfo.totalCount}}</td>
        </tr>
        <tr>
          <td>Задіяні:</td>
          <td>{{stankiSumInfo.used}}</td>
        </tr>
        <tr>
          <td>Незадіяні:</td>
          <td>{{stankiSumInfo.unused}}</td>
        </tr>
        <tr>
          <td>Зламані:</td>
          <td>{{stankiSumInfo.broken}}</td>
        </tr>
        {{#unless active}}
          <tr>
            <td>ККД, %:</td>
            <td>{{stankiSumInfo.kkd}}</td>
          </tr>
        {{/unless}}
      </tbody>
    </table>
    <!-- <div class='group'>
      <div class='name'>Всього:</div>
      <div class='value'>{{stankiSumInfo.totalCount}}</div>
    </div>
    <div class='group'>
      <div class='name'>Задіяні:</div>
      <div class='value'>{{stankiSumInfo.used}}</div>
    </div>
    <div class='group'>
      <div class='name'>Незадіяні:</div>
      <div class='value'>{{stankiSumInfo.unused}}</div>
    </div>
    <div class='group'>
      <div class='name'>Зламані:</div>
      <div class='value'>{{stankiSumInfo.broken}}</div>
    </div>
    {{#unless active}}
      <div class='group'>
        <div class='name'>ККД, %:</div>
        <div class='value'>{{stankiSumInfo.kkd}}</div>
      </div>
    {{/unless}} -->
  </div>

  <div id='users' class='plate' children='#usersContainer'>
    <div class='header'>Працівники зміни</div>
    <table id='stankiTable' class='tablesorter'>
      <thead>
        <tr>
          <th>Посада</th>
          <th style='width: 16%;'>К-ть</th>
        </tr>
      </thead>
      <tbody>
        {{#each usersSumInfo.profa}}
          <tr>
            <td>{{Должность}}:</td>
            <td>{{Количество}}</td>
          </tr>
        {{/each}}
      </tbody>
    </table>
    <!-- {{#each usersSumInfo.profa}}
      <div class='group'>
        <div class='name'>{{Должность}}:</div>
        <div class='value'>{{Количество}}</div>
      </div>
    {{/each}} -->
  </div>

  <div id='details' class='plate' children='#detailContainer'>
    <div class='header'>Зроблені деталі</div>
    <table id='detailsTable' class='tablesorter'>
      <thead>
        <tr>
          <th class='detailTd' style='width: 30%;'>
            Дет
            <!-- <select id='detailFilter'>
              <option value=''>Всі</option>
            </select> -->

          </th>
          <th class='stageTd' style='width: 60%;'>
            Этап
            <!--
             -->
          </th>
          <th class='count' style='width: 10%; padding: 0;'>
            К-во
          </th>
        </tr>
      </thead>
      <tbody>
        {{#each detaliSumInfo.list}}
          <tr>
            <td class='detailTd'>{{Артикул}} {{Деталь}}</td>
            <td class='stageTd'>{{Этап}}</td>
            <td class='count text-right'>{{Количество}}</td>
          </tr>
        {{/each}}
      </tbody>
    </table>
  </div>
</script>

<script id="optionsTemplate" type="text/x-handlebars-template">
  <option value=''></option>
  {{#each this}}
    <option value='{{uid}}'>{{Наименование}}</option>
  {{/each}}
</script>

<script>
  function isUserMaster() {
    const mainData = $('#main').data('data');

    if (mainData && mainData.usersSumInfo && Array.isArray(mainData.usersSumInfo.masters)) {
      return mainData.usersSumInfo.masters.some(master => master.uid === user.uid);
    } else {
      return false;
    }
  }

  $(document).ready(function () {
    let currentDate;
    let currentShift;
    let isShiftActive;
    let datepickerOpen = false;
    addSubscribeWSS('ОтчетЗаСмену_all');

    init();

    function init() {
      const currentDay = getCurrentShift();
      currentDate = currentDay.currentDate;
      currentShift = currentDay.currentShift;
      getShift(0);
    }

    function getCurrentShift() {
      let shift = 'day';
      const date = new Date();
      // const date = new Date('2024-07-20T16:00:00');
      const currentHour = date.getHours();

      if (currentHour >= 19 || currentHour < 7) {
        shift = 'night';

        if (currentHour < 7) {
          date.setDate(date.getDate() - 1);
        }
      }

      return {
        currentDate: date,
        currentShift: shift,
      };
    }

    $('#prevShift').click(function () {
      getShift(-1);
      clickAnimate(this);
    });

    $('#nextShift').click(function () {
      if ($(this).hasClass('disabled')) {
        event.preventDefault();
        return false;
      }
      clickAnimate(this);
      getShift(1);
    });

    $('#btnMakeMaster').on('click', function () {
      const mainData = $('#main').data('data');
      if (mainData.active) {
        mainData.usersSumInfo.masters.push({ uid: user.uid });
        $(this).hide();
        console.log('mainData', mainData);
      }
    });

    function getShiftByDate(date) {
      console.log('getShiftByDate', date);
      currentDate = new Date(date);
      currentShift = 'day';
      console.log('getShiftByDate currentDate, currentShift', currentDate, currentShift);
    }

    function changeShift(direction) {
      const today = getCurrentShift();
      const todayDate = today.currentDate;
      const todayShift = today.currentShift;
      if (direction !== 0) {
        if (direction === 1 && currentShift === 'day') {
          direction = 0;
        }

        if (direction === -1 && currentShift === 'night') {
          direction = 0;
        }

        const newDate = new Date(currentDate);
        const newShift = currentShift === 'day' ? 'night' : 'day';
        newDate.setDate(currentDate.getDate() + direction);

        const todayShiftBegin = new Date(todayDate);
        todayShiftBegin.setHours(todayShift === 'day' ? 7 : 19, 0, 0, 0);

        const newShiftBegin = new Date(newDate);
        newShiftBegin.setHours(currentShift === 'day' ? 7 : 19, 0, 0, 0);

        if (todayShiftBegin < newShiftBegin) {
          $('#nextShift').addClass('disabled');
          $('#containerSumInfo').hide();
          $('#noShiftContainer').show();
        }
        currentDate = newDate;
        currentShift = newShift;
      }
    }

    function getInfoByParam(preset, callback) {
      console.log('getInfoByParam, currentShift', currentShift);
      const shift = { date: formatDateToYYYYMMDD(currentDate), smena: currentShift, preset: preset };
      universalRequest('app/reportMaster', 'GET', '', shift, callback);
    }

    function getShift(direction) {
      changeShift(direction);
      getReportFrom1C(direction);
    }

    async function getReportFrom1C(direction) {
      console.log('getReportFrom1C, currentDate, currentShift', currentDate, currentShift, direction);
      // changeShift(direction);
      renderTitle();

      const shift = { date: formatDateToYYYYMMDD(currentDate), smena: currentShift, preset: 'main' };

      const classForOut = direction === 1 ? 'outLeft' : direction === -1 ? 'outRight' : '';
      const classForIn = direction === 1 ? 'inRight' : direction === -1 ? 'inLeft' : '';

      $('#containerSumInfo').addClass(classForOut);
      console.log('$(#containerSumInfo).children(.plates)', $('#containerSumInfo').children('.plate'));
      $('#containerSumInfo').show();
      $('#noShiftContainer').hide();
      $('#containerSumInfo').children('.plate').html(skeleton);

      $('#shiftDate').addClass(classForOut);
      abortAllRequests();
      universalRequest('app/reportMaster', 'GET', '', shift, renderReport);
      setTimeout(() => {
        $('#containerSumInfo').removeClass(classForOut).addClass(classForIn);
        $('#shiftDate').removeClass(classForOut).addClass(classForIn);

        setTimeout(() => {
          $('#containerSumInfo').removeClass(classForIn);
          $('#shiftDate').removeClass(classForIn);
        }, 100);
      }, 100);
    }

    $('#shiftDate').datepicker({
      dateFormat: 'dd.mm',
      maxDate: new Date(),
      position: {
        my: 'center top',
        at: 'center bottom',
        of: '#shiftDate',
      },

      beforeShow: function (input, inst) {
        console.log('datepicker is about to open');
        $('#ui-datepicker-div').addClass('datepicker-open');
      },

      onSelect: function (dateText) {
        console.log('dateText', dateText);
        const [day, month] = dateText.split('.');
        const year = new Date().getFullYear();

        const selectedDate = new Date(year, month - 1, day, 8, 0, 0);

        if (isNaN(selectedDate.getTime())) {
          console.error('Invalid date provided');
          return;
        }
        console.log('selectedDate', selectedDate);
        getShiftByDate(selectedDate);
        getReportFrom1C(1);
      },

      onClose: function () {
        console.log('datepicker is closed');
        $('#ui-datepicker-div').removeClass('datepicker-open');
      },
    });

    function renderTitle() {
      const formattedDate = formatDate(currentDate.toISOString());
      const formattedShift = currentShift === 'day' ? 'день' : 'ніч';
      const titleText = `${formattedDate} - ${formattedShift}`;
      console.log('titleText', titleText);
      $('#shiftDate').val(titleText);
      $('#shiftDateStanki').text(titleText);
      $('#shiftDateUsers').text(titleText);
      console.log('renderTitle', $('#shiftDateStanki'), $('#shiftDateUsers'));
    }

    function buttonDisable(idButton) {
      $(idButton).addClass('disabled');
      $(idButton).off('click');
    }

    callbackWSS = async function (data) {
      console.log('callbackWSS data', data);
      data.item = data.data;
      currentUID = $('#main').attr('uid');
      if (currentUID === data.data.uid) {
        renderReport(data);
      }
    };

    function getTimeToShiftStart() {
      const now = new Date();
      const currentHour = now.getHours();

      let shiftTime;
      if (currentShift === 'night') {
        shiftTime = new Date(now.toDateString() + ' 19:00:00');
      } else {
        shiftTime = new Date(now.toDateString() + ' 07:00:00');
      }
      const timeToShiftStart = Math.ceil((shiftTime - now) / 1000);

      return timeToShiftStart;
    }

    function startTimer(time, element) {
      let remainingTime = time;
      const timerInterval = setInterval(() => {
        $(element).text(formatSecondsToHHMMSS(remainingTime));
        remainingTime--;
        if (remainingTime < 0) {
          clearInterval(timerInterval);
          $(element).text('00:00:00');
        }
      }, 1000);
    }

    function generateOptions(listItem) {
      const templateHTML = $('#optionsTemplate').html();
      const template = Handlebars.compile(templateHTML);
      const options = template(listItem);
      Handlebars.registerHelper('arrayLength', function (array) {
        return array.length;
      });

      Handlebars.registerHelper('getColorByKkd', function (kkdValue) {
        if (kkdValue >= 0 && kkdValue < 80) {
          return 'red';
        } else if (kkdValue >= 80 && kkdValue < 100) {
          return '';
        } else if (kkdValue >= 100 && kkdValue <= 200) {
          return 'green';
        } else {
          return '';
        }
      });

      return options;
    }

    function renderReport(data) {
      if (data.item) {
        isShiftActive = data.item.active;
        $('#btnMakeMaster').toggleClass('d-none', !isShiftActive);

        data.item.options = generateOptions(data.item.СписокСтатусов);
        data.item.optionsList = data.item.СписокСтатусов;
        $('#nextShift').removeClass('disabled');
        $('#main').data('data', data.item);
        $('#main').attr('uid', data.item.uid);
        $('#stanokContainer').data('data', data.item.Станки);
        $('#usersContainer').data('data', data.item.СписокСотрудников);
        $('#containerSumInfo').show();
        $('#noShiftContainer').hide();
        generateFromTemplate('#mainTemplate', data.item, '#containerSumInfo');

        $('#detailsTable').tablesorter();

        const filterTable = () => {
          const selectedDetail = $('#detailFilter').val().toLowerCase();
          const selectedStage = $('#stageFilter').val().toLowerCase();

          $('#detailsTable tbody tr').each(function () {
            const detail = $(this).find('.detailTd').text().toLowerCase();
            const stage = $(this).find('.stageTd').text().toLowerCase();

            const matchesFilter =
              (selectedDetail === '' || detail.includes(selectedDetail)) &&
              (selectedStage === '' || stage.includes(selectedStage));
            $(this).toggle(matchesFilter);
          });
        };

        $('#detailFilter').change(filterTable);
        $('#stageFilter').change(filterTable);

        const populateSelect = (selector, columnClass) => {
          const uniqueValues = new Set();

          $(`#detailsTable tbody .${columnClass}`).each(function () {
            uniqueValues.add($(this).text());
          });

          // $(selector).empty();
          uniqueValues.forEach(value => {
            $(selector).append(`<option value="${value}">${value}</option>`);
          });
        };

        populateSelect('#detailFilter', 'detailTd');
        populateSelect('#stageFilter', 'stageTd');
      } else {
        console.log('not item');
        $('#nextShift').addClass('disabled');
        $('#containerSumInfo').hide();
        $('#noShiftContainer').show();
        if (data.error) {
          $('#noShiftContainer').text('Помилка!');
        }
        const secondsToShiftStart = getTimeToShiftStart();
        startTimer(secondsToShiftStart, '.noShiftTimer');
      }
    }

    function showPage(element) {
      const children = $(element).attr('children');
      containerAnimation('left', '#main', children);
    }

    Handlebars.registerHelper('log', function (something) {
      console.log(something);
    });

    function renderStanki(data) {
      $('#stanokContainer').data('data', data);

      if (isShiftActive) {
        filterOptions = {
          '#activeStankiFilter': {
            searchText: '',
            searchTerm: 'Задіяні',
            classList: ['statusMaster', 'statusFact'],
          },
        };

        const mainData = $('#main').data('data');
        let master = false;
        if (mainData.usersSumInfo.masters && Array.isArray(mainData.usersSumInfo.masters)) {
          master = mainData.usersSumInfo.masters.some(master => master.uid === user.uid);
        }

        if (isUserMaster()) {
          console.log('render stanki for master');
          data.item.listStanki.options = generateOptions(data.item.listStatus);
          generateFromTemplate('#stanokTemplate', data.item.listStanki, '#stanokList');
          initSelect(data.item.listStatus);
          let users = data.item.СписокСотрудников;

          $('.operator')
            .autocomplete({
              minLength: 0,
              source: users,
              select: function (event, ui) {
                console.log('Selected User Value: ' + ui.item.value, ui.item.label);
                $(this).val(ui.item.label);
                const userUID = ui.item.value;
                const stanokUID = $(this).closest('.plateListItem').attr('id');
                const edited = [
                  {
                    key: 'Оператор',
                    value: ui.item.value,
                  },
                ];
                console.log('edited', edited);
                saveReportMaster(stanokUID, edited);
                return false;
              },
            })
            .focus(function () {
              $(this).autocomplete('search', '');
            })
            .blur(function () {
              console.log('Input lost focus');
              if ($(this).val() === '') {
                console.log('Input cleared');
                const container = $(this).closest('.plateListItem');
                const stanokUID = container.attr('id');
                const edited = [
                  {
                    key: 'Оператор',
                    value: '',
                  },
                ];

                console.log('edited', edited);
                saveReportMaster(stanokUID, edited);
              } else {
                console.log('Input not cleared, no request sent');
              }
            });
        } else {
          generateFromTemplate('#stanokCloseTemplate', data.item.listStanki, '#stanokList');
        }
      } else {
        console.log('not active shift');

        // let table = generateStankiTable(data);

        function openTabulator(data) {
          // $('#stanokTableContainer').hide();
          $('#tabulatorContainer').show();
          $('#stanokList').hide();
          $('#filter').hide();
          $('#columnHide').hide();
          $('#changeView').removeClass('bi-table').addClass('bi-view-stacked');

          if (!table) {
            table = generateStankiTable(data);
          } else {
            table.setData(data);
          }
        }

        function closeTabulator() {
          $('#tabulatorContainer').hide();
          $('#stanokList').show();
          $('#changeView').removeClass('bi-view-stacked').addClass('bi-table');

          if (table) {
            table.destroy();
            table = null;
          }
        }

        $('#changeView').on('click', function () {
          clickAnimate(this);
          // $(this).toggleClass('bi-table bi-view-stacked');

          const data = $('#stanokContainer').data('data');

          if ($('#tabulatorContainer').is(':visible')) {
            closeTabulator();
          } else {
            openTabulator(data);
          }
        });
        closeTabulator();

        generateFromTemplate('#stanokCloseTemplate', data.item.listStanki, '#stanokList');

        filterOptions = {
          '#activeStankiFilter': {
            searchText: 'Задіяні',
            searchTerm: 'Задіяні',
            classList: ['statusMaster', 'statusFact'],
          },
        };

        // $('#stanokTable').tablesorter();

        // const filterStanokTable = () => {
        //   const selectedStanok = $('#stanokFilter').val().toLowerCase();
        //   const selectedOperator = $('#operatorFilter').val().toLowerCase();
        //   const selectedStanokDetail = $('#stanokDetailFilter').val().toLowerCase();
        //   const selectedStanokStage = $('#stanokStageFilter').val().toLowerCase();

        //   $('#stanokTable tbody tr').each(function () {
        //     const stanok = $(this).find('.stanokTd').text().toLowerCase();
        //     const operator = $(this).find('.operatorTd').text().toLowerCase();
        //     const stanokDetail = $(this).find('.detailTd').text().toLowerCase();
        //     const stanokStage = $(this).find('.stanokStageFilter').text().toLowerCase();

        //     const matchesFilter =
        //       (selectedStanok === '' || stanok.includes(selectedStanok)) &&
        //       (selectedOperator === '' || operator.includes(selectedOperator)) &&
        //       (selectedStanokDetail === '' || stanokDetail.includes(selectedStanokDetail)) &&
        //       (selectedStanokStage === '' || stanokStage.includes(selectedStanokStage));
        //     $(this).toggle(matchesFilter);
        //   });
        // };

        // $('#stanokFilter').change(filterStanokTable);
        // $('#operatorFilter').change(filterStanokTable);
        // $('#stanokDetailFilter').change(filterStanokTable);
        // $('#stanokStageFilter').change(filterStanokTable);

        // const populateStanokSelect = (selector, columnClass) => {
        //   const uniqueValues = new Set();

        //   $(`#stanokTable tbody .${columnClass}`).each(function () {
        //     uniqueValues.add($(this).text());
        //   });

        //   uniqueValues.forEach(value => {
        //     $(selector).append(`<option value="${value}">${value}</option>`);
        //   });
        // };

        // populateStanokSelect('#stanokFilter', 'stanokTd');
        // populateStanokSelect('#operatorFilter', 'operatorTd');
        // populateStanokSelect('#stanokDetailFilter', 'detailTd');
        // populateStanokSelect('#stanokStageFilter', 'stageTd');
      }

      initOtherState();
      initFilter('filterMenu', 'filter');
      initFilters(filterOptions);

      console.log('tabulatorContainer display', $('#tabulatorContainer').css('display'));
    }

    $(document).on('click', function (event) {
      console.log('click on e.targer', event.target);
    });

    $(document).on('click', '#stanki', function () {
      console.log('this', $(this).attr('id'), $('#ui-datepicker-div').hasClass('datepicker-open'));

      if ($('#ui-datepicker-div').is(':visible')) {
        event.stopImmediatePropagation();
        return;
      }
      const param = $(this).attr('id');
      showPage(this);
      getInfoByParam(param, renderStanki);
    });

    function renderUsers(data) {
      console.log('renderUsers data', data);
      data.item.canEdit = isShiftActive && isUserMaster();
      data.item.activeShift = isShiftActive;
      console.log('isUserMaster()', isUserMaster());
      generateFromTemplate('#usersTemplate', data.item, '#usersList');
      initInputAutocomplete('.stanok', 1);
      initFilter('filterMenuUsers', 'filterUsers');
    }

    $(document).on('click', '#users', function () {
      console.log('click users');
      if ($('#ui-datepicker-div').is(':visible')) {
        event.stopImmediatePropagation();
        return;
      }
      const param = $(this).attr('id');
      showPage(this);
      getInfoByParam(param, renderUsers);
    });

    function renderDetails(data) {
      console.log('renderDetails data', data, $('#detailsTemplate'));
      generateFromTemplate('#detailsTemplate', data.item, '#detailList');
      setupSearch('#searchDetails', '.plateListItem', ['.detailName , .detailSotrudnik, .stageName, .detailStanok']);
    }

    $(document).on('click', '#details', function () {
      console.log('click users');
      if ($('#ui-datepicker-div').is(':visible')) {
        event.stopImmediatePropagation();
        return;
      }
      const param = $(this).attr('id');
      showPage(this);
      getInfoByParam(param, renderDetails);
    });

    $(document).on('click', '.backToMain', function () {
      console.log('backtomain click', this);

      // $('#main').show();
      const parent = $(this).attr('parent');
      // $(parent).hide();
      containerAnimation('right', parent, '#main');
      $(parent).find('.containerForRender').empty();
      $('#tabulatorContainer').hide();
      $('#stanokList').show();
    });

    $('#usersContainer, #stanokContainer, #detailContainer').swipe({
      swipeRight: function (event, direction) {
        $('.backToMain').click();
      },
      threshold: 200,
    });

    $('#main').swipe({
      swipeRight: function (event, direction) {
        console.log('swipeRight main');
        getShift(-1);
      },
      swipeLeft: function (event, direction) {
        console.log('swipeLeft main');
        getShift(1);
      },
    });
  });

  function saveReportMaster(stanokUID, edited, callbackAfterSave = () => {}) {
    const docUID = $('#main').attr('uid');

    const data = {
      doc: docUID,
      stanok: stanokUID,
      edited: edited,
    };

    universalRequest(
      'app/reportMaster',
      'POST',
      data,
      {},
      function onSuccess(response) {
        toastr.success('Збережено');
        console.log('Success callback:', response);
        callbackAfterSave();
      },
      function onError(error) {
        toastr.error('Помилка');
        console.log('Error callback:', error);
      }
    );
  }

  if (typeof table !== 'undefined') {
    console.log('Переменная table уже существует');
    var table;
  } else {
    console.log('Переменная table не существует');
  }
</script>
