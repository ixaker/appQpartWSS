<style>
  .containerStanok {
    padding: 5px;
    display: flex;
    flex-direction: column;
    gap: 5px;
    font-size: medium;
  }

  .stanokFirstRow {
    display: flex;
    justify-content: flex-start;
    font-size: x-large;
  }

  .number {
    font-weight: 600;
  }

  .stanokSecondRow {
    display: flex;
    gap: 0px;
    font-size: large;
    flex-wrap: wrap;
  }

  .statusSelect,
  .operator {
    flex: 1 1 0;
    max-width: 50%;
  }

  .otherState {
    flex: 1 1 100%;
  }

  .detail,
  .stage {
    display: flex;
  }

  .labelNaladka {
    min-width: 70px;
    color: grey;
    font-style: italic;
    margin-left: 10px;
  }

  .stanokThirdRow {
    display: flex;
  }

  .hasRepair {
    font-size: large;
    color: red;
  }

  .stanokTile {
    margin-bottom: 10px;
    border: 1px solid #bbbbbb;
    background-color: #ffffff;
    border-radius: 7px;
    box-shadow: 2px 3px 5px #999;
    padding: 5px;
    display: flex;
    flex-direction: column;
  }

  .titleContainer {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 20px;
  }

  .commandButtons {
    margin-left: auto;
    margin-right: 10px;
    display: flex;
    align-items: center;
  }

  .otherStateConfirm {
    color: green;
  }

  .stanokDetail {
    font-size: large;
  }

  #groupSearch {
    margin-left: 3px !important;
  }

  .proveden {
    border: 2px solid darkgreen;
    border-radius: 11px;
    width: 23px;
    line-height: 15px;
    color: darkgreen;
  }

  .otk {
    font-size: small;
    border: 2px solid green;
    border-radius: 5px;
    color: darkgreen;
    padding: 2px 4px 0px 3px;
    margin-left: 5px;
    line-height: 15px;
    font-weight: 600;
  }

  .reportContainer {
    display: flex;
    flex-direction: column;
    gap: 5px;
    width: 100%;
  }
  .stanokDetailGroup {
    font-size: large;
    padding: 3px 3px 0px;
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: #f3f3f3;
  }

  .stanokDetailHeader {
    justify-content: space-between;
  }

  .stanokNameDet {
    font-weight: bold;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .stanoVvalueDet {
    overflow: hidden;
    white-space: nowrap;
  }

  .stanokEtapCount {
    display: flex;
    justify-content: space-between;
  }

  .reportTime {
    gap: 5px;
    justify-content: space-between;
  }

  .time {
    color: black;
    font-weight: bold;
  }

  .patron {
    width: 10%;
  }

  .countReports {
    width: 10%;
    gap: 4px;
  }

  .kkd {
    width: 30%;
  }

  .patronImg {
    height: 18px;
    margin: 0 3px 3px;
  }
</style>

<div id="stanokContainer" class="container-slide" style="display: none">
  <header id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-arrow-left-circle backToMain" parent="#stanokContainer"></i>
      <div class="titleChildren">Станки</div>
      <span id="shiftDateStanki" class="titleShift"></span>
    </div>
    <div class="commandRow">
      <div class="input-group-search rounded groupSearch" id="groupSearch">
        <input
          type="search"
          id="search"
          class="form-control rounded"
          placeholder="Поиск"
          aria-label="Search"
          aria-describedby="search-addon"
        />
        <span class="input-group-text border-0" id="search-addon">
          <i class="bi bi-search"></i>
        </span>
      </div>

      <div class="commandButtons">
        <!-- <i class="bi bi-card-checklist" id="reportsFilter"></i> -->
        <!-- <i class="bi bi-check-circle cmdButton" id="activeFilter"></i> -->
        <i class="bi bi-funnel-fill menuButton" id="filter"><div class="filterCount"></div></i>
        <div id="filterMenu" class="menuContainer">
          <div class="menuItem">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="activeStankiFilter" />
              <label class="form-check-label" for="activeStankiFilter"> задіяні </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>

  <div id="stanokList" class="containerForRender"></div>
</div>

<script id="stanokCloseTemplate" type="text/x-handlebars-template">
  {{#each this}}
    <div class='plateListItem' id='{{Станок.uid}}'>
      <div class='containerStanok'>
        <div class='stanokFirstRow'>
          <div class='number text-truncate'>
            {{Станок}}
          </div>
        </div>

        <div class='stanokSecondRow d-flex align-items-center'>
          {{#unless КоличествоОтчетов}} <div class='statusMaster'>{{Статус}}</div> {{/unless}}
          <div class='statusFact d-none'>Статус по звітах: {{СтатусФакт}}</div>
          {{#if КоличествоОтчетов}}<div class='countReports d-flex'><i class="bi bi-card-checklist"></i> {{КоличествоОтчетов}}</div>{{/if}}
          <div class="patron align-items-center d-flex">
            <img src="img/patron.png" class="patronImg" alt="patron icon" />
            {{#if РучнойПатрон}}Р{{/if}}{{#unless РучнойПатрон}}А{{/unless}}
          </div>
          <div class='kkd d-flex'>ККД: {{ККД}}%</div>

        </div>

        {{#each СписокРаботПоСтанку}}
        <div class="reportContainer">
          <div class='reportAutor text-center'>{{Оператор}}</div>

              {{#each СписокОтчетовПоСотруднику}}
              <div class='stanokDetailGroup'>
                <div class="stanokDetailHeader d-flex">
                  <div class='stanokNameDet'>{{Артикул}} {{Деталь}}</div>
                    <div class="notes d-flex">
                      {{#if Проведен}}<i class="bi bi-check proveden"></i>{{/if}}
                      {{#if СтатусОТК}}<div class="otk">ОТК</div>{{/if}}
                    </div>
                </div>
                <div class='stanokEtapCount displayFlex'>
                  <div class='nameStage'>{{Этап}}</div>
                  <div class='stanoValueDet'>{{КоличествоИзготовлено}} шт.</div>
                </div>
                <div class="reportTime d-flex gap-2">
                  <i class="bi bi-clock color"> М <span class="time">{{МашинноеВремя}}</span></i>
                  <i class="bi bi-clock color"> П <span class="time">{{ПолноеВремя}}</span></i>
                  <i class="bi bi-clock color"> Д <span class="time">{{ДлительностьВремя}}:00</span></i>

                </div>
              </div>
              {{/each}}
        </div>
        {{/each}}
      </div>
    </div>
  </div>
  {{/each}}
</script>

<script id="stanokTemplate" type="text/x-handlebars-template">
  {{#each this}}
    <div class='plateListItem' id='{{uid}}'>
      <div class='.containerStanok'>
        <div class='stanokFirstRow'>
          <div class='number'>
            {{Наименование}}
            {{#if Станок.ИнвентарныйНомер}}{{Станок.ИнвентарныйНомер}} {{else}} **** {{/if}}
            -
            {{Станок}}
          </div>
        </div>

        <div class='stanokSecondRow'>

          <select name='status' class='form-control statusSelect' selectedUID="{{Статус.uid}}">
            {{{../options}}}

          </select>
          <input
            class='form-control operator'
            url='/app/autocompleteSotrydnik'
            aria-describedby='basic-addon3'
            data-editable='true'
            type='search'
            placeholder='оператор'
            value='{{#if Оператор}} {{Оператор.Наименование}} {{/if}}'
            callbackAfterSelect='callbackAfterSelectOperator'
            callbackBlurIfNone='callbackBlurIfNone'
          />
          <div class="hideOperator" style="display: none;">{{Оператор.Наименование}}</div>
          <div class='input-group mb-3 otherStateContainer' style="display: none;" >
            <input
              class='form-control otherState'
              aria-describedby='basic-addon3'
              data-editable='true'
              type='search'
              placeholder='вкажіть стан станка'
              value="{{КастомныйСтатус}}"
            />
            <div class='input-group-append'>
              <span class='input-group-text' id='basic-addon2'><i class="bi bi-check-lg otherStateConfirm"></i></span>
            </div>
          </div>

        </div>
        <div class='stanokDetail'>
          {{#if НалаженнаяДеталь}} {{НалаженнаяДеталь.Артикул}} {{/if}}

          {{#if НалаженныйЭтап.Наименование}}- {{НалаженныйЭтап.Наименование}} {{/if}}
        </div>
        <div class='stanokThirdRow'>
          <div class='hasRepair'>{{#if Станок.НеРаботает}}<i class='bi bi-tools'></i>{{/if}}</div>
        </div>
      </div>
    </div>
  {{/each}}
</script>

<script>
  $(document).ready(function () {
    // const platesID = '#machines';
    // $(platesID).data('defaultParam', {});
    filterOperatorNaladchick = {
      profa: ['Оператор станков ЧПУ', 'Наладчик ЧПУ'],
      // active: false,
    };

    initInputAutocomplete('.operator', 0, filterOperatorNaladchick);

    function timeSinceLastReport(dateString) {
      const pastDate = new Date(dateString);
      const currentDate = new Date();

      const difference = currentDate - pastDate;

      const millisecondsInAnHour = 1000 * 60 * 60;
      const millisecondsInADay = 1000 * 60 * 60 * 24;

      const hoursDifference = Math.floor(difference / millisecondsInAnHour);
      const daysDifference = Math.floor(difference / millisecondsInADay);

      if (hoursDifference < 24) {
        return `${hoursDifference} г`;
      } else if (hoursDifference / 24 > 1000) {
        return 'ніколи';
      } else {
        return `${daysDifference} д`;
      }
    }

    function generateMachineInfo(data, container) {
      data.timeFromLastReport = timeSinceLastReport(data.ДатаПоследнегоОтчета);
      if (data.timeFromLastReport === 'ніколи') {
        data.classTimeFromLastReport = 'never';
      }
      const html = template(data);
      $(container).html(html);
    }

    $('#search').on('input', function () {
      let searchTerms = $(this).val().split(' ').filter(Boolean);

      $('.plateListItem').each(function () {
        let found = true;
        let elements = $(this)
          .find(
            '.number, .hideOperator, .stanokDetail, .statusFact, .statusMaster, .reportAutor, .stanokNameDet, .otk, .nameStage   '
          )
          .map(function () {
            return { el: $(this) };
          })
          .get();
        elements.forEach(element => {
          element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');
        });

        if (searchTerms.length > 0) {
          found = searchTerms.every(term => {
            const regex = new RegExp(`(${term})`, 'gi');
            return elements.some(element => {
              if (element.text.match(regex)) {
                element.text = element.text.replace(regex, '<mark>$1</mark>');
                console.log('element.text', element.text);
                return true;
              }
              return false;
            });
          });
        }

        $(this).toggleClass('hide', !found);
        elements.forEach(element => {
          element.el.html(element.text);
        });
      });
    });

    // filterItemsByText(['statusMaster', 'statusFact'], 'Задіяні', '#activeStankiFilter');
  });

  function initSelect() {
    $('.statusSelect').each(function () {
      const selectedUID = $(this).attr('selectedUID');
      const container = $(this).closest('.plateListItem');
      let inputOperator = container.find('.operator ');
      let inputOtherStateContainer = container.find('.otherStateContainer');
      $(this).val(selectedUID);

      const selectedText = $(this).find('option:selected').text();

      if (selectedText === 'Задіяні') {
        inputOperator.show();
      }

      if (selectedText === 'Інші') {
        inputOtherStateContainer.show();
      }
    });

    $('.statusSelect').on('change', function () {
      const selectedIndex = $(this)[0].selectedIndex;
      const data = $('#main').data('data');
      const selectedStatus = data.СписокСтатусов[selectedIndex - 1];
      console.log('$(this)', $(this), selectedStatus, selectedIndex);
      let container = $(this).closest('.plateListItem');
      let inputOperator = container.find('.operator ');
      let inputOtherStateContainer = container.find('.otherStateContainer');
      console.log('inputOtherStateContainer', container, inputOtherStateContainer);
      const stanokUID = container.attr('id');
      const edited = [
        {
          key: 'Статус',
          value: selectedStatus.uid,
        },
      ];
      saveReportMaster(stanokUID, edited);

      if (selectedStatus.Наименование === 'Задіяні') {
        console.log('select active');

        inputOperator.show();
      } else {
        inputOperator.hide();
      }

      if (selectedStatus.Наименование === 'Інші') {
        inputOtherStateContainer.show();
        inputOperator.hide();
      } else {
        inputOtherStateContainer.hide();
      }
    });
  }

  callbackAfterSelectOperator = function (data) {
    console.log('callbackAfterSelect stanki data', data);

    const userUID = data.item.uid;
    const stanokUID = $(data.element).closest('.plateListItem').attr('id');
    const edited = [
      {
        key: 'Оператор',
        value: userUID,
      },
    ];

    console.log('edited', edited);

    saveReportMaster(stanokUID, edited);
  };

  callbackBlurIfNone = function (element) {
    console.log('callbackBlur', element);
    const container = $(element).closest('.plateListItem');
    const stanokUID = container.attr('id');
    const select = container.find('.statusSelect');
    // select.val('');
    const edited = [
      {
        key: 'Оператор',
        value: '',
      },
    ];

    console.log('edited', edited);

    saveReportMaster(stanokUID, edited);
  };

  function initOtherState() {
    $('.otherState').on('blur', function () {
      console.log('onblur');
      handleOtherStateSave($(this));
    });

    // $('.otherStateConfirm').on('click', function () {
    //   clickAnimate(this);
    //   const input = $(this).closest('.input-group').find('.otherState');
    //   handleOtherStateSave(input);
    // });
  }

  function handleOtherStateSave(input) {
    console.log('handleOtherStateSave');
    const stateValue = input.val();
    const container = input.closest('.plateListItem');
    const stanokUID = container.attr('id');

    if (stateValue) {
      const edited = [
        {
          key: 'КастомныйСтатус',
          value: stateValue,
        },
      ];

      saveReportMaster(stanokUID, edited);
    }
  }
</script>
