<style>
  .containerStanok {
    display: flex;
    flex-direction: column;
    gap: 5px;
    font-size: medium;
  }

  th {
    font-size: x-small;
  }

  .stanokFirstRow {
    display: flex;
    justify-content: flex-start;
    font-size: x-large;
  }

  .number {
    font-weight: 600;
  }

  .stanokSecondRow {
    display: flex;
    gap: 0px;
    font-size: large;
    flex-wrap: wrap;
    padding-top: 2px;
  }

  .inputContainer {
    justify-content: space-between;
    gap: 3px;
  }

  .statusSelect,
  .operator {
    flex: 1 1 0;
    max-width: 49.5%;
  }

  .otherState {
    flex: 1 1 100%;
  }

  .detail,
  .stage {
    display: flex;
  }

  .labelNaladka {
    min-width: 70px;
    color: grey;
    font-style: italic;
    margin-left: 10px;
  }

  .stanokThirdRow {
    display: flex;
  }

  .hasRepair {
    font-size: large;
    color: red;
  }

  .stanokTile {
    margin-bottom: 10px;
    border: 1px solid #bbbbbb;
    background-color: #ffffff;
    border-radius: 7px;
    box-shadow: 2px 3px 5px #999;
    padding: 5px;
    display: flex;
    flex-direction: column;
  }

  .commandButtons {
    margin-left: auto;
    display: flex;
    align-items: center;
  }

  .otherStateConfirm {
    color: green;
  }

  .stanokDetail {
    font-size: large;
  }

  @media screen and (min-width: 500px) {
    #groupSearch {
      width: 250px;
    }
  }

  .proveden {
    border: 2px solid darkgreen;
    border-radius: 11px;
    width: 23px;
    line-height: 15px;
    color: darkgreen;
  }

  .otk {
    font-size: small;
    border: 2px solid green;
    border-radius: 5px;
    color: darkgreen;
    padding: 2px 4px 0px 3px;
    margin-left: 5px;
    line-height: 15px;
    font-weight: 600;
  }

  .reportContainer {
  }
  .stanokDetailGroup {
    font-size: large;
    padding: 3px 3px 0px;
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: #f3f3f3;
  }

  .stanokDetailHeader {
    justify-content: space-between;
  }

  .stanokNameDet {
    font-weight: bold;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .stanoVvalueDet {
    overflow: hidden;
    white-space: nowrap;
  }

  .stanokEtapCount {
    display: flex;
    justify-content: space-between;
  }

  .reportTime {
    gap: 5px;
    justify-content: space-between;
  }

  .time {
    color: black;
    font-weight: bold;
  }

  .patron {
    width: 10%;
    margin-right: 5px;
  }

  .kkd {
    width: 30%;
  }

  .patronImg {
    height: 18px;
    margin: 0 3px 3px;
  }

  #columnHide {
    margin-right: 10px;
  }

  #columnHideMenu {
    min-width: 160px;
  }
</style>

<div id="stanokContainer" class="container-slide" style="display: none">
  <header id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-arrow-up-circle backToMain" parent="#stanokContainer"></i>
      <div class="titleChildren">Станки</div>
      <span id="shiftDateStanki" class="titleShift"></span>

      <div class="input-group-search rounded groupSearch" id="groupSearch">
        <input
          type="search"
          id="searchStanki"
          class="form-control rounded"
          placeholder="Поиск"
          aria-label="Search"
          aria-describedby="search-addon"
        />
        <span class="input-group-text border-0" id="search-addon">
          <i class="bi bi-search"></i>
        </span>
      </div>

      <div class="commandButtons">
        <!-- <i class="bi bi-card-checklist" id="reportsFilter"></i> -->
        <!-- <i class="bi bi-check-circle cmdButton" id="activeFilter"></i> -->
        <i class="bi bi-funnel-fill menuButton" id="filter" title="Фільтр"><div class="filterCount"></div></i>
        <i class="bi bi-pencil menuButton" id="columnHide" title="Фільтр колонок" style="display: none"></i>
        <div id="columnHideMenu" class="menuContainer" style="display: none; position: absolute"></div>
        <i class="bi bi-table menuButton" id="changeView" title="Змінити вигляд"></i>
        <div id="filterMenu" class="menuContainer">
          <div class="menuItem">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="activeStankiFilter" />
              <label class="form-check-label" for="activeStankiFilter"> задіяні </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>

  <div id="tabulatorContainer" class="plate" style="display: none"></div>
  <div id="stanokTableContainer" style="display: none"></div>
  <div id="stanokList" class="containerForRender"></div>
</div>

<style>
  #stanokTable {
    width: 100%;
    max-width: 100%;
  }

  #stanokTable .count {
    width: 32px;
  }

  #stanokTable .duration {
    text-align: right;
    width: 45px; /* Фіксована ширина для duration */
  }

  #stanokTable .stanokTd {
    width: 9%;
  }
</style>

<script id="stanokCloseTemplate" type="text/x-handlebars-template">
  {{#each this}}
    <div class='plateListItem plate' id='{{Станок.uid}}'>
      <div class='containerStanok'>
        <div class='stanokFirstRow'>
          <div class='number text-truncate'>
            {{Станок}}
          </div>
        </div>

        {{#each СписокРаботПоСтанку}}
        <div class="reportContainer">
          <div class='reportAutor text-center'>{{Оператор}}</div>

          <table>
            <thead>
              <tr>
                <!-- <th class='stanokTd' style="width: 20%;">Ст.</th> -->
                <th class='detailTd' style="width: 30%;">Дет.</th>
                <th class='stageTd' style="width: 30%;">Этап</th>
                <th class='count' style="width: 8%; padding: 0;">К-во</th>
                <th class='count' style="width: 10%;">М</th>
                <th class='count' style="width: 10%;">П</th>
                <th class='count' style="width: 10%;">Д</th>

              </tr>
            </thead>
            <tbody>
          {{#each СписокОтчетовПоСотруднику}}
          <tr>
            <td class='detailTd'>{{Артикул}}{{Деталь}}</td>
            <td class='stageTd'>{{Этап}}</td>
            <td class='count text-right'>{{Количество}}</td>
            <td class='count text-right'>{{М}}</td>
            <td class='count text-right'>{{П}}</td>
            <td class='count text-right'>{{Д}}</td>
          </tr>

            {{/each}}


            </tbody>
          </table>
          <div class="textAlignEnd totalForTable">
            {{totalTime}}
          </div>
        </div>
        {{/each}}
        <div class='stanokSecondRow d-flex align-items-center'>
          <div class="patron align-items-center d-flex">
            <img src="img/patron.png?v=<%= version %> " class="patronImg" alt="patron icon" />
            {{#if РучнойПатрон}}Р{{/if}}{{#unless РучнойПатрон}}А{{/unless}}
          </div>
          <div class='kkd d-flex'>ККД: {{ККД}}%</div>
          {{#unless КоличествоОтчетов}} <div class='statusMaster'>{{Статус.Наименование}}</div> {{/unless}}
          <div class='statusFact d-none'>Статус по звітах: {{СтатусФакт}}</div>
          {{#if totalTime}}
          <div class="textAlignEnd totalForTables">Загальний час: {{totalTime}}</div>
          {{/if}}
        </div>

      </div>
    </div>
  </div>
  {{/each}}
</script>

<script id="stanokTemplate" type="text/x-handlebars-template">
  {{#each this}}
    <div class='plateListItem' id='{{uid}}'>
      <div class='.containerStanok'>
        <div class='stanokFirstRow'>
          <div class='number text-truncate'>
            {{Наименование}}
            {{#if Станок.ИнвентарныйНомер}}{{Станок.ИнвентарныйНомер}}{{/if}}

            {{Станок}}
          </div>
        </div>

        <div class='stanokSecondRow inputContainer'>

          <select name='status' class='form-control statusSelect' selectedUID="{{Статус.uid}}">
            {{{../options}}}

          </select>
          <input
            class='form-control operator'
            url='/app/autocompleteSotrydnik'
            aria-describedby='basic-addon3'
            data-editable='true'
            type='search'
            placeholder='оператор'
            value='{{#if Оператор}} {{Оператор}} {{/if}}'
            callbackAfterSelect='callbackAfterSelectOperator'
            callbackBlurIfNone='callbackBlurIfNone'
            style="display: none;"
          />
          <div class="hideOperator" style="display: none;">{{Оператор}}</div>
          <div class='input-group otherStateContainer' style="display: none;" >
            <input
              class='form-control otherState'
              aria-describedby='basic-addon3'
              data-editable='true'
              type='search'
              placeholder='вкажіть стан станка'
              value="{{КастомныйСтатус}}"
            />
            <div class='input-group-append'>
              <span class='input-group-text' id='basic-addon2'><i class="bi bi-check-lg otherStateConfirm"></i></span>
            </div>
          </div>

        </div>
        <div class='stanokDetail'>
          {{#if НалаженнаяДеталь}} {{НалаженнаяДеталь.Артикул}} {{/if}}

          {{#if НалаженныйЭтап.Наименование}}- {{НалаженныйЭтап.Наименование}} {{/if}}
        </div>
        <div class='stanokThirdRow'>
          <div class='hasRepair'>{{#if Станок.НеРаботает}}<i class='bi bi-tools'></i>{{/if}}</div>
        </div>
      </div>
    </div>
  {{/each}}
</script>

<script>
  $(document).ready(function () {
    // const platesID = '#machines';
    // $(platesID).data('defaultParam', {});
    filterOperatorNaladchick = {
      profa: ['Оператор станков ЧПУ', 'Наладчик ЧПУ'],
      // active: false,
    };

    initInputAutocomplete('.operator', 0, filterOperatorNaladchick);

    function timeSinceLastReport(dateString) {
      const pastDate = new Date(dateString);
      const currentDate = new Date();

      const difference = currentDate - pastDate;

      const millisecondsInAnHour = 1000 * 60 * 60;
      const millisecondsInADay = 1000 * 60 * 60 * 24;

      const hoursDifference = Math.floor(difference / millisecondsInAnHour);
      const daysDifference = Math.floor(difference / millisecondsInADay);

      if (hoursDifference < 24) {
        return `${hoursDifference} г`;
      } else if (hoursDifference / 24 > 1000) {
        return 'ніколи';
      } else {
        return `${daysDifference} д`;
      }
    }

    function generateMachineInfo(data, container) {
      data.timeFromLastReport = timeSinceLastReport(data.ДатаПоследнегоОтчета);
      if (data.timeFromLastReport === 'ніколи') {
        data.classTimeFromLastReport = 'never';
      }
      const html = template(data);
      $(container).html(html);
    }

    // $('#search').on('input', function () {
    //   const searchString = $(this).val().replace(/~/g, '');
    //   let searchTerms = searchString.split(' ').filter(Boolean);

    //   $('.plateListItem').each(function () {
    //     let found = true;
    //     let elements = $(this)
    //       .find(
    //         '.number, .hideOperator, .stanokDetail, .statusFact, .statusMaster, .reportAutor, .stanokNameDet, .stageTd, .detailTd'
    //       )
    //       .map(function () {
    //         return { el: $(this) };
    //       })
    //       .get();
    //     elements.forEach(element => {
    //       // element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');

    //       element.text = element.el.text().replace('<mark>', '');
    //       element.text = element.el.text().replace('</mark>', '');
    //     });
    //     console.log('elements[0]', $(elements[0]));
    //     if (searchTerms.length > 0) {
    //       found = searchTerms.every(term => {
    //         const regex = new RegExp(`(${term})`, 'gi');
    //         return elements.some(element => {
    //           if (element.text.match(regex)) {
    //             element.text = element.text.replace(regex, '<~~~~>$1</~~~~>');
    //             // element.text = element.text.replace(term, '<mark>${term}</mark>');
    //             return true;
    //           }
    //           return false;
    //         });
    //       });
    //     }
    //     elements.some(element => {
    //       element.text = element.text.replace(/~~~~/g, 'mark');
    //       console.log('element.text', element.text);
    //     });
    //     $(this).toggleClass('hide', !found);
    //     elements.forEach(element => {
    //       element.el.html(element.text);
    //     });
    //   });
    // });
  });

  function initSelect(data) {
    console.log('initSelect data', data);
    $('.statusSelect').each(function () {
      const selectedUID = $(this).attr('selectedUID');
      const container = $(this).closest('.plateListItem');
      let inputOperator = container.find('.operator ');
      let inputOtherStateContainer = container.find('.otherStateContainer');
      $(this).val(selectedUID);

      const selectedText = $(this).find('option:selected').text();

      if (selectedText === 'Задіяні') {
        inputOperator.show();
      }

      if (selectedText === 'Інші') {
        inputOtherStateContainer.show();
      }
    });

    $('.statusSelect').on('change', function () {
      console.log('select onchange');
      let container = $(this).closest('.plateListItem');
      let inputOperator = container.find('.operator ');
      let inputOtherStateContainer = container.find('.otherStateContainer');

      const selectedIndex = $(this)[0].selectedIndex;
      if (selectedIndex === 0) {
        inputOperator.hide();
        return;
      }
      const selectedStatus = data[selectedIndex - 1];
      console.log('$(this)', $(this), selectedStatus, selectedIndex);

      const stanokUID = container.attr('id');
      const edited = [
        {
          key: 'Статус',
          value: selectedStatus.uid,
        },
      ];
      saveReportMaster(stanokUID, edited);

      if (selectedStatus.Наименование === 'Задіяні') {
        inputOperator.show();
      } else {
        inputOperator.hide();
      }

      if (selectedStatus.Наименование === 'Інші') {
        inputOtherStateContainer.show();
        inputOperator.hide();
      } else {
        inputOtherStateContainer.hide();
      }
    });

    // $('.statusSelect').each(function () {
    //   $(this).trigger('change');
    // });
  }

  callbackAfterSelectOperator = function (data) {
    console.log('callbackAfterSelect stanki data', data);

    const userUID = data.item.uid;
    const stanokUID = $(data.element).closest('.plateListItem').attr('id');
    const edited = [
      {
        key: 'Оператор',
        value: userUID,
      },
    ];

    console.log('edited', edited);
    saveReportMaster(stanokUID, edited);
  };

  callbackBlurIfNone = function (element) {
    console.log('callbackBlur', element);
    const container = $(element).closest('.plateListItem');
    const stanokUID = container.attr('id');
    const select = container.find('.statusSelect');
    const edited = [
      {
        key: 'Оператор',
        value: '',
      },
    ];

    console.log('edited', edited);
    saveReportMaster(stanokUID, edited);
  };

  function initOtherState() {
    $('.otherState').on('blur', function () {
      console.log('onblur');
      handleOtherStateSave($(this));
    });

    // $('.otherStateConfirm').on('click', function () {
    //   clickAnimate(this);
    //   const input = $(this).closest('.input-group').find('.otherState');
    //   handleOtherStateSave(input);
    // });
  }

  function handleOtherStateSave(input) {
    console.log('handleOtherStateSave');
    const stateValue = input.val();
    const container = input.closest('.plateListItem');
    const stanokUID = container.attr('id');

    if (stateValue) {
      const edited = [
        {
          key: 'КастомныйСтатус',
          value: stateValue,
        },
      ];

      saveReportMaster(stanokUID, edited);
    }
  }

  function generateStankiTable(data) {
    function flattenData(data) {
      const flattened = [];

      data.forEach(item => {
        const stanok = item.Станок; // Ваш об'єкт станка

        item.СписокРаботПоСтанку.forEach(work => {
          work.СписокОтчетовПоСотруднику.forEach(report => {
            flattened.push({
              Станок: stanok,
              Оператор: work.Оператор,
              Деталь: report.Деталь,
              Этап: report.Этап,
              КоличествоИзготовлено: report.Количество,
              МашинноеВремя: report.М,
              ПолноеВремя: report.П,
              ДлительностьВремя: report.Д,
            });
          });
        });
      });

      return flattened;
    }

    const flatData = flattenData(data.item.listStanki);

    let sumTime = function (values) {
      let totalMinutes = 0;
      values.forEach(value => {
        if (value) {
          const [hours, minutes] = value.split(':').map(Number);
          totalMinutes += hours * 60 + minutes;
        }
      });

      const hours = Math.floor(totalMinutes / 60);
      const minutes = totalMinutes % 60;

      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    };

    let table = new Tabulator('#tabulatorContainer', {
      data: flatData,
      layout: 'fitColumns',
      responsiveLayout: 'hide',
      resizableRows: false,
      columns: [
        {
          title: 'Станок',
          field: 'Станок',
          minWidth: 50,
        },
        { title: 'Оператор', field: 'Оператор', minWidth: 50, widthGrow: 1 },
        { title: 'Деталь', field: 'Деталь', minWidth: 50, widthGrow: 1 },
        { title: 'Етап', field: 'Этап', minWidth: 50, widthGrow: 1 },
        {
          title: 'К',
          field: 'КоличествоИзготовлено',
          hozAlign: 'right',
          minWidth: 10,
          width: 30,
        },
        { title: 'М', field: 'МашинноеВремя', hozAlign: 'right', width: 45, responsive: 1 },
        { title: 'П', field: 'ПолноеВремя', hozAlign: 'right', width: 45, responsive: 1 },
        {
          title: 'Д',
          field: 'ДлительностьВремя',
          width: 45,
          hozAlign: 'right',
          responsive: 0,
          bottomCalc: function (values, data, calcParams) {
            if (data.length > 1) {
              $('.tabulator-footer').show();
              return sumTime(values);
            } else {
              $('.tabulator-footer').hide();
            }
            return '';
          },
        },
      ],
      resizableRows: false,
    });

    table.on('tableBuilt', function () {
      searchInit();
    });

    var generateColumnHideMenu = function () {
      let menuContainer = document.getElementById('columnHideMenu');
      menuContainer.innerHTML = '';

      let columns = table.getColumns();

      columns.forEach(function (column) {
        let checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.checked = column.isVisible();

        let label = document.createElement('label');
        label.style.display = 'block';

        let title = document.createElement('span');
        title.textContent = ' ' + column.getDefinition().title;

        checkbox.addEventListener('change', function () {
          column.toggle();
          checkbox.checked = column.isVisible();
        });

        label.appendChild(checkbox);
        label.appendChild(title);
        menuContainer.appendChild(label);
      });
    };
    openMenu('columnHide', 'columnHideMenu');

    $('#columnHide').on('click', function () {
      generateColumnHideMenu();
    });

    function searchInit() {
      $('#search').on('input', function () {
        var searchValue = $(this).val();
        console.log('search input', searchValue);
        table.clearFilter();

        var searchTerms = searchValue.split(' ').filter(term => term.length > 0);

        if (searchTerms.length > 0) {
          var filters = [];

          searchTerms.forEach(term => {
            filters.push([
              { field: 'Станок', type: 'like', value: term },
              { field: 'Оператор', type: 'like', value: term },
              { field: 'Деталь', type: 'like', value: term },
              { field: 'Этап', type: 'like', value: term },
            ]);
          });

          table.setFilter(filters, 'or');
        }
      });
      $('#search').trigger('input');
    }
    return table;
  }
</script>
