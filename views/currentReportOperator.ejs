<style>
  #btnAdd {
    margin-left: auto;
    font-size: 3em;
    color: #007431;
    margin-right: 10px;
  }

  /* .ui-autocomplete {
    font-size: 2em;
    color: blue;
  } */

  #lastRowSumm .labelfullTimeAll {
    text-align: end;
    padding-right: 5px;
  }

  #lastRowSumm {
    font-weight: bold;
  }

  #lastRowSumm td {
    background-color: transparent;
    border: 0;
    text-align: end;
  }

  #groupCurrentReport {
    font-size: xxx-large;
    margin-bottom: 70px;
    padding-left: 5px;
    padding-right: 5px;
  }

  #countDetalForCurrentReport {
    width: 140px;
    border: 1px solid #777;
    border-radius: 10px;
    line-height: 1.2em;
    height: 1.2em;
    margin: 5px 20px 0px 20px;
    text-align: center;
    background-color: #ffffff;
    color: crimson;
  }

  #nameDetalForCurrentReport {
    border: 1px solid #777;
    border-radius: 10px;
    line-height: 1.2em;
    height: 1.2em;
    text-align: center;
    background-color: #ffffff;
    padding: 0 15px;
    width: 410px;
    overflow: hidden;
  }
  .labelForCountCurrentDetal {
    line-height: 1.7em;
    margin: 5px 10px 0px 10px;
    font-size: xx-large;
    width: 150px;
  }

  fieldset {
    border: 1px solid #aaa;
    padding: 10px;
    border-radius: 10px;
    background-color: aliceblue;
  }

  legend {
    width: auto;
    margin-left: 10px;
    padding-left: 15px;
    padding-right: 15px;
    margin-bottom: 0px;
  }

  .historyCurrentReport {
    width: 100%;
    top: -17px;
    position: relative;
    height: auto;
    margin-left: 10px;
    margin-right: 15px;
    background-color: #ffffff;
    padding: 0 10px 0 10px;
  }

  .timerDetalForCurrentReport {
    border: 1px solid #777;
    border-radius: 10px;
    text-align: center;
    background-color: #ffffff;
    padding-left: 10px;
    padding-right: 10px;
    width: 130px;
  }

  #textHistory {
    font-size: 0.3em;
    max-height: 230px;
    margin-bottom: 0;
    overflow-x: hidden;
  }

  .disabledBtnIncrement {
    color: #777 !important;
    background-color: aliceblue !important;
  }

  #groupBtnWorkCurrentReport {
    text-align: right;
  }

  .btnWorkCurrentReport {
    width: 180px;
    border: 1px solid #aaa;
    font-size: xx-large;
    margin-right: 15px;
    margin-left: 10px;
  }

  #btnPauseCurrentReport {
    background-color: bisque;
  }

  #btnAvariaCurrentReport {
    background-color: coral;
  }

  .timeLimit {
    color: #ffffff !important;
    background-color: #ff0000 !important;
  }

  .colunmForEdit {
    color: gold;
  }

  .checkboxInTable {
    height: 15px !important;
  }
</style>

<div id="groupCurrentReport" report="" style="display: none">
  <fieldset style="padding-top: 10px; padding-bottom: 20px">
    <legend style="font-size: xx-large">Сейчас в работе</legend>
    <div style="display: flex">
      <div>
        <div style="display: flex">
          <div class="labelForCountCurrentDetal">Деталь :</div>
          <div id="nameDetalForCurrentReport"></div>
        </div>
        <div style="display: flex; margin-top: 20px; margin-bottom: 10px">
          <div class="labelForCountCurrentDetal" style="line-height: 3em">
            Cделано :
          </div>
          <div style="display: flex; font-size: 1.5em">
            <i
              class="bi bi-dash-circle color btnIncrementCount"
              increment="-1"
            ></i>
            <div
              id="countDetalForCurrentReport"
              name="КоличествоИзготовлено"
              report=""
            ></div>
            <i
              class="bi bi-plus-circle color btnIncrementCount"
              increment="1"
            ></i>
            <div
              class="labelForCountCurrentDetal"
              style="margin-left: 15px; width: auto; font-size: 0.7em"
            >
              шт
            </div>
          </div>
        </div>
        <div style="display: flex; font-size: 0.9em; margin-bottom: 19px">
          <div class="labelForCountCurrentDetal">Таймер :</div>
          <div class="timerDetalForCurrentReport" seconds="0" id="timer">
            00:00
          </div>
          <div
            class="labelForCountCurrentDetal"
            style="width: auto; margin-left: 22px"
          >
            Норма :
          </div>
          <div class="timerDetalForCurrentReport" id="timerNorma">00:00</div>
        </div>
      </div>
      <fieldset class="historyCurrentReport">
        <legend>История</legend>
        <pre id="textHistory"></pre>
      </fieldset>
    </div>
    <div id="groupBtnWorkCurrentReport">
      <div class="btn btnWorkCurrentReport" id="btnCloseCurrentReport">
        Закрыть
      </div>
      <div class="btn btnWorkCurrentReport" id="btnPauseCurrentReport">
        Пауза
      </div>
      <div class="btn btnWorkCurrentReport" id="btnAvariaCurrentReport">
        Авария
      </div>
    </div>
  </fieldset>
</div>

<div id="commandPanel">
  <h4 class="titlePage">Список работ за текущую смену</h4>
  <i class="bi bi-plus-circle" id="btnAdd"></i>
</div>

<table
  id="ОтчетПоРаботе2022"
  name="ОтчетПоРаботе2022"
  url="/app/getCurrentReportOperator"
  callbackBeforeInitTable="callbackBeforeDone"
  filter="callbackFilter"
  callbackAfterInitTable="callbackAfterDone"
  addNevRow="callbackAddNewRow"
  callbackAfterWrite="callbackAfterWrite"
  append="up"
  init
  header
>
  <tr class="config" style="display: none">
    <td
      title="Станок"
      name="Станок"
      key="ИнвентарныйНомер"
      headerClass="colunmForEdit"
      style="width: 10%"
    >
      <input
        type="text"
        minLength="1"
        url="/app/autocompleteStanok"
        checkValid
        class="dataCell textAlignCenter"
        style="padding: 0px"
      />
    </td>
    <td
      title="Деталь"
      name="Деталь"
      key="АртикулНаименование"
      style="width: 48%"
    >
      <div class="dataCell"></div>
    </td>
    <td title="Этап" name="ЭтапПроизводства" key="КодНовый" style="width: 8%">
      <div class="dataCell textAlignCenter"></div>
    </td>
    <td
      title="Кол-во"
      name="КоличествоИзготовлено"
      headerClass="colunmForEdit"
      style="width: 8%"
    >
      <input
        type="number"
        inputmode="numeric"
        checkValid
        min="0"
        sync="none"
        class="dataCell quantity textAlignEnd"
      />
    </td>
    <!--         <td title="Время маш." 
            name="МашинноеВремя"  
            style="width: 75px;"><div class="dataCell textAlignCenter" ></div></td> -->
    <!--         <td title="Время полное" 
            name="ПолноеВремя" 
            style="width: 80px;"><div class="dataCell textAlignCenter" ></div></td> -->
    <!--         <td title="Дет за 1 уст" 
            name="КоличествоДеталейЗаОднуУстановку" 
            style="width: 75px;"><div class="dataCell textAlignCenter" ></div></td> -->
    <!--         <td title="Общее время" 
            name="ДлительностьВремя" 
            style="width: 75px;">
            <div  type="text" 
                    inputmode="numeric" 
                    checkValid 
                    placeholder="мм:сс"
                    mask="00:A0" 
                    class="dataCell textAlignCenter"></div></td> -->
    <td title="Цена" name="СуммаОплатыЗаДетальНаЭтапе" style="width: 8%">
      <div class="dataCell textAlignEnd"></div>
    </td>
    <td title="Сумма" name="СуммаЗаВсеДетали" style="width: 8%">
      <div class="dataCell textAlignEnd"></div>
    </td>
    <!--         <td title="Готов" 
            name="СтатусОператора"
            style="width: 65px;"> 
            <input  type="checkbox" 
                    sync="none" 
                    class="dataCell checkboxInTable"></td> -->
    <td title="" style="width: 10%">
      <div class="groupBtnRow">
        <i
          class="bi bi-check-circle btnRow btnOk colorGreen"
          style="display: none"
        ></i>
        <i class="bi bi-pencil btnEdit btnRow colorGreen"></i>
        <i
          class="bi bi-trash btnDelete btnRow colorRed"
          name="ПометкаУдаления"
          style="display: none"
        ></i>

        <!-- <i class="bi bi-play-circle btnPlay btnRow colorGreen"></i> -->
        <i
          class="bi bi-pause-circle btnPause btnRow colorRed"
          style="display: none"
        ></i>
      </div>
    </td>
  </tr>

  <!--     <tr id="lastRowSumm">
        <td colspan="5" class="labelfullTimeAll">Общее время выработки за смену, чч:мм : </td>  
        <td id="fullTimeAll">00:00</td> 
        <td colspan="2"></td> 
    </tr> -->
  <tr id="lastRowSumm">
    <td colspan="5" class="labelfullTimeAll">Всего :</td>
    <td id="fullTimeAll" class="textAlignEnd">0</td>
    <td colspan="2"></td>
  </tr>
</table>

<script>
  $(document).ready(function () {
    let tableID = "#ОтчетПоРаботе2022";
    let startTimeWork = new Date();
    let timerWork = false;
    let disableBtnIncrement = false;
    let avaria = false;

    initTables();

    // callback при получении данных от сервера по wss
    callbackWSS = async function (data) {
      callbackTable(data);
    };

    // callback при изменении данных в строке для определения показать или убрать строку
    callbackFilter = function (data, result = true) {
      console.log("callbackFilter", data);
      console.log(data["Сотрудник"]["uid"], user.uid);

      const reportDate = new Date(data["ДатаОтчета"]);

      try {
        console.log("startTimeWork", startTimeWork);
        console.log("reportDate", reportDate);
        if (reportDate < startTimeWork) {
          result = false;
        }
        if (data["ПометкаУдаления"]) {
          result = false;
        }
        if (!data["ЭтоОтчетОператора"]) {
          result = false;
        }
        if (data["Сотрудник"]["uid"] !== user.uid) {
          result = false;
        }
        $("#countDetalForCurrentReport").text(data["КоличествоИзготовлено"]);
      } catch (error) {
        console.log(error);
      }

      return result;
    };

    // callback перед отрисовкой таблицы
    callbackBeforeDone = function (data) {
      console.log("callbackBeforeDone user.isAdmin", user, data);
      startTimeWork = new Date(data.startTimeWork);
      startTimeWork.setHours(0, 0, 0, 0);

      if (data.startTimeWork == "0001-01-01T00:00:00") {
        $(".titlePage").append(". Смена еще не начата");
        $("#btnAdd").hide();
        $(tableID).hide();

        // show table for admin
        if (user.isAdmin === true) {
          $("#btnAdd").show();
          $(tableID).show();
        }
      } else {
        startTimeWork2 = new Date(data.startTimeWork);

        $(".titlePage").text(
          "Список работ за текущую смену с " + startTimeWork2.toLocaleString()
        );
        $("#btnAdd").show();
        $(tableID).show();
      }
    };

    // callback после отрисовки таблицы
    callbackAfterDone = function (data) {};

    // callback после вставки новой пустой строки, перед заполнением данными
    callbackAddNewRow = function (data) {
      console.log("callbackAddNewRow", data);
    };

    // callback после внесения изменений в строку с сервера
    callbackAfterWrite = function (data) {
      console.log("callbackAfterWrite", data);
      updateFullTimeAll();

      if (data.data["Проведен"]) {
        console.log("eeeeeeeeeeeeeeeeeeee");

        let row = $("#" + data["uid"]);
        console.log("row Проведен", row);
        $(row).find(".btnRow ").remove();
      }
    };

    // клик по кнопке Редактировать
    $(tableID).on("click", ".btnEdit", function (event) {
      const row = $(this).closest("tr");
      const data = $(row).data("data");

      $(tableID).find(".btnDelete").hide();
      $(tableID).find(".btnPlay").show();
      $(tableID).find(".btnEdit").show();
      $(tableID).find(".btnOk").hide();
      $(tableID).find("input").prop("disabled", true);

      $(row).find(".btnOk").show();
      $(row).find(".btnDelete").show();
      $(row).find(".btnEdit").hide();
      $(row).find(".btnPlay").hide();
      $(row).find("input").prop("disabled", false);

      clickAnimate($(row).find(".btnOk"));
      logToServer('Нажата кнопка "Редактировать"', data);
    });

    // клик по кнопке Применить
    $(tableID).on("click", ".btnOk", function (event) {
      const row = $(this).closest("tr");
      const data = $(row).data("data");

      $(row).find(".btnOk").hide();
      $(row).find(".btnEdit").show();
      $(row).find(".btnPlay").show();
      $(row).find(".btnDelete").hide();
      $(row).find("input").prop("disabled", true);

      clickAnimate($(row).find(".btnEdit"));
      logToServer('Нажата кнопка "Применить"', data);
      sendNotificationOnChangeRowTable(this);
    });

    // клик по кнопке Удалить
    $(tableID).on("click", ".btnDelete", function (event) {
      clickAnimate(this);
      if (confirm("Вы уверены, что хотите удалить отчет?")) {
        const row = $(this).closest("tr");
        const data = $(row).data("data");

        data.edited["ПометкаУдаления"] = true;
        $(row).data("data", data);

        logToServer('Нажата кнопка "Удалить"', data);
        sendNotificationOnChangeRowTable(this);
      }
    });

    // клик по кнопке Добавить отчет
    $("#btnAdd").on("click", function (event) {
      console.log("кнопка натиснута");
      clickAnimate(this);
      NProgress.start();
      highlight = false;

      logToServer('Нажата кнопка "Добавить отчет"');

      const data = { operator: true };
      if (stanok.uid !== "") {
        data.stanok = stanok;
      }
      console.log("Дані, що будуть відправлені на сервер:", data);
      $.ajax({
        url: "/app/createReport",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log("logToServer", status, data);
        },
      }).always(function () {
        NProgress.done();
        highlight = true;
      });
    });

    $(tableID).on("click", ".btnPlay", function (event) {
      const row = $(this).closest("tr");
      const data = $(row).data("data");

      console.log("btnPlay", data, row);

      $("#countDetalForCurrentReport").text(data.data["КоличествоИзготовлено"]);
      $("#countDetalForCurrentReport").attr("report", data.data["uid"]);
      $("#timerNorma").text(data.data["ПолноеВремя"]);
      $("#timerNorma").attr(
        "seconds",
        convertTimeToSeconds(data.data["ПолноеВремя"])
      );
      $("#nameDetalForCurrentReport").text(
        data.data["Деталь"]["АртикулНаименование"]
      );

      $("#groupCurrentReport").show();
      setStateBtnPause(timerWork);

      clickAnimate(this);
      disableBtnIncrement = false;

      logToHistory(data.data["Деталь"]["АртикулНаименование"]);
    });

    function convertTimeToSeconds(timeString) {
      const [minutes, seconds] = timeString.split(":").map(Number);

      if (
        isNaN(minutes) ||
        isNaN(seconds) ||
        minutes < 0 ||
        seconds < 0 ||
        seconds >= 60
      ) {
        console.log("Ошибка: Недопустимое значение времени.");
        return 0;
      }

      return minutes * 60 + seconds;
    }

    $(".btnIncrementCount").on("click", function (event) {
      const report = $("#countDetalForCurrentReport").attr("report");

      console.log("btnIncrementCount click", disableBtnIncrement, report);

      if (disableBtnIncrement) {
        return;
      }
      if (report === "") {
        return;
      }

      $(".btnIncrementCount").addClass("disabledBtnIncrement");
      disableBtnIncrement = true;

      setTimeout(() => {
        $(".btnIncrementCount").removeClass("disabledBtnIncrement");
        disableBtnIncrement = false;
      }, 5000);

      clickAnimate(this);
      resetTimer();
      setStateBtnPause(true);

      const row = $("#" + report);
      const dataRow = $(row).data("data");
      const keyName = "КоличествоИзготовлено";
      const input = $(row).find('.dataCell[name="' + keyName + '"]');
      const incrementCount = parseInt($(this).attr("increment"));
      const incrementCountString =
        incrementCount > 0 ? "+" + incrementCount : incrementCount.toString();
      logToHistory("изготовлено " + incrementCountString);

      dataRow.edited[keyName] =
        parseInt(dataRow.data[keyName]) + incrementCount;
      $(row).data("data", dataRow);

      sendNotificationOnChangeRowTable(input);

      console.log("IncrementCount", row, dataRow, input);
    });

    function resetTimer() {
      $("#timer").attr("seconds", "0");
      $("#timer").text("00:00");
    }

    function convertSecondsToTime(convertSecondsToTime) {
      const firstPart = Math.floor(convertSecondsToTime / 60);
      const secondPart = convertSecondsToTime - firstPart * 60;

      var firstPartString = firstPart < 10 ? "0" + firstPart : firstPart;
      var secondPartString = secondPart < 10 ? "0" + secondPart : secondPart;

      return firstPartString + ":" + secondPartString;
    }

    $("#btnPauseCurrentReport").on("click", function (event) {
      if (avaria == true) {
        return;
      }
      clickAnimate(this);
      setStateBtnPause(!timerWork);

      if (timerWork == true) {
        logToHistory("Пуск");
      } else {
        logToHistory("Пауза");
      }
    });

    function setStateBtnPause(state) {
      timerWork = state;

      if (timerWork == true) {
        $("#btnPauseCurrentReport").text("Пауза");
      } else {
        $("#btnPauseCurrentReport").text("Пуск");
      }
    }

    $("#btnAvariaCurrentReport").on("click", function (event) {
      clickAnimate(this);
      avaria = !avaria;

      if (avaria == true) {
        setStateBtnPause(false);
        $(this).text("Запущен");
        logToHistory("Авария");
        $(".btnIncrementCount").addClass("disabledBtnIncrement");
        $("#btnPauseCurrentReport").addClass("disabledBtnIncrement");
        disableBtnIncrement = true;
      } else {
        $(this).text("Авария");
        logToHistory("Запущен");
        $(".btnIncrementCount").removeClass("disabledBtnIncrement");
        $("#btnPauseCurrentReport").removeClass("disabledBtnIncrement");
        disableBtnIncrement = false;
      }
    });

    $("#btnCloseCurrentReport").on("click", function (event) {
      logToServer('Нажата кнопка "Закрыть"');
      $("#groupCurrentReport").hide();
      setStateBtnPause(false);
      resetTimer();
    });

    callbackFuncSecondInterval = function () {
      if (timerWork) {
        const currentSeconds = parseInt($("#timer").attr("seconds"));
        const newSeconds = currentSeconds + 1;
        const normaSeconds = parseInt($("#timerNorma").attr("seconds") || 0);
        const timeStr = convertSecondsToTime(newSeconds);

        $("#timer").attr("seconds", newSeconds);
        $("#timer").text(timeStr);

        if (newSeconds > normaSeconds) {
          $("#timer").addClass("timeLimit");

          setTimeout(() => {
            $("#timer").removeClass("timeLimit");
          }, 500);
        }
      }
    };

    function logToHistory(msg) {
      const currentTime = new Date();
      var timeString = currentTime.toLocaleTimeString("en-US", {
        hour12: false,
      });
      const newRowHistory = timeString + " " + msg;
      $("#textHistory").text(newRowHistory + "\n" + $("#textHistory").text());
    }

    function updateFullTimeAll() {
      var sum = 0.0;

      $(tableID)
        .find(".rowData ")
        .each(function () {
          const data = $(this).data("data");
          const hoursString = data.data["СуммаЗаВсеДетали"] || "0";
          const hoursStringConv = hoursString.replace(",", ".");
          const hours = parseFloat(hoursStringConv);

          sum += hours;
        });

      // var timeString = convertToTime(sum);
      $("#fullTimeAll").text(sum);
    }
  });
</script>
