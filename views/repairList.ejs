<style>
  .titlePage {
    font-size: x-large;
  }

  #closeBtn {
  }

  .commandBtn {
    margin-left: auto;
    margin-right: 10px;
    font-size: xxx-large;
    color: darkgreen;
    line-height: 1em;
  }

  #infoGroup {
    font-size: large;
  }

  .input-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: nowrap;
    gap: 10px;
    margin-bottom: 0.7em !important;
    width: 100%;
  }

  .input-group label {
    margin-bottom: 0;
  }

  .input-group input {
  }

  .form-control {
    font-size: 1em;
    background-color: white !important;
  }

  .form-control:focus {
    box-shadow: none;
  }

  .form-control:focus {
    box-shadow: none;
  }

  #infoText {
    border: 1px solid lightgrey;
    width: 100%;
    padding: 5px;
    border-radius: 4px;
    margin: 0;
    background-color: white;
    font-size: large;
    font-family: inherit;
    color: #495057;
    white-space: pre-wrap;
  }

  #workInProvider {
    justify-content: start;
  }

  #workInProvider input {
    width: 1.5em;
    height: 1.5em;
    flex-grow: initial;
  }

  #infoButtonGroup {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    gap: 10px;
  }

  table {
    font-size: 1.7em;
  }

  table th {
    font-size: 1rem;
  }

  table td {
    padding: 5px;
    line-height: 2.5em;
  }
  .commandPanel {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 10px;
    margin-bottom: 10px;
    flex-wrap: wrap;
  }

  .btnContainer {
  }

  .pressed {
    color: darkorange;
  }

  #btnAdd {
    margin-left: auto;
    margin-right: 10px;
  }

  .groupSearch {
    width: auto;
    border: 1px solid #aaa;
    background-color: #fff;
    display: flex;
    align-items: center;
    flex-grow: 2;
    font-size: 1em;
    max-width: 240px;
    margin-left: auto;
  }

  .groupSearch:focus-within {
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }

  #search {
    border: none;
    line-height: 100%;
    height: 100%;
    padding-right: 0;
  }
  #searchInput {
    box-shadow: none;
  }

  #search:focus {
    box-shadow: none;
  }

  #search-addon {
    background-color: #fff;
  }

  .groupSearch input {
    border: none;
  }

  .redText {
    color: red;
  }

  .invalid:focus {
    box-shadow: 0px -6px 5px -5px red inset !important;
  }

  .ui-autocomplete {
    box-shadow: 2px 3px 5px #999;
  }
</style>

<div id="addOrder" class="applicationForm" style="display: none">
  <div id="orderTitle" class="applicationTitle">Новая заявка на ремонт</div>
  <input
    type="text"
    minLength="1"
    url="/app/autocompleteStanok"
    class="dataCell form-control"
    placeholder="Cтанок..."
    id="newOrderStanok"
    class="form-control"
    callbackSelect="callbackSelectStanok"
    class="form-control mr-sm-2"
  />
  <textarea class="applicationText form-control" id="newOrderText" rows="3" placeholder="Текст заявки..."></textarea>

  <div id="attachedFilesForNewOrder"></div>

  <div class="input-group" id="orderButtonGroup">
    <i class="bi bi-camera" id="attachPhotoVideoForNewOrder" elementForAttach="attachedFilesForNewOrder"></i>
    <button type="button" class="btn btn-secondary btn-lg" id="cancelOrder">Отмена</button>
    <button type="button" class="btn btn-success btn-lg" id="saveOrder">Сохранить</button>
  </div>
</div>

<div id="main">
  <div id="commandPanel" class="commandPanel">
    <h4 class="titlePage">Заявки на ремонт</h4>
    <div class="btnContainer">
      <i class="bi bi-check-circle commandBtn" id="btnDone"></i>
      <i class="bi bi-plus-circle commandBtn" id="btnAdd"></i>
    </div>
  </div>

  <style>
    #addOrder {
    }

    .applicationForm {
      margin: 20px auto 40px auto;
      background-color: aliceblue;
      max-width: 600px;
      min-width: 320px;
      display: flex;
      justify-content: center;
      flex-direction: column;
      padding: 10px;
      gap: 10px;
      border-radius: 0.5rem;
    }

    .applicationTitle {
      text-align: center;
      font-size: 1.25rem;
      font-weight: bold;
    }

    #orderTitle {
    }

    #newOrderStanok {
      width: 100%;
      font-size: 1.25rem;
      border: 1px solid #ced4da;
      border-radius: 0.25rem;
      padding: 0.375rem 0.75rem;
    }

    #orderButtonGroup {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }

    .applicationText {
      font-size: 1.25rem;
      width: 100%;
    }

    #newOrderText {
    }

    #attachPhotoVideoForNewOrder {
      font-size: xxx-large;
      margin-right: auto;
    }

    #attachedFilesForNewOrder {
      gap: 15px;
      display: flex;
      flex-wrap: wrap;
    }
  </style>

  <table
    id="ЗаявкаНаРемонт"
    name="ЗаявкаНаРемонт"
    url="/app/repairOrder/"
    callbackBeforeInitTable="callbackBeforeDone"
    filter="callbackFilter"
    callbackAfterInitTable="callbackAfterDone"
    addNevRow="callbackAddNewRow"
    callbackAfterWrite="callbackAfterWrite"
    append="up"
    init
    header
    sort="0"
  >
    <tr class="config" style="display: none">
      <td title="ПлановаяДатаГотовности" name="ПлановаяДатаГотовности" style="display: none">
        <div class="dataCell textAlignCenter planeDate"></div>
      </td>
      <td title="Станок" name="Станок" key="ИнвентарныйНомер" style="width: 15%">
        <div class="dataCell textAlignCenter"></div>
      </td>
      <td title="Описание" name="Описание" style="width: 48%">
        <div class="dataCell"></div>
      </td>
      <td title="Статус" name="СтатусЗаявки" style="width: 22%">
        <div class="dataCell"></div>
      </td>
      <td title="Дни" name="Дни" style="width: 10%">
        <div class="dataCell textAlignCenter days"></div>
      </td>
    </tr>

    <tr id="stageRow" style="display: none">
      <td colspan="7" style="background-color: aliceblue">
        <div id="stageForm"></div>
      </td>
    </tr>
  </table>
</div>

<!-- Form for zakupka -->

<!-- modal block -->
<style>
  #modal {
    width: 100%;
    max-width: 600px;
    margin: auto;
    padding: 0 10px;
  }

  .showModal {
    display: flex;
  }

  .close-modal-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    border: none;
    cursor: pointer;
    text-align: center;
    line-height: 25px;
    border: none;
    background-color: white;
    font-size: 2em;
  }
</style>

<style>
  #controlPanel {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }
  #btnAddForm {
    margin: 0 auto;
    font-size: xxx-large;
    color: #007431;
  }

  #btn-container {
    flex-direction: column;
    justify-content: flex-start;
    width: 300px;
    display: none;
    margin-bottom: 20px;
    position: absolute;
    z-index: 1;
    top: 85%;
    opacity: 0;
    gap: 2px;

    transition: opacity 0.2s;
  }

  #btn-container.showModal {
    opacity: 1;
  }

  .form-group {
    display: flex;
    align-items: center;
  }

  .form-group label {
    margin-bottom: 0;
    transition: 2s;
    width: 35%;
  }

  #modal .form-control {
    width: 65%;
    margin-left: auto;
  }

  #btnAddZakupka {
    font-size: xxx-large;
    color: darkgreen;
    margin-left: auto;
  }

  #countOrderZakupka {
    border: 1px solid #ced4da;
    padding: 0.375rem 0.75rem;
    background-color: white !important;
    border-radius: 0.25rem;
    width: 150px;
    text-align: center;
    display: flex;
    cursor: default;
    user-select: none;
  }

  .marginLeftAuto {
    margin-left: auto;
  }
</style>

<div id="modal" style="display: none">
  <div class="commandPanel">
    <h4 class="titlePage">Заявка на ремонт</h4>
    <h4 id="orderNum" class="titlePage">0001</h4>
    <i id="closeBtn" class="bi bi-x-circle commandBtn"></i>
  </div>

  <div id="infoGroup">
    <div class="form-group">
      <pre id="infoText">Текст заявки</pre>
    </div>

    <div class="form-group" id="filesAuthorOrder"></div>

    <div class="form-group">
      <label>Дата:</label>
      <input type="text" readonly class="form-control" id="infoDate" />
    </div>

    <div class="form-group">
      <label>Автор:</label>
      <input type="text" readonly class="form-control" id="infoAuthor" />
    </div>

    <div class="form-group">
      <label>Станок:</label>
      <input type="text" readonly class="form-control" id="infoStanok" />
    </div>

    <div class="form-group">
      <label id="labelSrok">Срок:</label>
      <input type="text" readonly class="form-control" id="infoDays" />
    </div>

    <div class="form-group">
      <label for="difficultButton">Сложность:</label>
      <select id="difficultButton" class="form-control" disabled data-editable="true"></select>
    </div>

    <div class="form-group">
      <label for="executor">Исполнитель:</label>
      <input
        type="text"
        class="form-control"
        id="executor"
        url="/app/autocompleteSotrydnik"
        aria-describedby="basic-addon3"
        data-editable="true"
        readonly
      />
    </div>

    <div class="form-group">
      <label for="status">Статус</label>
      <select id="status" class="form-control" disabled data-editable="true">
        <option value="Ремонт">Ремонт</option>
        <option value="Выполнена">Выполнена</option>
      </select>
    </div>

    <div class="form-group">
      <label>Закупка:</label>
      <div id="countOrderZakupka">
        <div>Нет заявок</div>
        <i class="bi bi-caret-down-fill marginLeftAuto"></i>
        <i class="bi bi-caret-up-fill marginLeftAuto" style="display: none"></i>
      </div>
      <i class="bi bi-plus-circle" id="btnAddZakupka"></i>
    </div>

    <div id="listOrderZakupka" style="display: none"></div>
  </div>

  <div id="modal-content">
    <style>
      #actions {
        font-size: xxx-large;
        color: darkgreen;
        margin-right: 0px;
        margin-top: auto;
        width: 74px;
        line-height: 55px;
        padding: 10px 10px 5px 0;
        align-self: flex-end;
      }

      #sendComment {
      }

      #attachPhoto {
      }

      #commentForm {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-color: white;
        border-radius: 12px 12px 12px 12px !important;
        margin-bottom: 10px !important;
      }

      #comment {
        border: none;
        font-size: large;
        resize: none;
        border-radius: 12px;
        align-self: flex-start;
      }

      #attachedFiles {
        display: flex;
        gap: 5px;
        padding: 5px;
      }

      .attachedImg {
        width: 103px;
        height: 135px;
        position: relative;
        border: 1px solid;
        align-items: center;
        display: flex;
      }

      /*       .attachedImg::before {
        content: 'x';
        position: absolute;
        top: 3px;
        right: 2px;
        color: white;
      } */
    </style>

    <div class="input-group" id="commentForm">
      <textarea class="form-control" id="comment" rows="3" placeholder="написать сообщение..."></textarea>
      <div id="actions">
        <i class="bi bi-send" id="sendComment"></i>
        <!-- <i class="bi bi-camera" id="attachPhoto"></i> -->
      </div>
      <input type="file" id="file-input" accept="image/*,video/*" capture multiple style="display: none" />
    </div>
    <div id="attachedFiles"></div>

    <div class="camera-modal" id="camera-modal" style="display: none">
      <video id="camera-video" autoplay></video>
      <span id="video-timer">00:00</span>
      <div class="camera-controls">
        <button id="capture-photo"><i class="bi bi-camera"></i></button>
        <button id="capture-video"><i class="bi bi-record-fill"></i></button>
        <button id="stop-video" style="display: none"><i class="bi bi-stop-fill"></i></button>
        <button id="close-camera"><i class="bi bi-x-square"></i></button>
      </div>
    </div>

    <style>
      .camera-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      }

      #camera-video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      #video-timer {
        position: absolute;
        top: 10px;
        left: 50%;
        transform: translate(-50%, 0);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        font-size: 30px;
        padding: 5px 10px;
        border-radius: 5px;
        display: none; /* Початково прихований */
      }

      .camera-controls {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 10px;
        z-index: 1001;
      }

      .camera-controls button {
        padding: 0px 10px;
        font-size: 48px;
        cursor: pointer;
        background-color: white;
        border: none;
        border-radius: 5px;
        transition: transform 0.2s ease;
      }

      #capture-video {
        color: red;
      }

      #stop-video {
        color: red;
      }

      @keyframes clickAnimation {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(0.95);
        }
        100% {
          transform: scale(1);
        }
      }

      .camera-controls button:active {
        animation: clickAnimation 0.1s ease;
      }
    </style>

    <div id="formContainer" style="display: none">
      <!-- place for form -->
      <div class="card">
        <div class="card-body">
          <textarea class="form-control" id="newOrderText" rows="2" placeholder="нотатки..."></textarea>
          <div id="choiceDifficult" style="display: none">
            <p class="cardLabel">Складність ремонта:</p>
            <div class="btn-group" role="group" aria-label="Basic example">
              <button type="button" class="btn btn-secondary">простий</button>
              <button type="button" class="btn btn-secondary">середній</button>
              <button type="button" class="btn btn-secondary">складний</button>
            </div>
          </div>
          <div class="input-group" id="choiceExecutor" style="display: none">
            <label for="sotrudnik" class="cardLabel">Призначити виконавця:</label>
            <input
              type="text"
              class="form-control inputFixBrak"
              id="sotrudnik"
              url="/app/autocompleteSotrydnik"
              aria-describedby="basic-addon3"
            />
          </div>

          <div>
            <div id="commandBtns">
              <button type="button" class="btn btn-primary btn" id="cancelInfo">Відмінити</button>
              <button type="button" class="btn btn-primary btn" id="saveInfo">Зберегти</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="historyContainer">
      <!-- history of current repair -->
    </div>
  </div>
</div>

<style>
  .card {
    display: flex;
    flex-direction: row;
    gap: 15px;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 10px;
    max-width: 600px;
    background-color: inherit;
    border: none;
    font-size: 1rem;
  }

  .card-header {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .card-author {
    font-weight: bold;
    color: #8275eb;
  }

  .card-avatar {
    border-radius: 50%;
    background-color: white;
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .card-avatar img {
    width: 100%;
    height: 100%;
    border-radius: 50%;
  }

  .card-body {
    background-color: white;
    border-radius: 0px 12px 12px 12px;
    padding: 5px 10px;
    display: flex;
    flex-direction: column;
    gap: 5px;
    width: min-content;
  }

  .card-info {
    display: flex;
    flex-direction: row;
    gap: 10px;
    background-color: lightgray;
  }

  #choiceDifficult {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    gap: 10px;
  }

  .cardLabel {
    margin: 0;
  }

  .card-text {
    margin-bottom: 0;
    overflow-wrap: anywhere;
  }

  #commandBtns {
    width: 100%;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }

  .select {
    font-weight: bold;
    color: darkred;
  }

  .card-date {
    margin-top: -10px;
    font-size: 0.7em;
    color: darkgrey;
    width: 100%;
    text-align: right;
  }
</style>

<!-- Шаблон картки -->
<script id="card-template" type="text/x-handlebars-template">
  <div class='card'>
    <div class='card-avatar'>
      <img src='/foto/{{avatar}}.jpg' onerror="this.onerror=null;this.src='/img/avatar.png';" alt='avatar' />

    </div>
    <div class='card-body'>
      <div class='card-author'></div>
      <p class='card-text'><span class='card-author'>{{author}}:</span> {{text}}</p>
      <div class='card-date'>{{date}}</div>
    </div>
  </div>
</script>

<script id="formTemplate" type="text/x-handlebars-template">
    <textarea class='form-control' id='newOrderText' rows='2' placeholder='нотатки...'></textarea>
    <div id='choiceDifficult'>
      <p class='cardLabel'>Складність ремонта:</p>
      <div class='btn-group' role='group' aria-label='Basic example'>
        <button type='button' class='btn btn-secondary'>простий</button>
        <button type='button' class='btn btn-secondary'>середній</button>
        <button type='button' class='btn btn-secondary'>складний</button>
      </div>
    </div>
    {{#if isSotrudnik}}
      <div class='input-group' id='groupInputSotrudnik'>
        <label for='sotrudnik' class='cardLabel'>Призначити виконавця:</label>
        <input
          type='text'
          class='form-control inputFixBrak'
          id='sotrudnik'
          url='/app/autocompleteSotrydnik'
          aria-describedby='basic-addon3'
          callbackSelect=''
        />
      </div>
    {{/if}}
    <div>
      <div id='commandBtns'>
        <button type='button' class='btn btn-primary btn' id='cancelInfo'>Відмінити</button>
        <button type='button' class='btn btn-primary btn' id='saveInfo'>Зберегти</button>
      </div>
    </div>
  </div>
</script>

<style>
  #listOrderZakupka {
    position: relative;
    top: -20px;
  }

  .cardOrderZakupka {
    background-color: white;
    border-radius: 10px 10px 10px 10px;
    padding: 10px 10px;
    margin-bottom: 10px;
    font-size: small;
    border: 1px solid #ccc;
  }

  .cardOrderZakupkaTitle {
    text-align: center;
    font-size: larger;
  }

  .cardOrderZakupkaTitle span {
    font-weight: 600;
    color: black;
  }

  .cardOrderZakupkaText {
    border: 1px solid #eee;
    border-radius: 5px;
    padding: 3px;
    background-color: #fbfbfb;
    margin-bottom: 5px;
  }

  .cardOrderZakupkaUser {
    margin-left: 5px;
  }

  .cardOrderZakupkaStatus {
    margin-left: 5px;
  }

  .cardOrderZakupkaSrok {
    margin-left: 5px;
    width: 105px;
    text-align: end;
  }

  .doneOrderZakupka {
    background-color: honeydew;
  }
</style>

<script id="ordersZakupka-template" type="text/x-handlebars-template">
  {{#each this}}
    <div class='cardOrderZakupka {{data.classOrder}}' uid='{{data.uid}}'>

      <div class='cardOrderZakupkaTitle'>Заявка на закупку № <span>{{data.Номер}}</span></div>

      <div class='cardOrderZakupkaAuthor displayFlex'>
        <label>Создал:</label>
        <div class='cardOrderZakupkaUser fontWeight600'>{{data.Сотрудник.Наименование}}</div>
        <div class='cardOrderZakupkaDate marginLeftAuto fontWeight600'>{{data.Дата}}</div>
      </div>

      <p class='cardOrderZakupkaText'>{{data.ТекстЗаявки}}</p>

      <div class='cardOrderZakupkaFooter displayFlex'>
        <div class='cardOrderZakupkaStatusGroup displayFlex'>
          <label>Статус:</label>
          <div class='cardOrderZakupkaStatus fontWeight600'>{{data.СтатусЗаявки}}</div>
        </div>
        <div class='cardOrderZakupkaSrokGroup displayFlex marginLeftAuto'>
          <label>Плановая дата:</label>
          <div class='cardOrderZakupkaSrok fontWeight600'>{{data.ПлановаяДата}}</div>
        </div>
      </div>
    </div>
  {{/each}}
</script>

<style>
  #filesAuthorOrder {
    gap: 15px;
    display: flex;
    flex-wrap: wrap;
  }

  .imgSmall {
    width: 100%;
    /* height: 150px; */
    border: 1px solid #aaa;
  }
</style>

<script id="img-template" type="text/x-handlebars-template">
  {{#each this}}
    <div class='attachedImg'>
      <img src='{{src}}' src-source='{{source}}' class='imgSmall src-source' />
    </div>

  {{/each}}
</script>

<script>
  $(document).ready(function () {
    let tableID = '#ЗаявкаНаРемонт';
    let currentRowJQ;
    $(tableID).data('param', { active: true });

    initTables();
    initInputAutocomplete('#executor');
    initInputAutocomplete('#newOrderStanok');

    // callback при получении данных от сервера по wss
    callbackWSS = async function (data) {
      callbackTable(data);
    };

    addSubscribeWSS('ЗаявкаНаРемонт_all');

    // callback при изменении данных в строке для определения показать или убрать строку
    callbackFilter = function (data, result = true) {
      console.log('callbackFilter', data['СтатусЗаявки']);

      const activeOrders = $(tableID).data('param').active;

      if (activeOrders && data['СтатусЗаявки'] === 'Выполнена') {
        result = false;
      }

      if (!activeOrders && data['СтатусЗаявки'] !== 'Выполнена') {
        result = false;
      }

      if ($('#modal').is(':visible') || $('#formZakupka').is(':visible')) {
        const newUID = data.uid;
        const currentUID = currentRowJQ.data('data').data.uid;
        console.log('newUID currentUID ', newUID, currentUID);
        if (newUID === currentUID) {
          renderOrderPage({ data: data });
        }
      }

      return result;
    };

    // callback перед отрисовкой таблицы
    callbackBeforeDone = function (data) {};

    // callback после отрисовки таблицы
    callbackAfterDone = function (data) {
      console.log('callback after', data['ВариантыСложности']);
      $('#difficultButton').html('');
      $.each(data['ВариантыСложности'], function (index, value) {
        $('#difficultButton').append(`<option value="${value.data['uid']}">${value.data['Наименование']}</option>`);
      });
    };

    // callback после вставки новой пустой строки, перед заполнением данными
    callbackAddNewRow = function (data) {
      console.log('callbackAddNewRow', data);
    };

    // callback после внесения изменений в строку с сервера
    callbackAfterWrite = function (data) {
      console.log('callbackAfterWrite', data.data['Дни']);
      let row = $('#' + data.data['uid']);
      const dateInSecond = new Date(data.data['ПлановаяДатаГотовности']);
      const dateInSeconds = Math.floor(dateInSecond.getTime() / 1000);
      row.find('.planeDate').text(dateInSeconds);

      if (data.data['Дни'] < 1) {
        console.log('dangerColor');
        row.find('.days').addClass('dangerColor');
      }
    };

    callbackSelectStanok = function (data) {
      console.log('callbackSelectStanok', data.fullName);
      setTimeout(() => {
        $('#newOrderStanok').val(data.fullName);
        $('#newOrderStanok').data(data);
      }, 10);
    };

    // клик по кнопке Добавить заявку
    $('#btnAdd').on('click', function (event) {
      console.log('add order click ----');
      $('#newOrderStanok').val('');
      $('#newOrderText').val('');
      $('#attachedFilesForNewOrder').empty();

      clickAnimate(this);

      highlight = false;

      $('#addOrder').show(0);
      $('#main').hide(0);
      $('#newOrderStanok').focus();
      logToServer('Нажата кнопка "Добавить заявку"');

      const data = { operator: true };
      if (stanok.uid !== '') {
        data.stanok = stanok;
      }
    });

    $('#btnDone').on('click', function (event) {
      console.log('btnDone click');
      const activeOrders = !$(tableID).data('param').active;

      $('#btnDone').toggleClass('pressed', !activeOrders);
      $(tableID).data('param', { active: activeOrders });
      abortAllRequests();
      initTable(tableID);
      console.log('state of params ', $(tableID).data('param').active);
    });

    // click on saveOrder
    $('#saveOrder').on('click', function () {
      clickAnimate(this);

      let media = [];
      let names = [];
      $('#attachedFilesForNewOrder')
        .children()
        .each((index, child) => {
          const blob = $(child).children('.source').data('blob');
          const blobPreview = $(child).children('.preview').data('blob');

          let file = { data: blob };
          let filePreview = { data: blobPreview };
          if (blob.type === 'image/jpeg') {
            file.name = index.toString() + '.png';
            filePreview.name = 'p' + index.toString() + '.png';
          } else if (blob.type === 'video/mp4') {
            file.name = index.toString() + '.mp4';
            filePreview.name = 'p' + index.toString() + '.png';
          } else {
            file.name = index.toString() + '.none';
            console.log('unknown type of blob', blob.type, file.name);
          }

          media.push(file);
          media.push(filePreview);
          names.push(file.name);
        });

      const stanokUID = $('#newOrderStanok').data('uid') || '';
      const newOrderText = $('#newOrderText').val();

      let data = {
        stanokUID: stanokUID,
        newOrderText: newOrderText,
        files: names,
      };

      if (stanokUID === '' && newOrderText === '') {
        toastr.error('Укажите станок или текст заявки');
        $('#newOrderStanok').focus();
        return;
      }

      function afterSaveOrder(response) {
        console.log('afterSaveOrder', response);

        $('#addOrder').hide(0);
        $('#main').show(0);
        $('#newOrderStanok').data('uid', '');
        saveFilesToBackend(media, response.uid, response.uid);
      }

      sendDataTo1C(data, 'POST', afterSaveOrder);
      NProgress.start();
    });

    function saveFilesToBackend(media, uid, uidChild) {
      console.log('saveFilesToBackend', media, uid, uidChild);

      media.forEach(element => {
        const patch = `/${uid}/${uidChild}`;
        const reader = new FileReader();
        reader.onloadend = function () {
          $.post(
            '/saveFile',
            JSON.stringify({ file: reader.result, path: patch, name: element.name }),
            function (response) {
              console.log('/saveFile', response);
            },
            'json'
          )
            .fail(function (jqXHR, textStatus, errorThrown) {})
            .always(function () {
              NProgress.done();
            });
        };
        reader.readAsDataURL(element.data);

        // const reader = new FileReader();

        // reader.onloadend = function () {
        //   const data = { file: 'reader.result', path: patch };
        //   const jsonData = JSON.stringify(data);
        //   // $.post('/saveFile', data, function (response) {}, 'json');
        //   fetch(`/saveFile`, { method: 'POST', body: jsonData });
        // };
        // reader.readAsDataURL(element.data);

        console.log('element.data', element.data);

        // fetch(`/saveFile?patch=${patch}`, {
        //   method: 'POST',
        //   body: element.data,
        // })
        //   .then(response => response.json())
        //   .then(data => console.log(data))
        //   .catch(error => console.error('Error:', error));
      });
    }

    // click on cancelOrder
    $('#cancelOrder').on('click', function () {
      clickAnimate(this);
      $('#addOrder').hide(0);

      $('#main').show(0);
    });

    $('.all-work').on('click', function () {
      $('.all-work').switchClass('btn-primary', 'btn-secondary');
      $(this).switchClass('btn-secondary', 'btn-primary', 500);
    });

    $('.mech-el').on('click', function () {
      $(this).toggleClass('btn-primary');
      $(this).toggleClass('btn-secondary');
    });

    var formTemplate = Handlebars.compile($('#formTemplate').html());

    function closeBtnContainer() {
      setTimeout(function () {
        $('#btn-container').css('display', 'none');
      }, 200);
    }

    // click on cancelOrder
    $('#cancelOrder').on('click', function () {
      clickAnimate(this);
      $('#formZakupka').hide();
      $('#main').show();
    });

    $('#btnAddForm').on('click', function () {
      event.stopPropagation();
      if ($('#btn-container').hasClass('showModal')) {
        closeBtnContainer();
      } else {
        $('#btn-container').css('display', 'flex');
        setTimeout(function () {
          $('#btn-container').addClass('showModal');
        }, 10);
      }
    });

    $(document).on('click', function (event) {
      closeBtnContainer();
    });

    ////////////////////////////////////////////////

    // Обновляем таймер обратного отсчета каждую секунду
    const countdown = setInterval(timer, 1000);

    function timer() {
      const strTargetDate = $('#infoDays').attr('date') || '';

      if (strTargetDate === '') {
        $('#infoDays').val('срок не назначен');
        return;
      }

      let targetDate = parseInt(strTargetDate);
      let now = new Date().getTime();

      const data = currentRowJQ.data('data');
      console.log('currentRowJQ', data.data.СтатусЗаявки);
      if (data.data.СтатусЗаявки === 'Выполнена') {
        targetDate = new Date(data.data['ФактическаяДатаГотовности']).getTime();
        now = new Date(data.data['Дата']).getTime();
        $('#labelSrok').text('Выполнено за:');
      } else {
        $('#labelSrok').text('Осталось:');
      }

      const distance = targetDate - now;

      // Вычисляем дни, часы, минуты и секунды
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor(Math.abs(distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor(Math.abs(distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor(Math.abs(distance % (1000 * 60)) / 1000);

      const hoursStr = String(hours).padStart(2, '0');
      const minutesStr = String(minutes).padStart(2, '0');
      const secondsStr = String(seconds).padStart(2, '0');

      $('#infoDays').val(`${days} дней ${hoursStr}:${minutesStr}:${secondsStr}`);

      if (days < 1) {
        $('#infoDays').addClass('dangerColor');
      } else {
        $('#infoDays').removeClass('dangerColor');
      }
    }

    function renderOrderPage(data) {
      console.log('start renderOrderPage', data);

      const uid = data.data.uid;
      const orderNum = data.data['Номер'].slice(-4);
      const date = formatDateTime(data.data['Дата']);
      const stanokNumber = data.data['Станок']['ИнвентарныйНомер'];
      const stanokName = data.data['Станок']['Наименование'];
      const author = data.data['Сотрудник']['Наименование'];
      const description = data.data['Описание'];
      const sotrudnik = data.data['Ответственный'];
      const diagnosticText = data.data['РезультатДиагностики'];
      const orderDone = data.data['РемонтЗавершен'];
      const status = data.data['СтатусЗаявки'];
      const difficult = data.data['Сложность']['uid'];
      const executor = data.data['Ответственный']['Наименование'];

      $('#modal').attr('uid', uid);
      $('#modal').data('data', data);
      $('#orderNum').text(`${orderNum}`);
      $('#infoText').text(`${description}`);
      $('#infoDate').val(`${date}`);
      $('#infoStanok').val(`${stanokNumber} ${stanokName}`);
      $('#infoAuthor').val(`${author}`);
      $('#sotrudnik').val(sotrudnik['Наименование']);
      $('#executor').attr('uid', sotrudnik['uid']);
      $('#infoDiagnosText').val(diagnosticText);
      $('#orderDone').prop('checked', orderDone);
      $('#difficultButton').val(difficult);
      $('#status').val(status);
      $('#executor').val(executor);

      // Заявки на закупку start
      const listOrdersZakupka = data.data['ЗаявкиНаЗакупку'];
      const countZakupka = listOrdersZakupka.length;

      listOrdersZakupka.forEach(function (element) {
        element.data['Номер'] = element.data['Номер'].slice(-4);
        element.data['Дата'] = formatDateTime(element.data['Дата']);
        element.data['ПлановаяДата'] = formatDateTime(element.data['ПлановаяДата']);

        if (element.data['ПлановаяДата'] === '01.01.0001 00:00') {
          element.data['ПлановаяДата'] = '';
        }

        element.data.classOrder = '';

        if (element.data['СтатусЗаявки'] === 'Готово') {
          element.data.classOrder = 'doneOrderZakupka';
        }
      });

      generateFromTemplate('#ordersZakupka-template', listOrdersZakupka, '#listOrderZakupka');

      $('#countOrderZakupka div').text(countZakupka > 0 ? `Заявок ${countZakupka} шт` : 'Нет заявок');
      // Заявки на закупку stop

      // Картинки заявки start
      const listImgZakupka = data.data['Файлы'];
      const imgs = [];

      listImgZakupka.forEach(function (element) {
        console.log('img', element);

        if (element.ИД === uid) {
          //const src = 'https://a7b85a942d4082eb.cdn.express/mediaFiles/363efa8a-3249-11ef-8255-000c29006152/363efa8a-3249-11ef-8255-000c29006152/0.png';
          const pathToStorage = 'https://a7b85a942d4082eb.cdn.express/mediaFiles';
          const source = `${pathToStorage}/${uid}/${element.ИД}/${element.Файл}`;
          const src = `${pathToStorage}/${uid}/${element.ИД}/p${element.Файл.slice(0, 2)}png`;
          imgs.push({ source: source, src: src });
        }
      });

      generateFromTemplate('#img-template', imgs, '#filesAuthorOrder');
      // Картинки заявки stop

      stanokNumber === undefined ? $('#infoStanok').parent().hide() : $('#infoStanok').parent().show();
      description === '' ? $('#infoText').hide() : $('#infoText').show();

      // timer back
      const dateSrok = new Date(data.data['ПлановаяДатаГотовности']).getTime();
      $('#infoDays').attr('date', dateSrok);

      var cardTemplate = Handlebars.compile($('#card-template').html());
      const historyContainer = $('#historyContainer');
      const tasks = data.data['История'];
      console.log('tasks', currentRowJQ.data('data').data['История']);
      historyContainer.text('');
      tasks.forEach(function (task) {
        var cardHtml = cardTemplate({
          avatar: task['Сотрудник']['uid'],
          author: task['Сотрудник']['Наименование'],
          text: task.Текст,
          date: formatDateTime(task.Дата),
        });

        historyContainer.prepend(cardHtml);
      });
    }

    // click on tableRow
    $(tableID).on('click', '.ЗаявкаНаРемонт', function (event) {
      console.log('ЗаявкаНаРемонт click');

      $('#main').hide();
      $('#modal').show();
      window.scrollTo({ top: 0, behavior: 'auto' });

      $('#countOrderZakupka i:first').show();
      $('#countOrderZakupka i:eq(1)').hide();
      $('#listOrderZakupka').hide();

      currentRowJQ = $(this);
      const data = $(this).data('data');

      renderOrderPage(data);
      timer();
    });

    function sendDataTo1C(data, method = 'GET', callback) {
      $.ajax({
        url: '/app/repairOrder',
        type: method,
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (response) {
          console.log('Response:', response);
          if (response.error) {
            toastr.error('Помилка звязку', response['Причина']);
          } else {
            toastr.success('Дані сохранено');
            if (typeof callback === 'function') {
              callback(response);
            }
          }
        },
        error: function (error) {
          console.log('Error:', error);
          toastr.error('Error', error);
        },
      }).always(function () {
        NProgress.done();
        highlight = true;
      });
    }

    $('#executor').on('blur', function () {
      const data = currentRowJQ.data('data');
      data.edited['Ответственный'] = $('#executor').attr('uid');
      console.log('executor', data.edited);
      sendDataTo1C(data, 'PUT');
    });

    // handle select on status
    $('#status').on('change', function () {
      const data = currentRowJQ.data('data');
      data.edited['СтатусЗаявки'] = $(this).val();
      console.log($(this).val());
      sendDataTo1C(data, 'PUT');
    });

    // handle select on status
    $('#difficultButton').on('change', function () {
      const data = currentRowJQ.data('data');
      data.edited['Сложность'] = $(this).val();
      console.log($(this).val());
      sendDataTo1C(data, 'PUT');
    });

    $('#sendComment').on('click', function () {
      clickAnimateColor(this);
      console.log('sendComment', currentRowJQ.data('data'));
      let data = currentRowJQ.data('data');
      data.edited['Комментарий'] = $('#comment').val();
      if ($('#comment').val() === '') {
        return;
      }
      console.log(data.edited);

      $.ajax({
        url: '/app/repairOrder',
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (response) {
          console.log('Response:', response);
          if (response.error) {
            toastr.error('Помилка', response['Причина']);
          } else {
            toastr.success('Данні сохранено');
            $('#comment').val('');
          }
        },
        error: function (error) {
          console.log('Error:', error);
          toastr.error('Error', error);
        },
      });
    });

    // click on button cancelInfo
    $('#cancelInfo').on('click', function () {
      console.log('cancel info');
      clickAnimate(this);
      $('#rowOrderInfo').hide(300);
    });

    // click closeBtn on modal
    $('#closeBtn').on('click', function () {
      console.log('closeModal');
      $('#main').show();
      $('#modal').hide();
    });

    $('#newOrderStanok').autocomplete({
      position: { my: 'left top', at: 'left bottom', collision: 'flip' },
    });

    $('#comment').on('input', function () {
      $(this).css('height', 'auto');
      $(this).css('height', this.scrollHeight + 'px');
    });

    // capture video photo
    let stream;
    let mediaRecorder;
    let recordedChunks = [];

    $('#attachPhoto').click(function () {
      $('#camera-modal').show();
      startCamera();
    });

    $('#capture-photo').click(function () {
      const video = document.getElementById('camera-video');
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const context = canvas.getContext('2d');
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      const dataUrl = canvas.toDataURL('image/png');

      $('<img>').attr('src', dataUrl).addClass('attachedImg').appendTo('#attachedFiles');

      console.log(dataUrl);
    });

    $('#capture-video').click(function () {
      const video = document.getElementById('camera-video');
      mediaRecorder = new MediaRecorder(video.srcObject);
      chunks = [];

      $('#capture-video').hide();
      $('#stop-video').show();

      startTimer();

      mediaRecorder.ondataavailable = function (e) {
        chunks.push(e.data);
      };

      mediaRecorder.onstop = function () {
        stopTimer();
        const blob = new Blob(chunks, { type: 'video/mp4' });
        const videoUrl = URL.createObjectURL(blob);

        $('#attachedFiles').append(
          $('<video>')
            .attr({
              src: videoUrl,
              width: '50',
              height: '50',
              controls: true,
            })
            .addClass('attachedVideo')
        );

        console.log(videoUrl);
      };

      mediaRecorder.start();
    });

    $('#stop-video').click(function () {
      mediaRecorder.stop();
      $('#capture-video').show();
      $('#stop-video').hide();
    });

    $('#close-camera').click(function () {
      clickAnimate(this);
      $('#camera-modal').hide();
      stopCamera();
    });

    function startTimer() {
      $('#video-timer').text('00:00').show();

      let startTime = Date.now();
      timerInterval = setInterval(function () {
        let elapsedTime = Date.now() - startTime;
        let seconds = Math.floor((elapsedTime / 1000) % 60);
        let minutes = Math.floor((elapsedTime / (1000 * 60)) % 60);

        let formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        $('#video-timer').text(formattedTime);
      }, 1000);
    }

    function stopTimer() {
      clearInterval(timerInterval);
      $('#video-timer').hide().text('00:00');
    }

    function startCamera() {
      navigator.mediaDevices
        .getUserMedia({
          video: { facingMode: { exact: 'environment' } },
          audio: false,
        })
        .then(function (mediaStream) {
          stream = mediaStream;
          const video = document.getElementById('camera-video');
          video.srcObject = stream;
          video.play();

          mediaRecorder = new MediaRecorder(stream);
          mediaRecorder.ondataavailable = function (event) {
            if (event.data.size > 0) {
              recordedChunks.push(event.data);
            }
          };

          mediaRecorder.onstop = function () {
            const blob = new Blob(recordedChunks, { type: 'video/webm' });
            recordedChunks = [];
            const url = URL.createObjectURL(blob);
            console.log(url);
          };
        })
        .catch(function (error) {
          console.error('Error accessing media devices.', error);
        });
    }

    function stopCamera() {
      const video = document.getElementById('camera-video');
      video.pause();
      video.srcObject = null;
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    }

    $('#attachPhotoVideoForNewOrder').on('click', function () {
      clickAnimate(this);
      startAttachPhotoVideo(this);
    });
  });
</script>

<!-- Закупка start-->

<style>
  #setPriorityZakupka {
    margin-right: auto;
  }
</style>

<div id="formZakupka" class="applicationForm" style="display: none">
  <div class="applicationTitle">Новая заявка на закупку</div>
  <textarea class="applicationText form-control" id="newZakupkaText" rows="3" placeholder="Текст заявки..."></textarea>
  <div class="input-group" id="orderButtonGroup">
    <button type="button" class="btn btn-secondary btn-lg" id="setPriorityZakupka">Срочно</button>
    <div id="groupButton">
      <button type="button" class="btn btn-secondary btn-lg" id="cancelZakupka">Отмена</button>
      <button type="button" class="btn btn-success btn-lg" id="saveZakupka">Сохранить</button>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    usersAllowToEdit = ['Соболев Андрей', 'Голуб Виталий'];
    function canUserEdit(user, usersAllowToEdit) {
      return usersAllowToEdit.some(name => name === user.name);
    }

    if (canUserEdit(user, usersAllowToEdit)) {
      $('[data-editable="true"]').prop('readonly', false);
      $('[data-editable="true"]').prop('disabled', false);
    } else {
      $('[data-editable="true"]').prop('readonly', true);
      $('[data-editable="true"]').prop('disabled', true);
    }

    $('#btnAddZakupka').on('click', function () {
      $('#newZakupkaText').val('');
      setValid('#textNew', false);

      $('#setPriorityZakupka').removeClass('btn-danger');
      $('#setPriorityZakupka').addClass('btn-secondary');

      $('#modal').hide();
      $('#formZakupka').show();

      $('#newZakupkaText').focus();
    });

    $('#cancelZakupka').on('click', function (event) {
      $('#modal').show();
      $('#formZakupka').hide();
    });

    $('#saveZakupka').on('click', function () {
      console.log('saveZakupka on click');
      clickAnimate(this);
      const zakupkaText = $('#newZakupkaText').val();
      const srochno = $('#setPriorityZakupka').hasClass('btn-danger');
      const currentRow = $('#modal').data('data');

      const data = {
        textNew: zakupkaText,
        srochno: srochno,
        Основание: {
          ТипСсылки: currentRow.data['ТипСсылки'],
          uid: currentRow.data['uid'],
        },
      };

      NProgress.start();
      console.log('data', data);

      requestTo1C('/zakupka', 'POST', data, function (response) {
        console.log('Callback executed with response:', response);
        $('#formZakupka').hide();
        $('#modal').show();
      });
    });

    $('#setPriorityZakupka').on('click', function (event) {
      if ($(this).hasClass('btn-secondary')) {
        $(this).switchClass('btn-secondary', 'btn-danger');
      } else {
        $(this).switchClass('btn-danger', 'btn-secondary');
      }
    });

    $('#countOrderZakupka').on('click', function () {
      clickAnimate(this);
      $('#countOrderZakupka i').toggle();
      $('#listOrderZakupka').toggle();
    });
  });

  $(document).on('click', '.attachedImg', function () {
    mediaviewer(this);
  });
</script>

<!-- Закупка stop-->
