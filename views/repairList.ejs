<style>
  #content {
    max-width: 500px;
    margin: 0 auto;
  }

  thead {
    display: none;
  }

  td {
    height: 0;
  }

  .eye-container {
    position: relative;
  }

  .eye {
    position: absolute;
    bottom: -10px;
    right: 5px;
    display: none;
  }

  .done-container {
    position: relative;
  }

  .done {
    position: absolute;
    bottom: 4px;
    right: 5px;
    display: none;
  }

  #closeBtn {
    position: relative;
  }

  .commandBtn {
    margin-left: auto;
    font-size: xxx-large;
    color: darkgreen;
    line-height: 1em;
  }

  #infoGroup {
    font-size: large;
  }

  .input-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: nowrap;
    gap: 10px;
    margin-bottom: 0.7em !important;
    width: 100%;
  }

  .input-group label {
    margin-bottom: 0;
  }

  .input-group input {
  }

  .form-control {
    font-size: 1em;
    background-color: white !important;
  }

  .form-control:focus {
    box-shadow: none;
  }

  .form-control:focus {
    box-shadow: none;
  }

  #infoTopic {
    border: 1px solid lightgrey;
    width: 100%;
    padding: 5px;
    border-radius: 4px;
    margin: 0;
    background-color: white;
    font-size: large;
    font-family: inherit;
    color: #495057;
    white-space: pre-wrap;
  }

  #infoText {
    border: 1px solid lightgrey;
    width: 100%;
    padding: 5px;
    border-radius: 4px;
    margin: 0;
    background-color: white;
    font-size: large;
    font-family: inherit;
    color: #495057;
    white-space: pre-wrap;
  }

  #workInProvider {
    justify-content: start;
  }

  #workInProvider input {
    width: 1.5em;
    height: 1.5em;
    flex-grow: initial;
  }

  #infoButtonGroup {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    gap: 10px;
  }

  table {
    font-size: 1.7em;
    background-color: inherit;
  }

  table th {
    font-size: 1rem;
  }

  table td {
    border: none;
  }

  mark {
    background: yellow;
    padding: 0;
  }

  .pressed {
    color: darkorange;
  }

  .pressed path {
    fill: orange;
  }

  #btnAdd {
    margin-left: auto;
  }

  .redText {
    color: red;
  }

  .invalid:focus {
    box-shadow: 0px -6px 5px -5px red inset !important;
  }

  .ui-autocomplete {
    box-shadow: 2px 3px 5px #999;
  }
</style>

<div id="addOrder" class="applicationForm" style="display: none">
  <div id="orderTitle" class="applicationTitle">Новая заявка на ремонт</div>
  <input
    type="text"
    minLength="1"
    url="/app/autocompleteStanok"
    class="dataCell form-control"
    placeholder="Cтанок..."
    id="newOrderStanok"
    class="form-control"
    callbackSelect="callbackSelectStanok"
    callbackBlurIfNone="callbackBlurIfNoneStanok"
    class="form-control mr-sm-2"
  />

  <div id="listRepairForStanok">
    <div class="title">Список вже створених по станку заявок:</div>
    <div class="listRepair" id="listRepair"></div>
  </div>

  <textarea
    class="applicationText form-control"
    id="newOrderTopic"
    rows="1"
    placeholder="Тема заявки..."
    maxlength="25"
  ></textarea>
  <textarea
    class="applicationText form-control"
    id="newOrderText"
    rows="3"
    placeholder="Текст заявки (необязательно)..."
  ></textarea>

  <div id="attachedFilesForNewOrder"></div>

  <div class="input-group" id="newOrderButtonGroup">
    <i class="bi bi-camera" id="attachPhotoVideoForNewOrder" elementForAttach="attachedFilesForNewOrder"></i>
    <button type="button" class="btn btn-secondary btn-lg" id="cancelOrder">Отмена</button>
    <button type="button" class="btn btn-success btn-lg" id="saveOrder">Сохранить</button>
  </div>
  <div class="applicationForm disabled-overlay" id="disabledOverlay">
    <div class="loader-text">Завантаження...</div>
    <div class="spinner-border" role="status">
      <span class="sr-only">Loading...</span>
    </div>
  </div>
</div>

<div id="main">
  <div id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <h4 class="titlePage2">Заявки на ремонт</h4>
      <div id="statusMark" class="status">в работе</div>
    </div>

    <div class="commandRow">
      <div class="input-group-search rounded groupSearch" id="groupSearch">
        <input
          type="search"
          id="search"
          class="form-control rounded"
          placeholder="Поиск"
          aria-label="Search"
          aria-describedby="search-addon"
        />
        <span class="input-group-text border-0" id="search-addon">
          <i class="bi bi-search"></i>
        </span>
      </div>

      <div class="btnContainer">
        <div id="sortContainer">
          <img src="img/sort.svg?v=<%= version %>" alt="sort icon" class="commandImg" id="btnSort" />
          <div id="sortList">
            <ul>
              <li id="sortSrok">срок</li>
              <li id="sortStatus">статус</li>
              <li id="sortStanok">станок</li>
              <li id="sortDate">дата</li>
            </ul>
          </div>
        </div>
        <img src="img/check-circle.svg?v=<%= version %>" alt="check icon" class="commandImg commandBtn" id="btnDone" />
        <img src="img/plus-circle.svg?v=<%= version %>" alt="plus icon" class="commandImg commandBtn" id="btnAdd" />
      </div>
    </div>
  </div>

  <style>
    #addOrder {
    }

    .applicationForm {
      position: relative;
      margin: 20px auto 40px auto;
      background-color: aliceblue;
      max-width: 600px;
      min-width: 320px;
      display: flex;
      justify-content: center;
      flex-direction: column;
      padding: 10px;
      gap: 10px;
      border-radius: 0.5rem;
    }

    .applicationForm.disabled-overlay {
      position: absolute;
      top: -20px;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 9999;
      display: none;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }

    .loader-text {
      z-index: 1000;
      color: white;
      font-size: xx-large;
    }

    .loader {
      border: 10px solid #f3f3f3;
      border-top: 10px solid darkgreen;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 2s linear infinite;
      z-index: 10000;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

    .applicationTitle {
      text-align: center;
      font-size: 1.25rem;
      font-weight: bold;
    }

    .repairContainer {
      margin-bottom: 10px;
      font-size: small;
      display: flex;
      margin-bottom: 5px;
      font-size: medium;
      display: flex;
      list-style-type: none;
      border: 1px solid lightgrey;
      border-radius: 5px;
      box-shadow: 2px 3px 5px #999;
      padding: 5px;
      background-color: white;
    }

    #listRepairForStanok {
      display: none;
      padding: 0px 30px;
    }

    #listRepairForStanok .title {
      font-size: small;
      font-weight: bold;
    }

    .listRepair {
    }

    .repairTopic {
    }

    .repairText {
    }

    #newOrderStanok {
      width: 100%;
      font-size: 1.25rem;
      border: 1px solid #ced4da;
      border-radius: 0.25rem;
      padding: 0.375rem 0.75rem;
    }

    #orderButtonGroup {
      display: flex;
      justify-content: flex-end;
      flex-direction: column;
      gap: 10px;
    }

    #newOrderButtonGroup {
      display: flex;
      justify-content: flex-end;
      flex-direction: row;
      gap: 10px;
    }

    #formZakupka #orderButtonGroup {
      flex-direction: column;
    }

    #statusZakupka {
      width: 100%;
      display: flex;
      justify-content: flex-start;
      flex-direction: column;
      gap: 10px;
    }

    #statusZakupka label {
      font-size: 1.25rem;
    }

    #statusZakupka .btn-container {
      display: flex;
      justify-content: space-between;
      gap: 10px;
    }

    .btn-container button {
      flex: 1;
    }

    #groupButton {
      display: flex;
      justify-content: flex-end;
      width: 100%;
      gap: 10px;
    }

    .applicationText {
      font-size: 1.25rem;
      width: 100%;
    }

    #newOrderText {
    }

    #attachPhotoVideoForNewOrder {
      font-size: xxx-large;
      margin-right: auto;
    }

    #attachedFilesForNewOrder {
      gap: 15px;
      display: flex;
      flex-wrap: wrap;
    }
  </style>

  <!-- <table
    id="ЗаявкаНаРемонт"
    name="ЗаявкаНаРемонт"
    url="/app/repairOrder/"
    callbackBeforeInitTable="callbackBeforeDone"
    filter="callbackFilter"
    callbackAfterInitTable="callbackAfterDone"
    addNevRow="callbackAddNewRow"
    callbackAfterWrite="callbackAfterWrite"
    append="up"
    init
    header
    sort="0"
  >
    <tr class="config" style="display: none">
      <td title="ПлановаяДатаГотовности" name="ПлановаяДатаГотовности" style="display: none">
        <div class="dataCell textAlignCenter planeDate"></div>
      </td>
      <td title="Станок" name="Станок" key="ИнвентарныйНомер" style="width: 17%">
        <div class="dataCell textAlignCenter"></div>
      </td>
      <td title="Тема" name="Тема" class="order eye-container" style="width: 71%">
        <div class="dataCell topic"></div>
        <i class="bi bi-eye-slash eye"></i>
        <i class="bi bi-check done"></i>
      </td>
      <td title="Дни" name="Дни" style="width: 12%">
        <div class="dataCell textAlignCenter days"></div>
      </td>
    </tr>

    <tr id="stageRow" style="display: none">
      <td colspan="7" style="background-color: aliceblue">
        <div id="stageForm"></div>
      </td>
    </tr>
  </table> -->

  <table
    id="ЗаявкаНаРемонт"
    name="ЗаявкаНаРемонт"
    url="/app/repairOrder/"
    callbackBeforeInitTable="callbackBeforeDone"
    filter="callbackFilter"
    callbackAfterInitTable="callbackAfterDone"
    addNevRow="callbackAddNewRow"
    callbackAfterWrite="callbackAfterWrite"
    append="up"
    init
    header
    sort="0"
  >
    <tr class="config" style="display: none">
      <td title="ПлановаяДатаГотовности" name="ПлановаяДатаГотовности" style="display: none" headerClass="srokSort">
        <div class="dataCell textAlignCenter planeDate"></div>
      </td>
      <td title="Станок" name="Станок" key="ИнвентарныйНомер" style="display: none" headerClass="stanokSort">
        <div class="dataCell textAlignCenter"></div>
      </td>
      <td title="СтатусЗаявки" name="СтатусЗаявки" style="display: none" headerClass="statusSort">
        <div class="dataCell textAlignCenter"></div>
      </td>
      <td title="Дата" name="Дата" style="display: none" id="dateSort" headerClass="dateSort">
        <div class="dataCell textAlignCenter createDate"></div>
      </td>
      <td title="Тема" name="Тема" class="order" style="width: 60%"></td>
    </tr>

    <tr id="stageRow" style="display: none">
      <td colspan="7" style="background-color: aliceblue">
        <div id="stageForm"></div>
      </td>
    </tr>
  </table>
</div>

<!-- Form for zakupka -->

<!-- modal styles -->
<style>
  #modal {
  }

  .showModal {
    display: flex;
  }

  .close-modal-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    border: none;
    cursor: pointer;
    text-align: center;
    line-height: 25px;
    border: none;
    background-color: white;
    font-size: 2em;
  }
</style>

<!-- order info -->
<style>
  #controlPanel {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }

  #btn-container {
    flex-direction: column;
    justify-content: flex-start;
    width: 300px;
    display: none;
    margin-bottom: 20px;
    position: absolute;
    z-index: 1;
    top: 85%;
    opacity: 0;
    gap: 2px;

    transition: opacity 0.2s;
  }

  #btn-container.showModal {
    opacity: 1;
  }

  #doneGroup {
    justify-content: space-between;
  }

  #doneGroup label {
    width: 70%;
  }

  #doneGroup input {
    width: 12% !important;
  }

  .form-group {
    display: flex;
    align-items: center;
  }

  .form-group label {
    margin-bottom: 0;
    transition: 2s;
    width: 40%;
  }

  #modal .form-control {
    width: 60%;
    margin-left: auto;
  }

  #btnAddZakupka {
    font-size: xxx-large;
    color: darkgreen;
    margin-left: auto;
    line-height: normal;
    height: 1em;
  }

  #countOrderZakupka {
    border: 1px solid #ced4da;
    padding: 0.375rem 0.75rem;
    background-color: white !important;
    border-radius: 0.25rem;
    width: 150px;
    text-align: center;
    display: flex;
    cursor: default;
    user-select: none;
  }

  .marginLeftAuto {
    margin-left: auto;
  }
</style>

<div id="modal" style="display: none">
  <div class="commandPanel">
    <h4 class="titlePage2">Заявка на ремонт</h4>
    <h4 id="orderNum" class="titlePage2">0001</h4>
    <i id="closeBtn" class="bi bi-x-circle commandBtn"></i>
  </div>

  <div id="infoGroup">
    <div class="form-group">
      <pre id="infoTopic">Тема</pre>
    </div>

    <div class="form-group">
      <pre id="infoText">Текст заявки</pre>
    </div>

    <div class="form-group" id="filesAuthorOrder"></div>

    <div class="form-group">
      <label>Дата:</label>
      <input type="text" readonly class="form-control" id="infoDate" />
    </div>

    <div class="form-group">
      <label>Автор:</label>
      <input type="text" readonly class="form-control" id="infoAuthor" />
    </div>

    <div class="form-group">
      <label>Станок:</label>
      <!-- <input type="text" readonly class="form-control" id="infoStanok" /> -->
      <input
        type="text"
        class="form-control"
        id="infoStanok"
        url="/app/autocompleteStanok"
        aria-describedby="basic-addon3"
        data-editable="true"
        readonly
      />
    </div>

    <div class="form-group">
      <label id="labelSrok">Срок:</label>
      <input type="text" readonly class="form-control" id="infoDays" />
    </div>

    <div class="form-group">
      <label for="difficultButton">Сложность:</label>
      <select id="difficultButton" class="form-control" disabled data-editable="true"></select>
    </div>

    <div class="form-group">
      <label for="executor">Исполнитель:</label>
      <input
        type="text"
        class="form-control"
        id="executor"
        url="/app/autocompleteSotrydnik"
        aria-describedby="basic-addon3"
        data-editable="true"
        readonly
      />
    </div>

    <div class="form-group">
      <label for="status">Статус:</label>
      <select id="status" class="form-control">
        <option value="Ремонт">Ремонт</option>
        <option value="Выполнена">Выполнена</option>
      </select>
    </div>

    <div class="form-group" id="doneGroup">
      <label for="done">Ремонт подтвержден:</label>
      <input
        type="checkbox"
        class="form-control"
        id="done"
        aria-describedby="basic-addon3"
        data-editable="true"
        readonly
      />
    </div>

    <div class="form-group">
      <label>Закупка:</label>
      <div id="countOrderZakupka">
        <div>Нет заявок</div>
        <i class="bi bi-caret-down-fill marginLeftAuto"></i>
        <i class="bi bi-caret-up-fill marginLeftAuto" style="display: none"></i>
      </div>
      <i class="bi bi-plus-circle" id="btnAddZakupka"></i>
    </div>

    <div id="listOrderZakupka" style="display: none"></div>
  </div>

  <div id="modal-content">
    <style>
      #actions {
        font-size: xxx-large;
        color: darkgreen;
        margin-right: 0px;
        margin-top: auto;
        /* width: 74px; */
        line-height: 55px;
        padding: 10px 10px 5px 0;
        align-self: flex-end;
      }

      #sendComment {
      }

      #attachPhoto {
      }

      #commentForm {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-color: white;
        border-radius: 12px 12px 12px 12px !important;
        margin-bottom: 10px !important;
      }

      #comment {
        border: none;
        font-size: large;
        resize: none;
        border-radius: 12px;
        align-self: flex-start;
      }

      #attachedFiles {
        display: none;
        gap: 5px;
        padding: 5px;
      }

      .attachedImg {
        width: 46px;
        height: 60px;
        position: relative;
        border: 1px solid;
        align-items: center;
        display: flex;
        margin-bottom: 1rem;
        flex: 0 0 auto;
      }

      #showViews {
        display: none;
        margin: 0 auto 10px;
        font-size: 0.8rem;
        border-radius: 5px;
        padding: 3px 10px;
        background-color: white;
        text-align: center;
        width: fit-content;
      }
    </style>

    <div class="input-group" id="commentForm">
      <textarea class="form-control" id="comment" rows="1" placeholder="написать сообщение..."></textarea>
      <div id="actions">
        <i class="bi bi-send" id="sendComment"></i>
        <!-- <i class="bi bi-camera" id="attachPhoto"></i> -->
      </div>
      <input type="file" id="file-input" accept="image/*,video/*" capture multiple style="display: none" />
    </div>
    <div id="attachedFiles"></div>

    <div class="camera-modal" id="camera-modal" style="display: none">
      <video id="camera-video" autoplay></video>
      <span id="video-timer">00:00</span>
      <div class="camera-controls">
        <button id="capture-photo"><i class="bi bi-camera"></i></button>
        <button id="capture-video"><i class="bi bi-record-fill"></i></button>
        <button id="stop-video" style="display: none"><i class="bi bi-stop-fill"></i></button>
        <button id="close-camera"><i class="bi bi-x-square"></i></button>
      </div>
    </div>

    <style>
      .camera-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      }

      #camera-video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      #video-timer {
        position: absolute;
        top: 10px;
        left: 50%;
        transform: translate(-50%, 0);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        font-size: 30px;
        padding: 5px 10px;
        border-radius: 5px;
        display: none; /* Початково прихований */
      }

      .camera-controls {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 10px;
        z-index: 1001;
      }

      .camera-controls button {
        padding: 0px 10px;
        font-size: 48px;
        cursor: pointer;
        background-color: white;
        border: none;
        border-radius: 5px;
        transition: transform 0.2s ease;
      }

      #capture-video {
        color: red;
      }

      #stop-video {
        color: red;
      }

      @keyframes clickAnimation {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(0.95);
        }
        100% {
          transform: scale(1);
        }
      }

      .camera-controls button:active {
        animation: clickAnimation 0.1s ease;
      }
    </style>

    <div id="formContainer" style="display: none">
      <!-- place for form -->
      <div class="card">
        <div class="card-body">
          <textarea class="form-control" id="newOrderText" rows="2" placeholder="нотатки..."></textarea>
          <div id="choiceDifficult" style="display: none">
            <p class="cardLabel">Складність ремонта:</p>
            <div class="btn-group" role="group" aria-label="Basic example">
              <button type="button" class="btn btn-secondary">простий</button>
              <button type="button" class="btn btn-secondary">середній</button>
              <button type="button" class="btn btn-secondary">складний</button>
            </div>
          </div>
          <div class="input-group" id="choiceExecutor" style="display: none">
            <label for="sotrudnik" class="cardLabel">Призначити виконавця:</label>
            <input
              type="text"
              class="form-control inputFixBrak"
              id="sotrudnik"
              url="/app/autocompleteSotrydnik"
              aria-describedby="basic-addon3"
            />
          </div>

          <div>
            <div id="commandBtns">
              <button type="button" class="btn btn-primary btn" id="cancelInfo">Відмінити</button>
              <button type="button" class="btn btn-primary btn" id="saveInfo">Зберегти</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="showViews">показать просмотры</div>
    <div id="avatarViewContainer"></div>
    <div id="historyContainer">
      <!-- history of current repair -->
    </div>
  </div>
</div>

<!-- card styles -->
<style>
  .card {
    display: flex;
    flex-direction: row;
    gap: 10px;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 10px;
    max-width: 600px;
    background-color: inherit;
    border: none;
    font-size: 1rem;
  }

  .view-card {
    font-size: 0.7rem;
    margin-bottom: 5px;
    display: none;
  }

  .view-card .card-body {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }

  .view-card .card-head {
    width: 70%;
    align-items: center;
    gap: 10px;
  }

  .view-card .card-author {
    width: 60%;
  }

  .view-card .card-text {
    color: darkgrey;
    font-size: 0.7em;
  }

  .view-card .card-date {
    font-size: 0.7em;
    color: darkgrey;
  }

  .card-author,
  .card-author:link,
  .card-author:visited,
  .card-author:hover,
  .card-author:active {
    font-weight: bold;
    color: #8275eb;
    font-size: 0.9em;
    text-decoration: none;
    display: inline-block;
  }

  .card-avatar {
    border-radius: 50%;
    background-color: white;
    width: 25px;
    height: 25px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .card-avatar.selected {
    border: 2px solid darkgreen;
  }

  .card-avatar img {
    width: 100%;
    height: 100%;
    border-radius: 50%;
  }

  .card-body {
    background-color: white;
    border-radius: 0px 12px 12px 12px;
    padding: 5px 10px;
    display: flex;
    flex-direction: column;
    gap: 5px;
    width: min-content;
  }

  .card-head {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .card-text {
    margin-bottom: 0;
    overflow-wrap: anywhere;
  }

  .card-date {
    font-size: 0.7em;
    color: darkgrey;
    text-align: right;
  }

  #choiceDifficult {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    gap: 10px;
  }

  .cardLabel {
    margin: 0;
  }

  #commandBtns {
    width: 100%;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }

  .select {
    font-weight: bold;
    color: darkred;
  }
</style>

<!-- Шаблон картки -->
<script id="card-template" type="text/x-handlebars-template">
  {{#each this}}
    <div class='card {{additionalClass}}' uid='{{avatar}}'>
      <div class='card-avatar' uid='{{avatar}}'>
        <img
          src='https://a7b85a942d4082eb.cdn.express/mediaFiles/foto/{{avatar}}.jpg'
          onerror="this.onerror=null;this.src='/img/avatar.png';"
          alt='avatar'
        />

      </div>
      <div class='card-body'>
        <div class='card-head'>
          <a href='tel:{{tel}}' class='card-author'>{{author}}</a>
          <div class='card-date'>{{date}}</div>
        </div>

        <p class='card-text'>{{text}}</p>

      </div>
    </div>
  {{/each}}
</script>

<style>
  #avatarViewContainer {
    display: none;
    justify-content: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 5px;
    overflow: auto;
    padding-bottom: 5px;
  }

  #avatarViewContainer .card-avatar {
    width: 40px;
    height: 40px;
  }
</style>

<script id="viewAvatar-template" type="text/x-handlebars-template">
  {{#each this}}
    <div class='card-avatar' uid='{{this}}'>
      <img
        src='https://a7b85a942d4082eb.cdn.express/mediaFiles/foto/{{this}}.jpg'
        onerror="this.onerror=null;this.src='/img/avatar.png';"
        alt='avatar'
      />
    </div>

  {{/each}}
</script>

<!-- template for tile -->
<style>
  .tileContainer {
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: white;
    margin-bottom: 8px;
    padding: 5px 5px 1px 5px;
    box-shadow: 2px 3px 5px #999;
  }

  .separateDateLine {
    display: flex;

    font-size: small;
    justify-content: center;
    align-items: center;
    margin-bottom: 5px;
    margin-top: 10px;
  }

  .visible {
    display: flex;
  }

  .backgroundYellow {
    background-color: lightyellow;
  }

  .tile1row {
    display: flex;
    font-size: large;
    margin-bottom: 1px;
  }

  .tileStanok {
    color: darkgreen;
    font-weight: bold;
    margin-right: 10px;
  }

  .tileTopic {
  }

  .tile2row {
    display: flex;
    justify-content: space-between;
    font-size: small;
    color: darkgray;
  }

  .tileStatus {
    width: 30%;
  }

  .tileZakupka {
    width: 20%;
  }
  .tileTimer {
    width: 40%;
    text-align: end;
  }

  .tileEye {
    width: 10%;
    text-align: end;
  }
</style>

<script id="tileTemplate" type="text/x-handlebars-template">
  <div class='tileContainer {{doneClass}}'>

    <div class='tile1row'>
      <div class='tileStanok {{stanokClass}}'>{{stanok}}</div>
      <div class='tileTopic'>{{topic}}</div>
    </div>
    <div class='tile2row'>
      <div class='tileStatus'>{{status}}</div>
      <div class='tileZakupka'><i class='bi bi-cart3'></i> {{readyZakupka}}/{{sumZakupka}}</div>
      <div class='tileTimer {{timerClass}}' date='{{dateSrok}}'>{{timer}}</div>

      <div class='tileEye'>
        {{#if showEyeIcon}}
          <i class='bi bi-eye-slash'></i>
        {{/if}}
      </div>
    </div>
    <!-- <div class='tile3row'>{{date}}</div> -->
  </div>
</script>

<!-- template for order -->
<script id="formTemplate" type="text/x-handlebars-template">
    <textarea class='form-control' id='newOrderText' rows='2' placeholder='нотатки...'></textarea>
    <div id='choiceDifficult'>
      <p class='cardLabel'>Складність ремонта:</p>
      <div class='btn-group' role='group' aria-label='Basic example'>
        <button type='button' class='btn btn-secondary'>простий</button>
        <button type='button' class='btn btn-secondary'>середній</button>
        <button type='button' class='btn btn-secondary'>складний</button>
      </div>
    </div>
    {{#if isSotrudnik}}
      <div class='input-group' id='groupInputSotrudnik'>
        <label for='sotrudnik' class='cardLabel'>Призначити виконавця:</label>
        <input
          type='text'
          class='form-control inputFixBrak'
          id='sotrudnik'
          url='/app/autocompleteSotrydnik'
          aria-describedby='basic-addon3'
          callbackSelect=''
        />
      </div>
    {{/if}}
    <div>
      <div id='commandBtns'>
        <button type='button' class='btn btn-primary btn' id='cancelInfo'>Відмінити</button>
        <button type='button' class='btn btn-primary btn' id='saveInfo'>Зберегти</button>
      </div>
    </div>
  </div>
</script>

<style>
  #listOrderZakupka {
    position: relative;
    top: 0px;
  }

  .cardOrderZakupka {
    background-color: white;
    border-radius: 10px 10px 10px 10px;
    padding: 10px 10px;
    margin-bottom: 10px;
    font-size: small;
    border: 1px solid #ccc;
  }

  .cardOrderZakupkaTitle {
    text-align: center;
    font-size: larger;
  }

  .cardOrderZakupkaTitle span {
    font-weight: 600;
    color: black;
  }

  .cardOrderZakupkaText {
    border: 1px solid #eee;
    border-radius: 5px;
    padding: 3px;
    background-color: #fbfbfb;
    margin-bottom: 5px;
  }

  .cardOrderZakupkaUser {
    margin-left: 5px;
  }

  .cardOrderZakupkaStatus {
    margin-left: 5px;
  }

  .cardOrderZakupkaSrok {
    margin-left: 5px;
    width: 105px;
    text-align: end;
  }

  .doneOrderZakupka {
    background-color: honeydew;
  }
</style>

<script id="ordersZakupka-template" type="text/x-handlebars-template">
  {{#each this}}
    <div class='cardOrderZakupka {{data.classOrder}}' uid='{{data.uid}}'>

      <div class='cardOrderZakupkaTitle'>Заявка на закупку № <span>{{data.Номер}}</span></div>

      <div class='cardOrderZakupkaAuthor displayFlex'>
        <label>Создал:</label>
        <div class='cardOrderZakupkaUser fontWeight600'>{{data.Сотрудник.Наименование}}</div>
        <div class='cardOrderZakupkaDate marginLeftAuto fontWeight600'>{{data.Дата}}</div>
      </div>

      <p class='cardOrderZakupkaText'>{{data.ТекстЗаявки}}</p>

      <div class='cardOrderZakupkaFooter displayFlex'>
        <div class='cardOrderZakupkaStatusGroup displayFlex'>
          <label>Статус:</label>
          <div class='cardOrderZakupkaStatus fontWeight600'>{{data.СтатусЗаявки}}</div>
        </div>
        <div class='cardOrderZakupkaSrokGroup displayFlex marginLeftAuto'>
          <label>Плановая дата:</label>
          <div class='cardOrderZakupkaSrok fontWeight600'>{{data.ПлановаяДата}}</div>
        </div>
      </div>
    </div>
  {{/each}}
</script>

<style>
  #filesAuthorOrder {
    gap: 5px;
    display: flex;
    flex-wrap: wrap;
    margin-bottom: 0;
    flex-wrap: nowrap;
    overflow-x: auto;
  }

  .imgSmall {
    width: 100%;
    /* height: 150px; */
    border: 1px solid #aaa;
  }
</style>

<script id="img-template" type="text/x-handlebars-template">
  {{#each this}}
    <div class='attachedImg'>
      <img src='{{src}}' src-source='{{source}}' class='imgSmall src-source' />
    </div>
  {{/each}}
</script>

<script>
  $(document).ready(function () {
    let tableID = '#ЗаявкаНаРемонт';
    let currentRowJQ;
    $(tableID).data('param', { active: true });
    history.pushState({ page: 'repair' }, '', '');

    initTables();
    initInputAutocomplete('#executor');
    initInputAutocomplete('#newOrderStanok');
    initInputAutocomplete('#infoStanok');

    // callback при получении данных от сервера по wss
    callbackWSS = async function (data) {
      callbackTable(data);
    };

    addSubscribeWSS('ЗаявкаНаРемонт_all');

    // callback при изменении данных в строке для определения показать или убрать строку
    callbackFilter = function (data, result = true) {
      console.log('callbackFilter', data['СтатусЗаявки']);

      const activeOrders = $(tableID).data('param').active;

      if (activeOrders && data['РемонтЗавершен']) {
        result = false;
      }

      if (!activeOrders && !data['РемонтЗавершен']) {
        result = false;
      }

      if ($('#modal').is(':visible') || $('#formZakupka').is(':visible')) {
        const newUID = data.uid;
        const currentUID = currentRowJQ.data('data').data.uid;
        console.log('newUID currentUID ', newUID, currentUID);
        if (newUID === currentUID) {
          renderOrderPage({ data: data });
        }
      }

      return result;
    };

    // callback перед отрисовкой таблицы
    callbackBeforeDone = function (data) {};

    let formatter = new Intl.DateTimeFormat('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });

    let timeFormatter = new Intl.DateTimeFormat('uk-UA', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    });

    // callback после отрисовки таблицы
    callbackAfterDone = function (data) {
      console.log('callback afterDone', data.list);
      $('#difficultButton').html('');
      $.each(data['ВариантыСложности'], function (index, value) {
        $('#difficultButton').append(`<option value="${value.data['uid']}">${value.data['Наименование']}</option>`);
      });
      const sort = $('#ЗаявкаНаРемонт').attr('sort');
      $(tableID).attr('initDone', true);
    };

    // callback после вставки новой пустой строки, перед заполнением данными
    callbackAddNewRow = function (data) {
      console.log('callbackAddNewRow', data);
    };

    function renderOrderTile() {}

    function makeDateSeparator() {
      let previousDate = '0';
      let previousShift = '';
      const sortValue = $(tableID).attr('sort');
      const sortDirection = $(tableID).attr('sortDirection');
      const directOrderSort = sortDirection === '0';
      let nameKeyDate = 'Дата';
      const param = $(tableID).data('param');
      const isActiveOrder = param.active;
      if (!isActiveOrder) {
        nameKeyDate = 'ФактическаяДатаГотовности';
      }
      $('.separateDateLine').remove();
      if (sortValue !== '3') return;

      let dataForSeparate = [];
      $('#ЗаявкаНаРемонт tr.rowData').each(function (index, el) {
        console.log('el', el);

        const data = $(el).data('data');
        console.log('data', data);

        data.element = el;
        dataForSeparate.push(data);
      });

      dataForSeparate.forEach(el => {
        let date = new Date(el.data[nameKeyDate]);
        let currentDate = formatter.format(date);
        let currentHour = date.getHours();
        let currentShift = '';

        if (currentHour >= 7 && currentHour <= 18) {
          currentShift = 'Денна зміна';
        } else {
          currentShift = 'Нічна зміна';

          if (currentHour < 7) {
            date.getDay - 1;
            date.setDate(date.getDate() - 1);
            currentDate = formatter.format(date);
          }
        }

        let tileContainer = $(el.element).find('.tileContainer');
        delete el.element;

        function addSeparation(currentDate, currentShift) {
          let separateData = `${currentDate} - ${currentShift}`;
          const dateLine = $(`<div class="separateDateLine visible">${separateData}</div>`);
          tileContainer.before(dateLine);
        }

        if (currentShift !== previousShift || currentDate !== previousDate) {
          addSeparation(currentDate, currentShift);
        }

        previousDate = currentDate;
        previousShift = currentShift;
      });
    }

    function makeDaysDanger(data, row, isOrderInWork, days) {
      const datePlanned = new Date(data.data['ПлановаяДатаГотовности']);
      const dateStart = new Date(data.data['Дата']);
      const dateFinish = new Date(data.data['ФактическаяДатаГотовности']);
      let overdue = false;
      if (isOrderInWork) {
        console.log('В роботі');
        dateInSeconds = Math.floor(datePlanned.getTime() / 1000);
        overdue = days < 1;
      } else {
        console.log('Виконані замовлення');
        dateInSeconds = Math.floor((dateFinish.getTime() * -1) / 1000);
        daysForDone = Math.floor((dateFinish.getTime() - dateStart.getTime()) / (1000 * 60 * 60 * 24));
        row.find('.days').text(daysForDone);
        console.log('datePlanned', datePlanned);
        console.log('dateFinish', dateFinish);
        console.log('Тема', data.data['Тема']);
        overdue = dateFinish > datePlanned;
      }
      row.find('.planeDate').text(dateInSeconds);
      if (overdue) {
        row.find('.days').addClass('dangerColor');
      }
    }

    function rewriteDateInSeconds(data, row) {
      const dateStart = new Date(data.data['Дата']);
      dateInSeconds = Math.floor(dateStart.getTime() / 1000);
      row.find('.createDate').text(dateInSeconds);
    }

    function hasNewChanges(data, row) {
      const myRow = data.data['Просмотры'].find(row => {
        console.log('row.Сотрудник.uid, user.uid ', row.Сотрудник.uid, user.uid);
        return row.Сотрудник.uid === user.uid;
      });
      console.log('myRow', myRow, typeof myRow, myRow ? true : false);
      if (myRow !== undefined) {
        dateOfLastView = myRow.ДатаПросмотра;
      } else {
        dateOfLastView = '1970-01-01T00:00:00 000000';
      }
      console.log('dateOfLastView', dateOfLastView);
      const dateOflastActivity = data.data['ДатаПоследнейАктивности'];
      if (dateOfLastView < dateOflastActivity) {
        return true;
      } else {
        return false;
      }
    }

    function isOrderDone(data, row) {
      let doneStatus = data.data['СтатусЗаявки'];

      if (doneStatus === 'Выполнена') {
        console.log('статус заявки', doneStatus);
        row.find('.done').show();
      } else {
        row.find('.done').hide();
      }
      return doneStatus === 'Выполнена';
    }

    // callback после внесения изменений в строку с сервера
    callbackAfterWrite = function (data) {
      console.log('callbackAfterWrite', data.data['Дни']);
      console.log('$(#dateSort).attr(name)', $('#dateSort').attr('name'));
      let row = $('#' + data.data['uid']);
      let td = row.find('td.order');
      const isOrderInWork = $(tableID).data('param').active;
      let dateInSeconds = 0;
      const stanokUID = data.data.Станок.uid || '';
      $(row).attr('stanok', stanokUID);

      const stanok = data.data['Станок']['ИнвентарныйНомер'] || '';
      let stanokClass = '';
      if (stanok === '') stanokClass = 'displayNone';
      const topic = data.data['Тема'];
      const status = data.data['СтатусЗаявки'];
      const days = data.data['Дни'];
      let timerClass = data.data['РемонтЗавершен'] ? '' : 'activeTimer';
      let dateSrok = new Date(data.data['ПлановаяДатаГотовности']).getTime();
      let dateStart = new Date(data.data['Дата']);
      let dateStr = data.data['Дата'];
      let now = new Date().getTime();
      if (data.data['РемонтЗавершен']) {
        now = new Date(data.data['Дата']).getTime();

        planeDate = new Date(data.data['ПлановаяДатаГотовности']).getTime();
        dateSrok = new Date(data.data['ФактическаяДатаГотовности']).getTime();
        if (planeDate < dateSrok) timerClass = 'dangerColor';
      }
      let sumZakupka = data.data['ЗаявкиНаЗакупку'].length || '0';
      readyStatusZakupka = ['На складе', 'Выдано', 'Готово', 'Отменена'];
      let readyZakupka =
        data.data['ЗаявкиНаЗакупку'].filter(zakupka => {
          if (readyStatusZakupka.includes(zakupka.data['СтатусЗаявки'])) {
          } else {
          }
          return readyStatusZakupka.includes(zakupka.data['СтатусЗаявки']);
        }).length || '0';
      console.log('readyZakupka', readyZakupka);

      const distance = dateSrok - now;
      const strTimer = secondToStringTime(distance);
      const doneClass = isOrderDone(data, row) ? 'backgroundYellow' : '';

      const templateData = {
        doneClass: doneClass,
        stanok: stanok,
        stanokClass: stanokClass,
        topic: topic,
        sumZakupka: sumZakupka,
        readyZakupka: readyZakupka,
        status: status,
        dateSrok: dateSrok,
        timerClass: timerClass,
        timer: strTimer,
        showEyeIcon: hasNewChanges(data, row),
        dateStart: dateStart,
        date: dateStr,
      };

      generateFromTemplate('#tileTemplate', templateData, td);
      makeDaysDanger(data, row, isOrderInWork, days);
      rewriteDateInSeconds(data, row);
      if ($(tableID).attr('initDone')) {
        makeDateSeparator();
      }
    };

    function getDataOfRepair(rows, currentStanokUID) {
      let dataOfRepair = [];
      rows.each(function () {
        const rowStanokUID = $(this).attr('stanok');
        if (rowStanokUID === currentStanokUID) {
          dataOfRepair.push($(this).data('data').data);
        }
      });
      return dataOfRepair;
    }

    function renderListOfRepairStanok(data, containerId) {
      const container = $(`#${containerId}`);
      container.empty();
      const title = $('<did>').addClass('title').text('Список уже созданых по станку заявок:');

      if (data.length > 0) {
        container.show();
        container.append(title);
        data.forEach((el, index) => {
          const ulContainer = $('<ul>').addClass('repairContainer');
          const liElement = $('<li>').addClass('repairTopic').html(`${el.Тема}. ${el.Описание} `);
          ulContainer.append(liElement);
          container.append(ulContainer);
        });
      }
    }

    callbackSelectStanok = function (data) {
      console.log('callbackSelectStanok', data);
      setTimeout(() => {
        $('#newOrderStanok').val(data.fullName);
        $('#newOrderStanok').data(data);

        const rows = $('#ЗаявкаНаРемонт tbody tr');
        const stanokUID = data.uid;
        const dataOfReair = getDataOfRepair(rows, stanokUID);
        renderListOfRepairStanok(dataOfReair, 'listRepairForStanok');
      }, 10);
    };

    callbackBlurIfNoneStanok = function (data) {
      $('#listRepairForStanok').hide();
    };

    function openFormOrder() {
      $('#addOrder').show(0);
      $('#main').hide(0);
      $('#listRepair').empty();
    }

    function closeFormOrder() {
      $('#addOrder').hide(0);
      $('#main').show(0);
    }

    function clearForm(arrayOfFields) {}

    // клик по кнопке Добавить заявку
    $('#btnAdd').on('click', function (event) {
      console.log('add order click ----');
      clickAnimate(this);
      $('#newOrderStanok').val('');
      $('#newOrderTopic').val('');
      $('#newOrderText').val('');
      $('#attachedFilesForNewOrder').empty();
      history.pushState({ page: 'newOrder' }, '', '');

      // $('#disabledOverlay').css('display', 'flex');

      clickAnimate(this);

      highlight = false;

      openFormOrder();
      $('#newOrderStanok').focus();
      logToServer('Нажата кнопка "Добавить заявку"');

      const data = { operator: true };
      if (stanok.uid !== '') {
        data.stanok = stanok;
      }
    });

    $('#btnDone').on('click', function (event) {
      console.log('btnDone click');
      clickAnimate(this);
      const activeOrders = !$(tableID).data('param').active;
      newAttr = activeOrders ? 'Дата' : 'ФактическаяДатаГотовности';
      /*       $('#dateSort').attr('name', newAttr);
      $('#dateSort').attr('dddd', newAttr); */

      /*       let element = document.getElementById('dateSort');
      element.setAttribute('name', newAttr); */

      const tableJQ = $(tableID);
      tableJQ.children('tbody').children('.config').children('#dateSort').attr('name', newAttr);

      let newSrc = activeOrders
        ? `img/check-circle.svg?v=<%= version %>`
        : `img/check-circle-done.svg?v=<%= version %>`;
      $('#btnDone').attr('src', newSrc);
      $('#btnDone').toggleClass('pressed', !activeOrders);
      $(tableID).data('param', { active: activeOrders });
      $('#statusMark').text(activeOrders ? 'в работе' : 'выполненные');
      $('#statusMark').toggleClass('pressed', !activeOrders);
      abortAllRequests();
      initTable(tableID);
      console.log('state of params ', $(tableID).data('param').active);
    });

    $('#search').on('input', function () {
      console.log('search');
      let searchTerms = $(this).val().split(' ').filter(Boolean);
      $('.rowData').each(function () {
        console.log('row', this);

        let found = true;
        let elements = $(this)
          .find('.tileStanok, .tileTopic')
          .map(function () {
            return { el: $(this) };
          })
          .get();

        elements.forEach(element => {
          element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');
          console.log('element.text', element.text);
        });

        if (searchTerms.length > 0) {
          found = searchTerms.every(term => {
            const regex = new RegExp(`(${term})`, 'gi');
            return elements.some(element => {
              if (element.text.match(regex)) {
                element.text = element.text.replace(regex, '<mark>$1</mark>');
                console.log('element.text', element.text);
                return true;
              }
              return false;
            });
          });
        }

        $(this).find('.tileContainer').parent().toggleClass('hide', !found);
        console.log('parent', $(this).find('.tileContainer').parent());

        elements.forEach(element => {
          element.el.html(element.text);
        });

        console.log('elements', elements);
      });
    });

    $('#btnSort').on('click', function () {
      let sortList = $('#sortList');
      clickAnimate(this);

      sortList.toggle();
      sortList.toggleClass('active');
    });

    $(document).on('click', function () {
      if (!$(event.target).closest('#sortList').length && !$(event.target).is('#btnSort')) {
        $('#sortList').hide();
        $('#sortList').removeClass('active');
      }
    });

    function sortHandler(selector, sortValue, defaultSortDirection) {
      $(selector).on('click', function () {
        console.log('sortHandler', this);

        const sort = $(tableID).attr('sort') || '0';
        let sortDirection = $(tableID).attr('sortDirection') || defaultSortDirection;
        if (sort === sortValue) {
          sortDirection = sortDirection === '0' ? '1' : '0';
        } else {
          sortDirection = defaultSortDirection;
        }

        $(tableID).attr('sort', sortValue);
        $(tableID).attr('sortDirection', sortDirection);

        $(tableID).trigger('sorton', [[[parseInt(sortValue), parseInt(sortDirection)]]]);
        // $(`th.${sortClass}`).click();
        $('#sortList').hide();
        $('#sortList').toggleClass('active');
        makeDateSeparator();
      });
    }
    sortHandler('#sortSrok', '0', '0');
    sortHandler('#sortStatus', '2', '0');
    sortHandler('#sortStanok', '1', '0');
    sortHandler('#sortDate', '3', '1');

    // click on saveOrder
    $('#saveOrder').on('click', function () {
      clickAnimate(this);

      const stanokUID = $('#newOrderStanok').data('uid') || '';
      const newOrderTopic = $('#newOrderTopic').val();
      const newOrderText = $('#newOrderText').val();

      if (newOrderTopic === '') {
        toastr.error('Укажите тему заявки');
        $('#newOrderTopic').focus();
        return;
      }

      $('#disabledOverlay').css('display', 'flex');

      NProgress.start();
      $('#saveOrder').attr('disabled', true);

      let media = [];
      let names = [];
      $('#attachedFilesForNewOrder')
        .children()
        .each((index, child) => {
          const blob = $(child).children('.source').data('blob');
          const blobPreview = $(child).children('.preview').data('blob');

          let file = { data: blob };
          let filePreview = { data: blobPreview };
          if (blob.type === 'image/jpeg') {
            file.name = index.toString() + '.png';
            filePreview.name = 'p' + index.toString() + '.png';
          } else if (blob.type === 'video/mp4') {
            file.name = index.toString() + '.mp4';
            filePreview.name = 'p' + index.toString() + '.png';
          } else {
            file.name = index.toString() + '.none';
            console.log('unknown type of blob', blob.type, file.name);
          }

          media.push(file);
          media.push(filePreview);
          names.push(file.name);
        });

      let data = {
        stanokUID: stanokUID,
        newOrderTopic: newOrderTopic,
        newOrderText: newOrderText,
        files: names,
      };

      sendDataTo1C(data, 'POST', async function (response) {
        await saveFilesToStorage(media, response.uid, response.uid);
        closeFormOrder();
        $('#newOrderStanok').data('uid', '');
        $('#saveOrder').attr('disabled', false);
        $('#disabledOverlay').hide();
      });
      NProgress.done();
      document.body.style.overflow = '';
      $('#listRepairForStanok').hide();
    });

    // click on cancelOrder
    $('#cancelOrder').on('click', function () {
      clickAnimate(this);
      $('#listRepairForStanok').hide();
      $('#formZakupka').hide();
      $('#main').show();
      closeFormOrder();
    });

    var formTemplate = Handlebars.compile($('#formTemplate').html());

    function closeBtnContainer() {
      setTimeout(function () {
        $('#btn-container').css('display', 'none');
      }, 200);
    }

    $(document).on('click', function (event) {
      closeBtnContainer();
    });

    ////////////////////////////////////////////////

    // Обновляем таймер обратного отсчета каждую секунду
    // const countdown = setInterval(timer, 1000);
    callbackFuncSecondInterval = function () {
      timer();
      timerForList();
    };

    function timerForList() {
      const now = new Date().getTime();

      $('.activeTimer').each((ind, element) => {
        const date = parseInt($(element).attr('date'));
        const distance = date - now;
        if (distance < 24 * 60 * 60 * 1000) {
          if (!$(element).hasClass('dangerColor')) {
            console.log('has not class danger');
            $(element).addClass('dangerColor');
          }
        }
        const strTimer = secondToStringTime(distance);
        $(element).text(strTimer);
      });
    }

    function secondToStringTime(seconds) {
      const days = Math.floor(seconds / (1000 * 60 * 60 * 24));
      const hours = Math.floor(Math.abs(seconds % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor(Math.abs(seconds % (1000 * 60 * 60)) / (1000 * 60));
      const sec = Math.floor(Math.abs(seconds % (1000 * 60)) / 1000);

      const hoursStr = String(hours).padStart(2, '0');
      const minutesStr = String(minutes).padStart(2, '0');
      const secondsStr = String(sec).padStart(2, '0');

      return `${days} д ${hoursStr}:${minutesStr}:${secondsStr}`;
    }

    function timer() {
      const strTargetDate = $('#infoDays').attr('date') || '';

      if (strTargetDate === '') {
        $('#infoDays').val('срок не назначен');
        return;
      }

      let targetDate = parseInt(strTargetDate);
      let now = new Date().getTime();
      let days;
      let plannedData;
      const data = currentRowJQ.data('data');
      const isRepairFinished = data.data.РемонтЗавершен;

      if (isRepairFinished) {
        targetDate = new Date(data.data['ФактическаяДатаГотовности']).getTime();
        plannedData = new Date(data.data['ПлановаяДатаГотовности']).getTime();
        finishDate = new Date(data.data['ФактическаяДатаГотовности']).getTime();
        now = new Date(data.data['Дата']).getTime();
        days = Math.floor((plannedData - now) / 86400000);

        $('#labelSrok').text('Выполнено за:');
      } else {
        $('#labelSrok').text('Осталось:');
      }

      const distance = targetDate - now;

      $('#infoDays').val(secondToStringTime(distance));

      if (isRepairFinished) {
        if (plannedData < finishDate) {
          $('#infoDays').addClass('dangerColor');
        } else {
          $('#infoDays').removeClass('dangerColor');
        }
      } else {
        if (days < 1) {
          $('#infoDays').addClass('dangerColor');
        } else {
          $('#infoDays').removeClass('dangerColor');
        }
      }
    }

    function hideAvatarViewContainer() {
      console.log('hideAvatarViewContainer');
      $('#avatarViewContainer').hide();
      $('.view-card').css('display', 'none');
      $('#showViews').text('показать просмотры');
    }

    function renderOrderPage(data) {
      console.log('start renderOrderPage', data);
      hideAvatarViewContainer();

      const uid = data.data.uid;
      const orderNum = data.data['Номер'].slice(-4);
      const date = formatDateTime(data.data['Дата']);
      const stanokNumber = data.data['Станок']['ИнвентарныйНомер'];
      const stanokName = data.data['Станок']['Наименование'];
      const author = data.data['Сотрудник']['Наименование'];
      const topic = data.data['Тема'];
      const description = data.data['Описание'];
      const sotrudnik = data.data['Ответственный'];
      const diagnosticText = data.data['РезультатДиагностики'];
      const orderDone = data.data['РемонтЗавершен'];
      const status = data.data['СтатусЗаявки'];
      const difficult = data.data['Сложность']['uid'];
      const executor = data.data['Ответственный']['Наименование'];
      const done = data.data['РемонтЗавершен'];

      $('#modal').attr('uid', uid);
      $('#modal').data('data', data);
      $('#orderNum').text(`${orderNum}`);
      $('#infoTopic').text(`${topic}`);
      $('#infoText').text(`${description}`);
      $('#infoDate').val(`${date}`);
      $('#infoStanok').val(`${stanokNumber} ${stanokName}`);
      $('#infoAuthor').val(`${author}`);
      $('#sotrudnik').val(sotrudnik['Наименование']);
      $('#executor').attr('uid', sotrudnik['uid']);
      $('#infoDiagnosText').val(diagnosticText);
      $('#orderDone').prop('checked', orderDone);
      $('#difficultButton').val(difficult);
      $('#status').val(status);
      console.log('done ------------', done);
      $('#status').prop('disabled', done);
      $('#executor').val(executor);
      $('#done').prop('checked', done);

      // Заявки на закупку start
      const listOrdersZakupka = data.data['ЗаявкиНаЗакупку'];
      const countZakupka = listOrdersZakupka.length;

      listOrdersZakupka.forEach(function (element) {
        element.data['Номер'] = element.data['Номер'].slice(-4);
        element.data['Дата'] = formatDateTime(element.data['Дата']);
        element.data['ПлановаяДата'] = formatDateTime(element.data['ПлановаяДата']);

        if (element.data['ПлановаяДата'] === '01.01.0001 00:00') {
          element.data['ПлановаяДата'] = '';
        }

        element.data.classOrder = '';

        if (element.data['СтатусЗаявки'] === 'Готово') {
          element.data.classOrder = 'doneOrderZakupka';
        }
      });

      generateFromTemplate('#ordersZakupka-template', listOrdersZakupka, '#listOrderZakupka');

      $('#countOrderZakupka div').text(countZakupka > 0 ? `Заявок ${countZakupka} шт` : 'Нет заявок');
      // Заявки на закупку stop

      // Картинки заявки start
      const listImgZakupka = data.data['Файлы'];
      const imgs = [];

      listImgZakupka.forEach(function (element) {
        if (element.ИД === uid) {
          //const src = 'https://a7b85a942d4082eb.cdn.express/mediaFiles/363efa8a-3249-11ef-8255-000c29006152/363efa8a-3249-11ef-8255-000c29006152/0.png';
          const pathToStorage = 'https://a7b85a942d4082eb.cdn.express/mediaFiles';
          const source = `${pathToStorage}/${uid}/${element.ИД}/${element.Файл}`;
          const src = `${pathToStorage}/${uid}/${element.ИД}/p${element.Файл.slice(0, -3)}png`;
          console.log('src ', src);
          imgs.push({ source: source, src: src });
        }
      });

      generateFromTemplate('#img-template', imgs, '#filesAuthorOrder');
      // Картинки заявки stop

      stanokNumber === undefined ? $('#infoStanok').parent().hide() : $('#infoStanok').parent().show();
      topic === '' ? $('#infoTopic').hide() : $('#infoTopic').show();
      if (description === '') {
        $('#infoText').hide();
        $('#infoText').closest('.form-group').hide();
      } else {
        $('#infoText').show();
      }

      // timer back
      const dateSrok = new Date(data.data['ПлановаяДатаГотовности']).getTime();
      $('#infoDays').attr('date', dateSrok);
      timer();

      const cardsData = data.data['История'];
      const cards = [];

      cardsData.forEach(element => {
        const card = {
          additionalClass: element.Просмотр ? 'view-card' : '',
          text: element.Текст,
          date: formatDateTime(element.Дата),
          avatar: element['Сотрудник']['uid'],
          author: element['Сотрудник']['Наименование'],
          tel: element['Сотрудник']['ОсновнойНомерТелефона'],
        };

        if (element.Просмотр) {
          if (user.uid === element['Сотрудник']['uid']) {
            return;
          }
        }

        cards.push(card);
      });

      generateFromTemplate('#card-template', cards.reverse(), '#historyContainer');

      const uniqueUids = Array.from(new Set(cardsData.map(entry => entry.Сотрудник.uid)));
      let uniqueUidsWithoutMe = uniqueUids.filter(item => item !== user.uid);
      // uniqueUidsWithoutMe.push('btnAllUsers');
      // for (let i = 0; i < 14; i++) {
      //   uniqueUids.push('f9c18a95-123c-11ed-81c1-000c29006152');
      // }

      generateFromTemplate('#viewAvatar-template', uniqueUidsWithoutMe, '#avatarViewContainer');
      // const btnAllUsers = $('.card-avatar[uid="btnAllUsers"]').find('img');
      // btnAllUsers.attr('src', '/img/allUsers.png');
      // btnAllUsers.parent().addClass('selected');
    }

    // click on tableRow
    $(tableID).on('click', '.ЗаявкаНаРемонт', function (event) {
      console.log('ЗаявкаНаРемонт click');

      openOrder();
      window.scrollTo({ top: 0, behavior: 'auto' });

      $('#countOrderZakupka i:first').show();
      $('#countOrderZakupka i:eq(1)').hide();
      $('#listOrderZakupka').hide();

      currentRowJQ = $(this);
      const data = $(this).data('data');
      console.log('open order data:', data);
      renderOrderPage(data);
      universalRequest('/app/repairOrder', 'PATCH', data);

      history.pushState({ page: 'order', uid: data.data.uid }, '', '');

      timer();
    });

    function openOrder() {
      $('#main').hide();
      $('#modal').show();
    }

    function closeOrder() {
      $('#main').show();
      $('#modal').hide();
    }

    function closeAll() {
      $('#modal').hide();
      $('#addOrder').hide();
      $('#formZakupka').hide();
      $('#listRepairForStanok').hide();
      $('#main').show();
    }

    window.addEventListener('popstate', handlePopState);

    function handlePopState(event) {
      const state = event.state;
      console.log('handlePopState state=', state);
      if (state) {
        switch (state.page) {
          case 'newOrder':
            console.log('newOrder');
            closeAll();
            openFormOrder();
            break;
          case 'order':
            console.log('order');
            closeAll();
            openOrder();
            break;
          case 'formZakupka':
            console.log('formZakupka');
            closeAll();
            addZakupka();
            break;
          case 'repair':
            console.log('repair');
            closeAll();

            break;
          case 'someOtherState':
            break;
          default:
            console.log('default');
            closeAll();
            break;
        }
      } else {
        console.log('else');
        closeAll();
      }
    }

    function sendDataTo1C(data, method = 'GET', callback) {
      universalRequest(
        '/app/repairOrder',
        method,
        data,
        {},
        function onSuccess(response) {
          console.log('Success callback:', response);
          if (response.error) {
            toastr.error('Помилка звязку', response['Причина']);
          } else {
            toastr.success('Дані сохранено');
            if (typeof callback === 'function') {
              callback(response);
            }
          }
        },
        function onError(error) {
          console.log('Error callback:', error);
          toastr.error('Error', error);
        },
        function onComplete() {
          console.log('Request completed');
        }
      );
    }

    function putDataTo1C(fieldId, fieldName) {
      $(`${fieldId}`).on('blur', function () {
        const data = currentRowJQ.data('data');
        data.edited[`${fieldName}`] = $(`${fieldId}`).attr('uid');
        console.log(fieldName, data.edited);
        console.log('putDataTo1C data=', data);
        sendDataTo1C(data, 'PUT');
      });
    }

    putDataTo1C('#infoStanok', 'Станок');

    // putDataTo1C('#executor', 'Ответственный');
    // putDataTo1C('#status', 'СтатусЗаявки');
    // putDataTo1C('#difficultButton', 'Сложность');
    // putDataTo1C('#sendComment', 'Комментарий');

    $('#executor').on('blur', function () {
      const data = currentRowJQ.data('data');
      data.edited['Ответственный'] = $('#executor').attr('uid');
      console.log('executor', data.edited);
      sendDataTo1C(data, 'PUT');
    });

    $('#status').on('change', function () {
      const data = currentRowJQ.data('data');
      data.edited['СтатусЗаявки'] = $(this).val();
      console.log($(this).val());
      sendDataTo1C(data, 'PUT');
    });

    $('#done').on('change', function () {
      const data = currentRowJQ.data('data');
      const isChecked = $(this).is(':checked');
      // if (data.data['СтатусЗаявки'] === 'Ремонт' && value) {
      //   toastr.error('Поменяйте статус на "Выполнен"');
      //   $('#done').prop('checked', false);
      //   return;
      // }

      if (!$(this).is(':checked')) {
      }
      data.edited['РемонтЗавершен'] = $(this).is(':checked');
      // data.edited['СтатусЗаявки'] = isChecked ? 'Выполнена' : 'Ремонт';
      console.log('checkbox ремонт завершен: ', $(this).val());
      sendDataTo1C(data, 'PUT');
    });

    $('#difficultButton').on('change', function () {
      const data = currentRowJQ.data('data');
      data.edited['Сложность'] = $(this).val();
      console.log($(this).val());
      sendDataTo1C(data, 'PUT');
    });

    $('#sendComment').on('click', function () {
      clickAnimateColor(this);
      console.log('sendComment', currentRowJQ.data('data'));
      let data = currentRowJQ.data('data');
      data.edited['Комментарий'] = $('#comment').val();
      if ($('#comment').val() === '') {
        return;
      }
      console.log(data.edited);

      sendDataTo1C(data, 'PUT');
      $('#comment').val('');

      //   $.ajax({
      //     url: '/app/repairOrder',
      //     type: 'PUT',
      //     contentType: 'application/json',
      //     data: JSON.stringify(data),
      //     success: function (response) {
      //       console.log('Response:', response);
      //       if (response.error) {
      //         toastr.error('Помилка', response['Причина']);
      //       } else {
      //         toastr.success('Данні сохранено');
      //         $('#comment').val('');
      //       }
      //     },
      //     error: function (error) {
      //       console.log('Error:', error);
      //       toastr.error('Error', error);
      //     },
      //   });
    });

    // click on button cancelInfo
    $('#cancelInfo').on('click', function () {
      console.log('cancel info');
      clickAnimate(this);
      $('#rowOrderInfo').hide(300);
    });

    // click closeBtn on modal
    $('#closeBtn').on('click', function () {
      console.log('closeModal');
      $('#main').show();
      $('#modal').hide();
    });

    $('#newOrderStanok').autocomplete({
      position: { my: 'left top', at: 'left bottom', collision: 'flip' },
    });

    $('#comment').on('input', function () {
      $(this).css('height', 'auto');
      $(this).css('height', this.scrollHeight + 'px');
    });

    $('#attachPhotoVideoForNewOrder').on('click', function () {
      clickAnimate(this);
      startAttachPhotoVideo(this);
    });
  });
</script>

<!-- Закупка start-->

<style>
  #setPriorityZakupka {
    margin-right: auto;
  }
</style>

<div id="formZakupka" class="applicationForm" style="display: none">
  <div class="applicationTitle">Новая заявка на закупку</div>
  <textarea class="applicationText form-control" id="newZakupkaText" rows="3" placeholder="Текст заявки..."></textarea>

  <div class="form-group" id="orderButtonGroup">
    <!-- <button type="button" class="btn btn-secondary btn-lg" id="setPriorityZakupka">Срочно</button> -->
    <div id="statusZakupka">
      <label class="form-label">Приоритет:</label>
      <div class="btn-container">
        <input type="hidden" id="priority" name="priority" value="Нормально" />
        <button type="button" class="btn btn-secondary" id="srochno" data-priority="Срочно">Срочно</button>
        <button type="button" class="btn btn-secondary" id="now" data-priority="На сейчас">На сейчас</button>
      </div>
    </div>

    <div id="groupButton">
      <button type="button" class="btn btn-secondary btn-lg" id="cancelZakupka">Отмена</button>
      <button type="button" class="btn btn-success btn-lg" id="saveZakupka">Сохранить</button>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    usersAllowToEdit = ['Соболев Андрей', 'Голуб Виталий'];
    function canUserEdit(user, usersAllowToEdit) {
      return usersAllowToEdit.some(name => name === user.name);
    }

    if (canUserEdit(user, usersAllowToEdit)) {
      $('[data-editable="true"]').prop('readonly', false);
      $('[data-editable="true"]').prop('disabled', false);
    } else {
      $('[data-editable="true"]').prop('readonly', true);
      $('[data-editable="true"]').prop('disabled', true);
    }

    const usersCanShowViews = ['Голуб Виталий'];
    console.log('canUserEdit', canUserEdit(user, usersCanShowViews));
    if (canUserEdit(user, usersCanShowViews)) {
      $('#showViews').show();
    }

    $('#showViews').on('click', function () {
      const button = $(this);
      const viewsVisible = $('.view-card').is(':visible');

      if (viewsVisible) {
        $('#avatarViewContainer').hide();
        $('.view-card').css('display', 'none');
        $('#showViews').text('показать просмотры');
      } else {
        $('#avatarViewContainer').css('display', 'flex');
        $('.view-card').css('display', 'flex');
        button.text('скрыть просмотры');
      }
    });

    $('#avatarViewContainer').on('click', '.card-avatar', function () {
      clickAnimate(this);
      let uid = $(this).attr('uid');
      console.log('this user', this);

      if ($(this).hasClass('selected')) {
        uid = '';
        $('.view-card').css('display', 'flex');
        $(`.card-avatar`).removeClass('selected');
      } else {
        $(`#historyContainer .view-card`).show();
        $(`#historyContainer .view-card[uid]:not([uid="${uid}"])`).hide();
        $(`#avatarViewContainer .card-avatar[uid]:not([uid="${uid}"])`).removeClass('selected');
        $(`.card-avatar`).removeClass('selected');
        $(`.card-avatar[uid="${uid}"]`).addClass('selected');
      }
      // $(`#historyContainer .view-card`).css('display', 'flex');
      // $(`.card-avatar`).removeClass('selected');

      console.log('elements for show', $('.view-card'));
      // console.log($(`#historyContainer .view-card[uid]:not([uid="${uid}"])`));
    });

    function addZakupka() {
      $('#modal').hide();
      $('#formZakupka').show();
    }

    $('#btnAddZakupka').on('click', function () {
      $('#newZakupkaText').val('');
      setValid('#textNew', false);
      let priority = '';

      $('#setPriorityZakupka').removeClass('btn-danger');
      $('#setPriorityZakupka').addClass('btn-secondary');
      $('#statusZakupka .btn').removeClass('btn-danger active').addClass('btn-secondary');
      statusZakupka = '';

      addZakupka();
      history.pushState({ page: 'formZakupka' }, '', '');
      $('#newZakupkaText').focus();
    });

    $('#cancelZakupka').on('click', function (event) {
      $('#modal').show();
      $('#formZakupka').hide();
    });

    function toggleStatusButtons(element) {
      if (element.hasClass('active')) {
        priority = 'Нормально';
        element.removeClass('active btn-danger').addClass('btn-secondary');
        console.log('has class active');
      } else {
        $('#statusZakupka .btn').removeClass('btn-danger active').addClass('btn-secondary');
        $(element).removeClass('btn-secondary').addClass('btn-danger active');
        console.log('dont has class active');
      }

      console.log(element);
    }

    let priority = 'Нормально';
    $('#srochno').on('click', () => {
      priority = 'Срочно';
      toggleStatusButtons($('#srochno'));
    });
    $('#now').on('click', () => {
      priority = 'НаСейчас';
      toggleStatusButtons($('#now'));
    });

    $('#saveZakupka').on('click', function () {
      console.log('saveZakupka on click');
      clickAnimate(this);
      const zakupkaText = $('#newZakupkaText').val();
      const srochno = $('#setPriorityZakupka').hasClass('btn-danger');
      const currentRow = $('#modal').data('data');

      const data = {
        textNew: zakupkaText,
        priority: priority,
        srochno: false,
        Основание: {
          ТипСсылки: currentRow.data['ТипСсылки'],
          uid: currentRow.data['uid'],
        },
      };

      NProgress.start();
      console.log('data', data);
      console.log('statusZakupka', statusZakupka);

      requestTo1C('/zakupka', 'POST', data, function (response) {
        console.log('Callback executed with response:', response);
        $('#formZakupka').hide();
        $('#modal').show();
      });
      priority = 'Нормально';
    });

    $('#setPriorityZakupka').on('click', function (event) {
      if ($(this).hasClass('btn-secondary')) {
        $(this).switchClass('btn-secondary', 'btn-danger');
      } else {
        $(this).switchClass('btn-danger', 'btn-secondary');
      }
    });

    $('#countOrderZakupka').on('click', function () {
      clickAnimate(this);
      $('#countOrderZakupka i').toggle();
      $('#listOrderZakupka').toggle();
    });

    $(document).on('click', '.deleteBtn', function (event) {
      event.stopPropagation();
      deleteMeParent(this);
    });

    $(document).on('click', '.attachedImg', function () {
      mediaviewer(this);
    });

    // window.addEventListener('edgeSwipe', function () {
    //   console.log('Глобальна подія swipeEvent відбулася!');
    //   $('#main').show();
    //   $('#modal').hide();
    // });
  });
</script>

<!-- Закупка stop-->
