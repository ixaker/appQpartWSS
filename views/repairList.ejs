<style>
  .card-title {
  }
  #orderInfo {
  }

  .titlePage {
    font-size: 3.7em;
  }

  #closeBtn {
    margin-left: auto;
    margin-right: 10px;
    font-size: xxx-large;
    color: darkgreen;
    line-height: 1em;
  }

  #infoGroup {
    font-size: large;
  }

  .input-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: nowrap;
    gap: 10px;
    margin-bottom: 0.7em !important;
    width: 100%;
  }

  .input-group label {
    margin-bottom: 0;
  }

  .input-group input {
  }

  .form-control {
    font-size: 1em;
    background-color: white !important;
  }

  .form-control:focus {
    box-shadow: none;
  }

  .form-control:focus  {
    box-shadow: none;
  }

  #infoDate {
  }

  #infoStanok {
  }

  #infoAuthor {
  }

  #infoText {
    border: 1px solid lightgrey;
    width: 100%;
    padding: 5px;
    border-radius: 4px;
    margin: 0;
    background-color: white;
  }
  #infoOrderText {
  }

  #sotrudnik {
  }
  #infoDiagnosText {
  }

  #infoDifficult {
  }

  #workInProvider {
    justify-content: start;
  }

  #workInProvider input {
    width: 1.5em;
    height: 1.5em;
    flex-grow: initial;
  }

  #infoDone {
  }

  #infoButtonGroup {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    gap: 10px;
  }

  #cancelInfo {
  }

  #saveInfo {
  }

  table {
    font-size: 1.7em;
  }

  table th {
    font-size: 1rem;
  }

  table td {
    padding: 5px;
    line-height: 2.5em;
  }
  #commandPanel {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 20px;
    margin-bottom: 10px;
    flex-wrap: wrap;
  }

  #btnAdd {
    margin-left: auto;
    margin-right: 10px;
  }

  .groupSearch {
    width: auto;
    border: 1px solid #aaa;
    background-color: #fff;
    display: flex;
    align-items: center;
    flex-grow: 2;
    font-size: 1em;
    max-width: 240px;
    margin-left: auto;
  }

  .groupSearch:focus-within {
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }

  #search {
    border: none;
    line-height: 100%;
    height: 100%;
    padding-right: 0;
  }
  #searchInput {
    box-shadow: none;
  }

  #search:focus {
    box-shadow: none;
  }

  #search-addon {
    background-color: #fff;
  }

  #addOrder {
    margin: 20px auto 40px auto;
    background-color: aliceblue;
    max-width: 600px;
    min-width: 320px;
    display: flex;
    justify-content: center;
    flex-direction: column;
    padding: 10px;
    gap: 10px;
    border-radius: 0.5rem;
  }

  #orderTitle {
    text-align: center;
    font-size: 1.25rem;
    font-weight: bold;
  }

  #newOrderStanok {
    width: 100%;
    font-size: 1.25rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    padding: 0.375rem 0.75rem;
  }

  #orderButtonGroup {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }

  #newOrderText {
    font-size: 1.25rem;
    width: 100%;
  }

  .groupSearch input {
    border: none;
  }

  .invalid:focus {
    box-shadow: 0px -6px 5px -5px red inset !important;
  }

  .ui-autocomplete {
    box-shadow: 2px 3px 5px #999;
  }
</style>

<div id="main">
  <div id="commandPanel">
    <h4 class="titlePage">Заявки на ремонт</h4>
    <i class="bi bi-plus-circle" id="btnAdd"></i>
  </div>

  <div id="addOrder" style="display: none">
    <div id="orderTitle">Новая заявка на ремонт</div>

    <input
      type="text"
      minLength="1"
      url="/app/autocompleteStanok"
      class="dataCell form-control"
      placeholder="Cтанок..."
      id="newOrderStanok"
      class="form-control"
      callbackSelect="callbackSelectStanok"
      class="form-control mr-sm-2"
    />

    <textarea class="form-control" id="newOrderText" rows="3" placeholder="Текст заявки..."></textarea>

    <div class="input-group" id="orderButtonGroup">
      <button type="button" class="btn btn-secondary btn-lg" id="cancelOrder">Отмена</button>
      <button type="button" class="btn btn-success btn-lg" id="saveOrder">Сохранить</button>
    </div>
  </div>

  <table
    id="ЗаявкаНаРемонт"
    name="ЗаявкаНаРемонт"
    url="/app/repairOrder"
    callbackBeforeInitTable="callbackBeforeDone"
    filter="callbackFilter"
    callbackAfterInitTable="callbackAfterDone"
    addNevRow="callbackAddNewRow"
    callbackAfterWrite="callbackAfterWrite"
    append="up"
    init
    header
  >
    <tr class="config" style="display: none">
      <td title="Дни" name="Дни" style="width: 10%">
        <div class="dataCell textAlignCenter"></div>
      </td>
      <td title="Станок" name="Станок" key="ИнвентарныйНомер" style="width: 15%">
        <div class="dataCell textAlignCenter"></div>
      </td>
      <td title="Описание" name="Описание" style="width: 48%">
        <div class="dataCell"></div>
      </td>
      <td title="Статус" name="СтатусЗаявки" style="width: 22%">
        <div class="dataCell"></div>
      </td>
      
    </tr>

    <tr id="stageRow" style="display: none">
      <td colspan="7" style="background-color: aliceblue">
        <div id="stageForm"></div>
      </td>
    </tr>
  </table>
</div>

<style>
  #modal {
    width: 100%;
    max-width: 600px;
    margin: auto;
    padding: 0 10px;
  }

  .showModal {
    display: flex;
  }

  .close-modal-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    border: none;
    cursor: pointer;
    text-align: center;
    line-height: 25px;
    border: none;
    background-color: white;
    font-size: 2em;
  }
</style>

<style>
  #controlPanel {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }
  #btnAddForm {
    margin: 0 auto;
    font-size: xxx-large;
    color: #007431;
  }

  #btn-container {
    flex-direction: column;
    justify-content: flex-start;
    width: 300px;
    display: none;
    margin-bottom: 20px;
    position: absolute;
    z-index: 1;
    top: 85%;
    opacity: 0;
    gap: 2px;

    transition: opacity 0.2s;
  }

  #btn-container.showModal {
    opacity: 1;
  }

  .card {
    padding: 0px 5px 0px 5px;
    margin-bottom: 10px;
    border-radius: 0px 12px 12px 12px;
    max-width: 600px;
    background-color: white;
    border: none;
    font-size: 1rem;
  }

  .card-header {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .card-author {
    font-weight: bold;
    color: #8275eb;
  }

  .card-body {
    padding: 5px;
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .card-info {
    display: flex;
    flex-direction: row;
    gap: 10px;
    background-color: lightgray;
  }

  #choiceDifficult {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    gap: 10px;
  }

  .cardLabel {
    margin: 0;
  }

  .card-text {
    margin-bottom: 0;
  }

  #commandBtns {
    width: 100%;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }

  .select {
    font-weight: bold;
    color: darkred;
  }

  .card-date {
    margin-top: -10px;
    font-size: 0.7em;
    color: darkgrey;
    width: 100%;
    text-align: right;
  }

  .form-group {
    display: flex;
    align-items: center;
  }

  .form-group label {
    margin-bottom: 0;
  }

  .form-control {
    width: 70%;
    margin-left: auto;
  }

  #executor {
    width: fit-content;
  }


</style>

<div id="modal" style="display: none">
  <div id="commandPanel">
    <h4 class="titlePage">Заявка на ремонт</h4>
    <i id="closeBtn" class="bi bi-x-circle"></i>
  </div>

  <div id="infoGroup">
    <div class="form-group">
      <pre id="infoText">Текст заявки</pre>
    </div>

    <div class="form-group">
      <label >Дата:</label>
      <input type="text" readonly class="form-control" id="infoDate"></input>
    </div>
    
    <div class="form-group">
      <label >Автор:</label>
      <input type="text" readonly class="form-control" id="infoAuthor"></input>
    </div>

    <div class="form-group">
      <label>Станок:</label>
      <input type="text" readonly class="form-control" id="infoStanok"></input>
    </div>

    <div class="form-group">
      <label>Срок:</label>
      <input type="text" readonly class="form-control" id="infoDays"></input>
    </div>
    
    <div class="form-group">
      <label for="difficultButton">Сложность:</label>
      <select id="difficultButton" class="form-control">
        
      </select>
    </div>

    

    <div class="form-group">
      <label for="status">Статус</label>
      <select id="status" class="form-control">
        <option value="Диагностика">Диагностика</option>
        <option value="Ремонт">Ремонт</option>
        <option value="Выполнена">Выполнена</option>
      </select>
    </div>
    
  </div>

  <div id="modal-content">
    <!-- <div id="controlPanel">
        <i class="bi bi-plus-circle" id="btnAddForm"></i>
        <div id="btn-container" class="btn-container">
          <button type="button" class="btn btn-primary btn" id="createZakupka">Створити заявку на закупку</button>
          <button type="button" class="btn btn-primary btn" id="repairDone">Ремонт завершено</button>
          <button type="button" class="btn btn-primary btn" id="repairConfirm">Прийняти ремонт</button>
          <button type="button" class="btn btn-primary btn" id="writeComment">Написати коментар</button>
          <button type="button" class="btn btn-primary btn" id="appointDifficult">Призначити складність</button>
          <button type="button" class="btn btn-primary btn" id="appointExecutor">Призначити відповідального</button>
        </div>
      </div> -->

    <style>
      #sendComment {
        font-size: xx-large;
        color: darkgreen;
        margin-top: auto;
        margin-right: 10px;
      }
      #commentForm {
        
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-color: white;
        border-radius: 12px 12px 12px 12px !important;
        margin-bottom: 10px !important;
      }

      #comment {
        border: none;
        font-size: 2.2em;
      }
    </style>
    <div class="input-group" id="commentForm">
      <textarea class="form-control" id="comment" rows="1" placeholder="написать сообщение..."></textarea>
      <i class="bi bi-send" id="sendComment"></i>
    </div>

    <div id="formContainer" style="display: none">
      <!-- place for form -->
      <div class="card">
        <div class="card-body">
          <textarea class="form-control" id="newOrderText" rows="2" placeholder="нотатки..."></textarea>
          <div id="choiceDifficult" style="display: none">
            <p class="cardLabel">Складність ремонта:</p>
            <div class="btn-group" role="group" aria-label="Basic example">
              <button type="button" class="btn btn-secondary">простий</button>
              <button type="button" class="btn btn-secondary">середній</button>
              <button type="button" class="btn btn-secondary">складний</button>
            </div>
          </div>
          <div class="input-group" id="choiceExecutor" style="display: none">
            <label for="sotrudnik" class="cardLabel">Призначити виконавця:</label>
            <input
              type="text"
              class="form-control inputFixBrak"
              id="sotrudnik"
              url="/app/autocompleteSotrydnik"
              aria-describedby="basic-addon3"
            />
          </div>

          <div>
            <div id="commandBtns">
              <button type="button" class="btn btn-primary btn" id="cancelInfo">Відмінити</button>
              <button type="button" class="btn btn-primary btn" id="saveInfo">Зберегти</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="historyContainer">
      <!-- history of current repair -->
    </div>

    <!-- Шаблон картки -->
  </div>
</div>

<script id="card-template" type="text/x-handlebars-template">
  <div class='card'>
    <div class='card-body'>
      <div class='card-author'></div>
      <p class='card-text'><span class='card-author'>{{author}}:</span> {{text}}</p>
      <div class='card-date'>{{date}}</div>
    </div>
  </div>
</script>

<script id="formTemplate" type="text/x-handlebars-template">
  <textarea class='form-control' id='newOrderText' rows='2' placeholder='нотатки...'></textarea>
  <div id='choiceDifficult'>
    <p class='cardLabel'>Складність ремонта:</p>
    <div class='btn-group' role='group' aria-label='Basic example'>
      <button type='button' class='btn btn-secondary'>простий</button>
      <button type='button' class='btn btn-secondary'>середній</button>
      <button type='button' class='btn btn-secondary'>складний</button>
    </div>
  </div>
  {{#if isSotrudnik}}
    <div class='input-group' id='groupInputSotrudnik'>
      <label for='sotrudnik' class='cardLabel'>Призначити виконавця:</label>
      <input
        type='text'
        class='form-control inputFixBrak'
        id='sotrudnik'
        url='/app/autocompleteSotrydnik'
        aria-describedby='basic-addon3'
        callbackSelect=''
      />
    </div>
  {{/if}}
  <div>
    <div id='commandBtns'>
      <button type='button' class='btn btn-primary btn' id='cancelInfo'>Відмінити</button>
      <button type='button' class='btn btn-primary btn' id='saveInfo'>Зберегти</button>
    </div>
  </div>
</script>

<script>
  $(document).ready(function () {
    let tableID = '#ЗаявкаНаРемонт';
    let currentRowJQ;

    initTables();
    initInputAutocomplete('#sotrudnik');
    initInputAutocomplete('#newOrderStanok');

    // callback при получении данных от сервера по wss
    callbackWSS = async function (data) {
      callbackTable(data);
    };

    addSubscribeWSS('ЗаявкаНаРемонт_all');

    // callback при изменении данных в строке для определения показать или убрать строку
    callbackFilter = function (data, result = true) {
      console.log('callbackFilter', data);

      if ($('#modal').is(':visible')) {
        const newUID = data.uid;
        const currentUID = currentRowJQ.data('data').data.uid;
        console.log('newUID currentUID ', newUID, currentUID);
        if (newUID === currentUID) {
          renderOrderPage({data: data});
        }
        
      }

      return result;
    };

    // callback перед отрисовкой таблицы
    callbackBeforeDone = function (data) {};

    // callback после отрисовки таблицы
    callbackAfterDone = function (data) {
      console.log('callback after', data['ВариантыСложности'])
            $.each(data['ВариантыСложности'], function(index, value) {
                $('#difficultButton').append(`<option value="${value.data['uid']}">${value.data['Наименование']}</option>`);
            });
    };

    // callback после вставки новой пустой строки, перед заполнением данными
    callbackAddNewRow = function (data) {
      console.log('callbackAddNewRow', data);
    };

    // callback после внесения изменений в строку с сервера
    callbackAfterWrite = function (data) {
      console.log('callbackAfterWrite', data);

      if (data.data['Проведен']) {
        console.log('eeeeeeeeeeeeeeeeeeee');

        let row = $('#' + data['uid']);
        console.log('row Проведен', row);
        $(row).find('.btnRow ').remove();
      }
    };

    callbackSelectStanok = function (data) {
      console.log('callbackSelectStanok', data.fullName);
      setTimeout(() => {
        $('#newOrderStanok').val(data.fullName);
        $('#newOrderStanok').data(data);
      }, 10);
    };

    // клик по кнопке Добавить заявку
    $('#btnAdd').on('click', function (event) {
      $('#newOrderStanok').val('');
      $('#newOrderText').val('');

      clickAnimate(this);

      highlight = false;

      $('#addOrder').show(0);
      $('#commandPanel').hide(0);
      $('#ЗаявкаНаРемонт').hide(0);
      $('#newOrderStanok').focus();
      logToServer('Нажата кнопка "Добавить заявку"');

      const data = { operator: true };
      if (stanok.uid !== '') {
        data.stanok = stanok;
      }
    });

    // click on saveOrder
    $('#saveOrder').on('click', function () {
      clickAnimate(this);
      const stanokUID = $('#newOrderStanok').data('uid');
      const newOrderText = $('#newOrderText').val();
      console.log('stanok', stanokUID);
      console.log(' text', newOrderText);
      let data = {
        stanokUID: stanokUID,
        newOrderText: newOrderText,
      };

      if (!stanokUID) {
        toastr.error('Укажите станок');
        $('#newOrderStanok').addClass('invalid');
        $('#newOrderStanok').focus();
        return;
      }

      NProgress.start();
      $.ajax({
        url: '/app/repairOrder',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log('logToServer', status, data);
          $('#addOrder').hide(0);
          $('#commandPanel').show(0);
          $('#ЗаявкаНаРемонт').show(0);
        },
      }).always(function () {
        NProgress.done();
        highlight = true;
      });
    });

    // click on cancelOrder
    $('#cancelOrder').on('click', function () {
      clickAnimate(this);
      $('#addOrder').hide(0);
      $('#commandPanel').show(0);
      $('#ЗаявкаНаРемонт').show(0);
    });

    $('.all-work').on('click', function () {
      $('.all-work').switchClass('btn-primary', 'btn-secondary');
      $(this).switchClass('btn-secondary', 'btn-primary', 500);
    });

    $('.mech-el').on('click', function () {
      $(this).toggleClass('btn-primary');
      $(this).toggleClass('btn-secondary');
    });

    var formTemplate = Handlebars.compile($('#formTemplate').html());

    function closeBtnContainer() {
      setTimeout(function () {
        $('#btn-container').css('display', 'none');
      }, 200);
    }

    function hideAllInputs() {}

    $('#createZakupka').on('click', function () {
      console.log('createZakupka');
      $('#formContainer').show();
      closeBtnContainer();
    });

    $('#repairDone').on('click', function () {
      console.log('repairDone');
      $('#formContainer').show();

      closeBtnContainer();
    });
    $('#repairConfirm').on('click', function () {
      $('#formContainer').show();
      closeBtnContainer();
    });

    $('#writeComment').on('click', function () {
      $('#formContainer').show();
      closeBtnContainer();
    });

    $('#appointDifficult').on('click', function () {
      console.log('призначити складність');
      $('#formContainer').show();
      $('#choiceDifficult').show();
      closeBtnContainer();
    });

    $('#appointExecutor').on('click', function () {
      $('#formContainer').show();
      $('#choiceExecutor').show();
      closeBtnContainer();
    });

    $('#btnAddForm').on('click', function () {
      event.stopPropagation();
      if ($('#btn-container').hasClass('showModal')) {
        closeBtnContainer();
      } else {
        $('#btn-container').css('display', 'flex');
        setTimeout(function () {
          $('#btn-container').addClass('showModal');
        }, 10);
      }
    });

    $(document).on('click', function (event) {
      closeBtnContainer();
    });
  
    ////////////////////////////////////////////////
    
    
    function renderOrderPage(data) {
      const text = data.data;
      const date = formatDate(data.data['Дата']);
      const stanokNumber = data.data['Станок']['ИнвентарныйНомер'];
      const stanokName = data.data['Станок']['Наименование'];
      const author = data.data['Сотрудник']['Наименование'];
      const description = data.data['Описание'];
      const sotrudnik = data.data['Ответственный'];
      const diagnosticText = data.data['РезультатДиагностики'];
      const orderDone = data.data['РемонтЗавершен'];
      const status = data.data['СтатусЗаявки'];
      const difficult = data.data['Сложность']['uid'];
      const executor = data.data['Ответственный']['Наименование'];
      $('#infoText').text(`${description}`);
      $('#infoDate').val(`${date}`);
      $('#infoStanok').val(`${stanokNumber} ${stanokName}`);
      $('#infoAuthor').val(`${author}`);
      $('#sotrudnik').val(sotrudnik['Наименование']);
      $('#sotrudnik').attr('uid', sotrudnik['uid']);
      $('#infoDiagnosText').val(diagnosticText);
      $('#orderDone').prop('checked', orderDone);
      $('#difficultButton').val(difficult);
      $('#status').val(status);
      $('#executor').val(executor);
      console.log('difficult', difficult);

      var cardTemplate = Handlebars.compile($('#card-template').html());
      const historyContainer = $('#historyContainer');
      const tasks = data.data['История'];
      console.log('tasks', currentRowJQ.data('data').data['История']);
      historyContainer.text('');
      tasks.forEach(function (task) {
        var cardHtml = cardTemplate({
          author: task['Сотрудник']['Наименование'],
          text: task.Текст,
          date: formatDateTime(task.Дата),
        });

        historyContainer.prepend(cardHtml);
      });
    }


    // click on tableRow
    
    $(tableID).on('click', '.ЗаявкаНаРемонт', function (event) {
      console.log('ЗаявкаНаРемонт click');
      $('#main').hide();
      $('#modal').show();
      const currentRow = $(this).attr('id');
      const oldRow = $('#rowOrderInfo').attr('currentRow');
      const row = $(this);
      let needInit = false;
      $('#rowOrderInfo').attr('currentRow', currentRow);

      const data = $(this).data('data');
      currentRowJQ = row;
      console.log('currentRowJQ', currentRowJQ);
      console.log('data from row', currentRowJQ.data('data'));
      $('#modal').data('data', data);

      renderOrderPage(data);
      
      if (currentRow === oldRow) {
        if ($('#rowOrderInfo').is(':visible')) {
          $('#rowOrderInfo').hide(200);
          $(tableID).children('tbody').children('.rowData').removeClass('selectedRow');
        } else {
          console.log('rowOrderInfo is not visible');
          needInit = true;
          $('#rowOrderInfo').show(200);
        }
      } else {
        $('#rowOrderInfo').hide(0);
        $('#rowOrderInfo').insertAfter(row);
        $('#rowOrderInfo').show(200);
        needInit = true;
      }

      if (needInit) {
        console.log('if needInit');
        $(tableID).children('tbody').children('.rowData').removeClass('selectedRow');

        $(this).addClass('selectedRow');
        $('#tableOrderInfo').data('param', { order: currentRow });
      }
    });

    function sendDataTo1C(data) {
      $.ajax({
        url: '/app/repairOrder',
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (response) {
          console.log('Response:', response);
          if (response.error) {
            toastr.error('Помилка звязку', response['Причина']);
          } else {
            toastr.success('Дані сохранено');
          }
        },
        error: function (error) {
          console.log('Error:', error);
          toastr.error('Error', error);
        },
      });
    }

    $('#sotrudnik').on('blur', function () {
      currentRowJQ.data('data').edited['Ответственный'] = $('#sotrudnik').attr('uid');
      console.log('sotrudnik', currentRowJQ.data('data').edited);
    });

    
    // handle select on status
    $("#status").on("change", function() {
      const data = currentRowJQ.data('data');
      data.edited['СтатусЗаявки'] = $( this ).val();
      console.log($( this ).val());
      sendDataTo1C(data);
    })

    // handle select on status
    $("#difficultButton").on("change", function() {
      const data = currentRowJQ.data('data');
      data.edited['Сложность'] = $( this ).val();
      console.log($(this).val());
      sendDataTo1C(data);
    })


    

    $('#sendComment').on('click', function () {
      clickAnimate(this);
      console.log('sendComment', currentRowJQ.data('data'));
      let data = currentRowJQ.data('data');
      data.edited['Комментарий'] = $('#comment').val();
      if ($('#comment').val() === '') {
        return;
      }
      console.log(data.edited);

      $.ajax({
        url: '/app/repairOrder',
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (response) {
          console.log('Response:', response);
          if (response.error) {
            toastr.error('Помилка звязку', response['Причина']);
          } else {
            toastr.success('Данні сохранено');
            $('#comment').val('');
          }
        },
        error: function (error) {
          console.log('Error:', error);
          toastr.error('Error', error);
        },
      });
    });

    // click on button cancelInfo
    $('#cancelInfo').on('click', function () {
      console.log('cancel info');
      clickAnimate(this);
      $('#rowOrderInfo').hide(300);
    });

    $('#saveInfo').on('click', function () {
      console.log('click safe', $('#modal').data('data').edited);
      $('#saveInfo').focus();
      clickAnimate(this);
      let data = currentRowJQ.data('data');
      console.log('data', data);

      // $.ajax({
      //   url: '/app/repairOrder',
      //   type: 'PUT',
      //   contentType: 'application/json',
      //   data: JSON.stringify(data),
      //   success: function (response) {
      //     console.log('Response:', response);
      //     if (response.error) {
      //       toastr.error('Помилка звязку', response['Причина']);
      //     } else {
      //       toastr.success('Данні сохранено');
      //       $('#rowOrderInfo').hide(300);
      //       const orderUID = $('#rowOrderInfo').attr('currentRow');
      //       $(`#${orderUID}`).removeClass('selectedRow');
      //     }
      //   },
      //   error: function (error) {
      //     console.log('Error:', error);
      //     toastr.error('Error', error);
      //   },
      // });
    });

    // click closeBtn on modal
    $('#closeBtn').on('click', function () {
      console.log('closeModal');
      $('#main').show();
    });

    $('#newOrderStanok').autocomplete({
      position: { my: 'left top', at: 'left bottom', collision: 'flip' },
    });

    $('#comment').on('input', function() {
        $(this).css('height', 'auto');
        $(this).css('height', this.scrollHeight + 'px');
      });
  });
</script>
