<style>
  .аГруппыЭтаповПроизводства:nth-child(1) {
    padding: 5px 0 5px 0;
  }

  td {
    padding: 0 5px;
  }

  @media (max-width: 600px) {
    td {
      padding: 0 0.3vw;
    }
  }

  #listWork .dataCell,
  #listWork th {
    /* height: 5vw; */
    min-height: 30px;
    max-height: 70px;
    font-size: 1.2em;
    align-content: center;
  }

  @media (orientation: portrait) {
    #listWork th {
      font-size: 1em;
    }
  }

  #listWork td:nth-child(1) {
    padding: 0 2px;
  }

  .titlePage {
    font-size: 30px;
  }

  .dataCellNeed {
    height: calc(2em + 1vw);
    min-height: 30px;
    max-height: 70px;
    font-size: 23px;
    align-content: center;
  }

  .selectedGroupEtap > td {
    background-color: rgb(238, 252, 199); /* Наследуется цвет фона родителя */
  }

  #saveNewReport {
    margin-right: 15px;
    margin-left: auto;
  }

  #time {
    text-align: center;
  }

  .divAddingInfo {
    font-size: 0.8em !important;
    line-height: 1.2em;
    white-space: pre;
  }

  .hide {
    display: none;
  }

  #infoZakazForm {
    max-width: 600px;
    margin: auto;
    padding-top: 10px;
    padding-bottom: 10px;
  }

  #infoZakazForm tr {
    height: 25px;
  }

  #infoZakazForm th {
    width: 40px;
  }

  #infoZakazForm th:nth-child(2) {
    width: 160px;
  }

  .DefectListMainRow td {
    background-color: coral;
  }

  #ОтчетПоРаботе2022 thead tr {
    font-size: 0.8em;
  }

  #defectBtn {
    padding: 0.3vw;
  }

  .reportContainer {
    width: 630px;
    font-size: 25px;
    margin: 10px auto 10px auto;
    background-color: aliceblue;
    border-radius: 10px;
    line-height: 1.8em;
    padding: 2vw 2vw 0.1vw 2vw;
  }

  .reportContainer h5 {
    font-size: 1.2em;
    margin-bottom: 20px;
    font-weight: bold;
    text-align: center;
  }

  .reportContainer label {
    font-size: 1em;
    margin-bottom: 0;
  }

  .reportContainer input {
    flex-grow: 0;
    height: 2.5em;
    font-size: 1em;
    border-radius: 0.25rem;
  }

  .reportButton {
    font-size: 1em;
    width: 7em;
  }

  @media (max-width: 600px) {
    .reportContainer {
      width: 100%;
      font-size: 5vw;
      line-height: 3em;
    }

    .input-group {
      margin-bottom: 0.3em;
      gap: 5px;
    }
    .input-group input {
      height: 3em;
    }
  }

  .input-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: nowrap;
    gap: 10px;
    margin-bottom: 0.7em !important;
  }

  #saveFixReport {
    margin-right: 15px;
    margin-left: auto;
  }

  #time {
    text-align: center;
  }
</style>

<h3 class="titlePage">Надо делать</h3>

<table
  id="аГруппыЭтаповПроизводства"
  name="аГруппыЭтаповПроизводства"
  class="mainTable"
  url="/app/getListGroupEtapNeed"
  filter="filterForListGroupEtapNeed"
  addNevRow="callbackAddNewRowForListGroupEtapNeed"
  append="end"
  sort="0"
  init
>
  <tr class="config" style="display: none">
    <td title="Код" name="Код" style="width: 50px">
      <div class="dataCell textAlignCenter dataCellNeed"></div>
    </td>
    <td title="Групповой этап" name="Наименование" style="width: auto">
      <div class="dataCell dataCellNeed"></div>
    </td>
    <td title="Количество работ" name="КоличествоРаботы" style="width: 55px">
      <div class="dataCell textAlignEnd dataCellNeed"></div>
    </td>
  </tr>

  <!-- Брак -->
  <tr class="DefectListMainRow" id="DefectListMainRow" style="display: none">
    <td title="Код" name="Код" style="width: 30px">
      <div class="dataCell textAlignCenter dataCellNeed">00</div>
    </td>
    <td title="Групповой этап" name="Наименование" style="width: 160px">
      <div class="dataCell dataCellNeed">Брак</div>
    </td>
    <td title="Количество работ" name="КоличествоРаботы" style="width: 100px">
      <div id="countRowInDefectList" class="dataCell textAlignEnd dataCellNeed">
        0
      </div>
    </td>
  </tr>

  <tr id="DefectListRow" style="display: none" class="selectedGroupEtap">
    <td style="display: none">00</td>
    <td colspan="3" style="padding-top: 5px; padding-bottom: 5px">
      <table
        id="ОтчетПоРаботе2022"
        name="ОтчетПоРаботе2022"
        class="defectTable"
        url="/app/getListDefect"
        filter="filterForDefectTable"
        append="end"
        addNevRow="callbackAddNewRowForListDefect"
        callbackAfterWrite="callbackAfterWriteListDefect"
        header
        init
      >
        <tr class="config" style="display: none">
          <td title="Дата" name="ДатаОтчета" style="width: 7%">
            <div
              class="dataCell textAlignCenter"
              mask="DD.MM"
              typeData="date"
            ></div>
          </td>
          <td
            title="Номер детали"
            name="Заказ"
            key="АртикулНаименование"
            class="textAlignCenter"
            style="width: 32%"
          >
            <div class="dataCell"></div>
          </td>
          <td
            title="Станок"
            name="Станок"
            key="ИнвентарныйНомер"
            style="width: 8%"
          >
            <div class="dataCell"></div>
          </td>
          <td title="МЛ" name="Заказ" key="Номер" style="width: 7%">
            <div class="dataCell textAlignCenter"></div>
          </td>
          <td
            title="Этап"
            name="ЭтапПроизводства"
            key="КодНовый"
            style="width: 8%"
          >
            <div class="dataCell textAlignCenter"></div>
          </td>
          <td
            title="Оператор"
            name="Сотрудник"
            key="Наименование"
            style="width: 20%"
          >
            <div class="dataCell"></div>
          </td>
          <td
            title="Кол-во"
            name="КоличествоОсталосьИсправить"
            style="width: 6%"
          >
            <div class="dataCell textAlignEnd"></div>
          </td>
          <td title="" id="defectBtn" style="width: 6%">
            <div class="groupBtnRow">
              <i class="bi bi-play-circle btnPlay btnRow colorGreen"></i>
            </div>
          </td>
        </tr>

        <tr id="fixReportRow" style="display: none">
          <td colspan="8"><%- include('fixReportForm.ejs') %></td>
        </tr>
      </table>
    </td>
  </tr>

  <!-- ОТК -->

  <tr class="OTK_ListMainRow" id="OTK_ListMainRow">
    <td title="Код" id="kodHeight" name="Код" style="width: 30px">
      <div class="dataCell textAlignCenter dataCellNeed">20</div>
    </td>
    <td title="Групповой этап" name="Наименование" style="width: 160px">
      <div class="dataCell dataCellNeed">ОТК</div>
    </td>
    <td title="Количество работ" name="КоличествоРаботы" style="width: 100px">
      <div id="countRowOTK" class="dataCell textAlignEnd dataCellNeed">0</div>
    </td>
  </tr>

  <tr id="OTK_ListRow" style="display: none" class="selectedGroupEtap">
    <td style="display: none">20</td>
    <td colspan="3" style="padding-top: 5px; padding-bottom: 5px">
      <table
        id="OTK"
        name="ОтчетПоРаботе2022"
        url="/app/getCurrentReportForOTK"
        filter="filterForOTK"
        callbackAfterWrite="callbackAfterWriteListOTK"
        append="end"
        sort="0"
        init
        header
      >
        <tr class="config" style="display: none">
          <td title="Дата" name="ДатаОтчета" style="width: 8%">
            <div
              class="dataCell textAlignCenter"
              mask="DD.MM"
              typeData="date"
            ></div>
          </td>
          <td
            title="Номер детали"
            name="Заказ"
            key="АртикулНаименование"
            style="width: 33%"
          >
            <div class="dataCell"></div>
          </td>
          <td title="МЛ" name="Заказ" key="Номер" style="width: 7%">
            <div class="dataCell textAlignCenter"></div>
          </td>
          <td
            title="Оператор"
            name="Сотрудник"
            key="Наименование"
            style="width: 21%"
          >
            <div class="dataCell"></div>
          </td>
          <td
            title="Этап производства"
            name="ЭтапПроизводства"
            key="Наименование"
            style="width: 22%"
          >
            <div class="dataCell"></div>
          </td>
          <td
            title="Изгото влено"
            name="КоличествоИзготовлено"
            style="width: 9%"
          >
            <div class="dataCell textAlignEnd" style="padding: 5px"></div>
          </td>
          <!--                     <td title="Прове рено" 
                        name="КоличествоПроверено" 
                        style="width: 75px;">
                        <input  type="number" 
                                inputmode="numeric" 
                                checkValid  
                                min="0" 
                                sync="none" 
                                class="dataCell quantity textAlignEnd"></td>
                    <td title="Брак" 
                        name="КоличествоБрака" 
                        style="width: 60px;">
                        <input  type="number" 
                                inputmode="numeric"  
                                min="0" 
                                sync="none" 
                                class="dataCell quantity textAlignEnd"></td> -->
          <!--                     <td title="Готов" 
                        name="СтатусОТК"
                        style="width: 65px;"> 
                        <input  type="checkbox" 
                                name="Проведен" 
                                sync="none" 
                                class="dataCell checkboxInTable"></td> -->
          <!--                     <td title="" 
                        style="width: 70px;"><div class="groupBtnRow">
                            <i class="bi bi-pencil btnEdit btnRow colorGreen"></i>
                            <i class="bi bi-check-circle btnRow btnOk colorGreen" style="display: none;"></i></div></td> -->
        </tr>
      </table>
    </td>
  </tr>

  <!-- Надо -->
  <tr id="listWork" style="display: none" class="selectedGroupEtap">
    <td style="display: none" id="kod">01</td>
    <td colspan="3">
      <div id="containerTable" style="padding: 5px 0">
        <table
          id="Надо"
          name="Надо"
          url="/app/getListNeed"
          filter="filterForNeed"
          append="end"
          header
          addNevRow="callbackAddNewRowForListNeed"
          callbackAfterInitTable="callbackAfterInitTableNeed"
        >
          <tr class="config" style="display: none">
            <td
              title="МЛ"
              name="Заказ"
              key="Номер"
              class="zakaz"
              style="width: 8%"
            >
              <div class="dataCell textAlignCenter"></div>
            </td>
            <td
              title="Номер детали"
              name="Заказ"
              key="АртикулНаименование"
              style="width: 43%"
            >
              <div class="dataCell"></div>
            </td>
            <td
              title="Доп инфо"
              name="ДопИнфо"
              class="addingInfo"
              headerClass="addingInfo"
              style="width: 25%"
            >
              <div class="dataCell divAddingInfo"></div>
            </td>
            <td
              title="Этап"
              name="ЭтапПроизводства"
              key="Наименование"
              class="etapInfo"
              headerClass="etapInfo"
              style="width: 25%"
            >
              <div class="dataCell textAlignStart"></div>
            </td>
            <td title="Надо" name="МожноДелать" style="width: 8%">
              <div class="dataCell textAlignEnd"></div>
            </td>
            <td
              title="Дни"
              name="КоличествоДнейБездействияНадо"
              style="width: 7%"
            >
              <div class="dataCell textAlignEnd"></div>
            </td>
            <td title="" style="width: 7%">
              <div class="groupBtnRow">
                <i
                  class="bi bi-play-circle btnPlay btnRow colorGreen"
                  style="display: none"
                ></i>
              </div>
            </td>
          </tr>

          <tr id="newReportRow" style="display: none">
            <td colspan="6" style="background-color: aliceblue">
              <%- include('newReportRow.ejs') %>
            </td>
          </tr>

          <tr id="infoZakazRow" style="display: none">
            <td colspan="6" style="background-color: aliceblue">
              <div id="infoZakazForm"></div>
            </td>
          </tr>
        </table>
      </div>
    </td>
  </tr>
</table>

<script id="infoZakaz-template" type="text/x-handlebars-template">
  <table>
    <thead>
      <tr>
        <th>Код</th>
        <th>Этап производства</th>
        <th>К-во</th>
        <th>Брак</th>
        <th>Надо</th>
        <th>Утеря</th>
      </tr>
    </thead>
    <tbody>
      {{#each items}}
        <tr>
          <td class="textAlignCenter">{{КодНовый}}</td>
          <td>{{ЭтапПроизводства}}</td>
          <td class="textAlignEnd">{{Сделано}}</td>
          <td class="textAlignEnd">{{Брак}}</td>
          <td class="textAlignEnd {{addClass}}">{{Изготовить}}</td>
          <td class="textAlignEnd">{{Утеря}}</td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</script>

<script>
  var access = false;

  $(document).ready(function () {
    console.log("need.ejs $(document).ready");
    let tableID = "#OTK";
    initTables();

    initInputProvider();
    initInputAutocomplete("#provider");
    initInputAutocomplete("#sotrudnik");
    initInputAutocomplete("#sotrudnikFix");

    initInputTimeMask("#timeStart");
    initInputTimeMask("#timeStop");
    initInputTimeMask("#time");

    initInputTimeMask();
    initInputDate("#date");
    initInputDate("#dateFix");
    initInputCount("#count");
    initInputCount("#countFix");
    initInputWeight();
    initInputPrice();

    addSubscribeWSS("ОтчетПоРаботе2022_all");

    callbackWSS = async function (data) {
      callbackTable(data);
    };

    function initInputProvider() {
      // console.log("=== initInputProvider");
      // const userInfo = $("#menu").data("userInfo");
      // if (!userInfo.data["ПравоВноситьПодряды"]) {
      //   $("#workInProvider").hide();
      // }
    }

    function initInputDate(element) {
      $(element).on("change", function () {
        const value = $(this).val();

        if (value.length == 0) {
          setValid(this, false);
        } else {
          setValid(this, true);
        }
      });
    }

    function initInputCount(element) {
      $(element).on("change", function () {
        const value = $(this).val();
        const maxCount = parseInt($(this).attr("maxCount") || 0);

        if (value == 0 || value === "" || value < 0 || value > maxCount) {
          setValid(this, false);
        } else {
          setValid(this, true);
        }
      });
    }

    function initInputWeight() {
      $("#weight").on("change", function () {
        const value = $(this).val();
        console.log(value);
        if (value == 0 || value === "" || value < 0) {
          setValid(this, false);
        } else {
          setValid(this, true);
        }
      });
    }

    function initInputPrice() {
      $("#price").on("change", function () {
        const value = $(this).val();

        if (value == 0 || value === "" || value < 0) {
          setValid(this, false);
        } else {
          setValid(this, true);
        }
      });
    }

    // ************************************************** Надо ********************************************************

    // callback при изменении данных в строке для определения показать или убрать строку
    filterForListGroupEtapNeed = function (data, result = true) {
      try {
        if (data["КоличествоРаботы"] == "" || data["КоличествоРаботы"] == "0") {
          result = false;
        }

        if (data["uid"] == "bf73ce86-47af-11ec-8183-000c29006152") {
          result = false;
        }
      } catch (error) {
        console.log(error);
      }

      // hide #listWork if data of table not exist
      if (!result && $("#listWork").is(":visible")) {
        const oldGroupEtapID = $("#listWork").attr("groupEtapID");
        if (data["uid"] === oldGroupEtapID) {
          $("#listWork").hide(200);
        }
      }
      return result;
    };

    // callback придобавлении строки группового этапа в атрибут пишем есть ли право вносить отчеты
    callbackAddNewRowForListGroupEtapNeed = function (data) {
      try {
        $(`#${data.data.uid}`).attr("access", data.data["edit"]);

        // data.data['ДоступApp'].forEach(function(element) {
        //     const uidSotr = element['Сотрудник'].uid||'';

        //     if (uidSotr === user.uid) {
        //         $(`#${data.data.uid}`).attr('access', element['РазрешеноВноситьОтчеты']);
        //         return;
        //     }
        // });
      } catch (error) {
        console.log(error);
      }
    };

    // callback при изменении данных в строке для определения показать или убрать строку
    filterForNeed = function (data, result = true) {
      try {
        const groupEtapID = $("#listWork").attr("groupEtapID");

        if (groupEtapID !== data["ГрупповойЭтап"]["uid"]) {
          result = false;
        }

        if (data["МожноДелать"] == "" || data["МожноДелать"] == "0") {
          result = false;
        }

        if (data["ПометкаУдаления"] === true) {
          result = false;
        }

        if (!data["Заказ"]["Активен"]) {
          result = false;
        }
      } catch (error) {
        console.log(error);
      }

      try {
        if (result) {
          const row = $("#" + data["uid"]);
          const days = parseInt(data["КоличествоДнейБездействияНадо"]);

          if (days >= 5) {
            $(row)
              .find('.dataCell[name="КоличествоДнейБездействияНадо"]')
              .addClass("colorRed");
          }
        }
      } catch (error) {
        console.log(error);
      }

      return result;
    };

    callbackAddNewRowForListNeed = function (data) {
      try {
        if (access) {
          $("#" + data.data["uid"])
            .find(".btnPlay")
            .show();
        } else {
          $("#" + data.data["uid"])
            .find(".btnPlay")
            .remove();
        }
      } catch (error) {
        console.log(error);
      }
    };

    // обработка клика по строке Этапа производства
    $("#аГруппыЭтаповПроизводства").on(
      "click",
      ".аГруппыЭтаповПроизводства",
      function (event) {
        console.log(this);

        $("#newReportRow").hide(0);
        $("#infoZakazRow").hide(0);
        $("#OTK_ListRow").hide(0);

        const groupEtapID = $(this).attr("id");
        const oldGroupEtapID = $("#listWork").attr("groupEtapID");
        const row = $(this);
        let needInit = false;

        $("#listWork").attr("groupEtapID", groupEtapID);

        if (groupEtapID === oldGroupEtapID) {
          if ($("#listWork").is(":visible")) {
            $("#listWork").hide(200);
          } else {
            $("#Надо").children("tbody").children(".rowData").remove();
            needInit = true;
            //$("#listWork").show(300);
          }
        } else {
          $("#listWork").hide(0);
          $("#Надо").children("tbody").children(".rowData").remove();
          $("#listWork").insertAfter(row);
          // $("#listWork").show(300);
          needInit = true;
        }

        if (needInit) {
          $("#аГруппыЭтаповПроизводства")
            .children("tbody")
            .children(".rowData")
            .removeClass("selectedGroupEtap");

          $("#OTK_ListMainRow").removeClass("selectedGroupEtap");
          $(this).addClass("selectedGroupEtap");
          $("#Надо").data("param", { groupEtapID: groupEtapID });

          const kod = $(this).find('.dataCell[name="Код"]').text();
          $("#kod").text(kod);

          console.log("listWork visible");
          disableHighlightElement();

          access = eval($(this).attr("access") || "false");

          initTable("#Надо");

          enableHighlightElement();

          $(".addingInfo").addClass("hide");
          $(".etapInfo").removeClass("hide");

          const listEtapDopInfo = [
            "89fdc2b4-07d8-11ec-816d-000c29006152",
            "bf73ce86-47af-11ec-8183-000c29006152",
            "062236eb-67a8-11ea-813c-000c29006152",
          ];

          if (listEtapDopInfo.includes(groupEtapID)) {
            $(".addingInfo").removeClass("hide");
            $(".etapInfo").addClass("hide");
          }
        } else {
          $(this).removeClass("selectedGroupEtap");
        }
      }
    );

    // колбек для відображення таблиці після ініціалізації
    callbackAfterInitTableNeed = function (data) {
      setTimeout(() => {
        $("#listWork").show(300);
      }, 100);
    };

    // обработка клика по кнопке Создания отчета
    $("#Надо").on("click", ".btnPlay", function (event) {
      $("#buttonsGroup").show();
      const rowID = $(this).attr("rowID");
      const row = $("#" + rowID);
      const maxCount = parseInt(
        $(row).find('.dataCell[name="МожноДелать"]').text() || 0
      );
      const data = $(row).data("data");
      const groupEtapID = $("#listWork").attr("groupEtapID");
      const userInfo = $("#menu").data("userInfo");

      clickAnimate(this);

      console.log(data);

      $("#infoZakazRow").hide(0);

      if ($("#newReportRow").is(":visible")) {
        $("#newReportRow").hide(100);
      } else {
        $("#newReportRow").data("data", data);

        $("#provider").val("");
        $("#provider").attr("uid", "");
        setValid("#provider", false);

        $("#sotrudnik").val("");
        $("#sotrudnik").attr("uid", "");
        setValid("#sotrudnik", false);

        $("#date").val("");
        setValid("#date", false);

        $("#timeStart").val("");
        setValid("#timeStart", false);

        $("#timeStop").val("");
        setValid("#timeStop", false);

        $("#count").val("");
        $("#count").attr("maxCount", maxCount);
        setValid("#count", false);

        $("#weight").val("");
        setValid("#weight", false);

        $("#price").val("");
        setValid("#price", false);

        $("#priceForOne").val("");
        setValid("#priceForOne", false);

        $("#workInProviderInput").prop("checked", false);

        $("#groupInputSotrudnik").show();
        $("#groupInputProvider").hide();
        $(".termoobrabotkaProvider").hide();
        $(".obrabotkaProviderPrice").hide();

        if (data.data["ЭтапПроизводства"]["НеУчитыватьВремяРаботы"]) {
          $("#workTimePeriod").hide();
        } else {
          $("#workTimePeriod").show();
        }

        $("#newReportRow").attr("report", rowID);
        $("#newReportRow").insertAfter(row);
        $("#newReportRow").show(100);

        $("#sotrudnik").focus();
      }
    });

    // обработка клика по кнопке Отмена создания отчета
    $("#cancelNewReport").on("click", function (event) {
      clickAnimate(this);
      setTimeout(() => {
        $("#newReportRow").hide(300);
      }, 200);
    });

    // обработка клика по кнопке Сохранить отчет
    $("#saveNewReport").on("click", function (event) {
      // $("#saveNewReport").prop("disabled", true);
      $("#buttonsGroup").hide();
      clickAnimate(this);

      const workInProvider = $("#workInProviderInput");
      const provider = $("#provider");
      const sotrudnik = $("#sotrudnik");
      const date = $("#date");
      const timeStart = $("#timeStart");
      const timeStop = $("#timeStop");
      const count = $("#count");
      const weight = $("#weight");
      const price = $("#price");
      const priceForOne = $("#priceForOne");
      const info = $("#newReportRow").data("data") || {};
      const etapID = info.data["ИД"];
      let error = false;

      if (provider.hasClass("invalid") && provider.is(":visible")) {
        toastr.error("Укажите подрядчика");
        error = true;
      }

      if (sotrudnik.hasClass("invalid") && sotrudnik.is(":visible")) {
        toastr.error("Укажите сотрудника");
        error = true;
      }

      if (date.hasClass("invalid") && date.is(":visible")) {
        toastr.error("Укажите дату отчета");
        error = true;
      }

      if (timeStart.hasClass("invalid") && timeStart.is(":visible")) {
        toastr.error("Укажите время начала работы");
        error = true;
      }

      if (timeStop.hasClass("invalid") && timeStop.is(":visible")) {
        toastr.error("Укажите время окончания работы");
        error = true;
      }

      if (count.hasClass("invalid")) {
        console.log("info", etapID, info);

        if (etapID === "22001") {
          const inputCountValue = parseInt($(count).val());
          console.log("inputCountValue", inputCountValue);

          if (inputCountValue > 0) {
          } else {
            toastr.error("Укажите сколько штук изготовлено");
            error = true;
          }
        } else {
          toastr.error("Укажите сколько штук изготовлено");
          error = true;
        }
      }

      if (weight.hasClass("invalid") && weight.is(":visible")) {
        toastr.error("Укажите вес одной детали");
        error = true;
      }

      if (price.hasClass("invalid") && price.is(":visible")) {
        toastr.error("Укажите цену");
        error = true;
      }

      if (priceForOne.hasClass("invalid") && priceForOne.is(":visible")) {
        toastr.error("Укажите цену");
        error = true;
      }

      if (error === true) {
        $("#buttonsGroup").show();
        return;
      }

      const data = {};
      data.workInProvider = $(workInProvider).prop("checked");
      data.provider = $(provider).attr("uid");
      data.sotrudnik = $(sotrudnik).attr("uid");
      data.date = new Date($(date).val());
      data.timeStart = $(timeStart).val();
      data.timeStop = $(timeStop).val();
      data.count = parseInt($(count).val());
      data.weight = parseInt($(weight).val() || 0);
      data.price = parseInt($(price).val() || 0);
      data.priceForOne = parseInt($(priceForOne).val() || 0);
      data.data = info;

      NProgress.start();
      $.ajax({
        url: "/app/createNewReport",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify(data),
        success: function (data, status) {
          if (data.error) {
            toastr.error(data["Причина"]);
          } else {
            toastr.success("Отчет создан!");
          }
        },
      }).always(function () {
        NProgress.done();
        highlight = true;
      });

      setTimeout(() => {
        $("#newReportRow").hide(300);
      }, 200);
      $("#saveNewReport").prop("disabled", false);
    });

    // обработка клика по галочке Сделано у подрядчика
    $("#workInProviderInput").on("change", function () {
      const data = $("#newReportRow").data("data");

      if (this.checked) {
        $("#groupInputProvider").show();
        $("#groupInputSotrudnik").hide();
        $("#workTimePeriod").hide();

        if (
          data.data["ГрупповойЭтап"]["uid"] ===
          "c61b8e1e-67a5-11ea-813c-000c29006152"
        ) {
          $(".termoobrabotkaProvider").show();
          $(".obrabotkaProviderPrice").hide();
        } else {
          $(".termoobrabotkaProvider").hide();
          $(".obrabotkaProviderPrice").show();
        }
      } else {
        $("#groupInputSotrudnik").show();
        $("#groupInputProvider").hide();
        $(".termoobrabotkaProvider").hide();
        $(".obrabotkaProviderPrice").hide();

        if (data.data["ЭтапПроизводства"]["НеУчитыватьВремяРаботы"]) {
          $("#workTimePeriod").hide();
        } else {
          $("#workTimePeriod").show();
        }
      }
    });

    // обработка клика по номеру заказа, отображает таблицу всех этапов с количеством
    $("#аГруппыЭтаповПроизводства").on("click", ".zakaz", function (event) {
      const row = $(this).parent();
      const data = $(row).data("data");
      const zakaz = data.data["Заказ"];
      const zakazUID = zakaz["uid"];
      const oldZakazUID = $("#infoZakazRow").attr("oldZakazUID");
      let needInit = false;

      clickAnimate(this);

      $("#infoZakazRow").attr("oldZakazUID", zakazUID);

      if ($("#infoZakazRow").is(":visible")) {
        if (zakazUID !== oldZakazUID) {
          needInit = true;
        } else {
          $("#infoZakazRow").hide(100);
        }
      } else {
        needInit = true;
      }

      if (needInit) {
        NProgress.start();

        $.ajax({
          url: "/app/zakazInfo",
          type: "GET",
          dataType: "json",
          data: { zakaz: zakaz.uid },
          success: function (response) {
            console.log("response", response);

            if (!response.error) {
              Handlebars.registerHelper("isHighDays", function (days) {
                console.log("isHighDays", days);
                return days > 5;
              });

              const templateSource = $("#infoZakaz-template").html();
              const template = Handlebars.compile(templateSource);
              const items =
                response["ТекущееСостояниеЭтаповЗаказа"]["ЭтапыПроизводства"];

              items.forEach((item) => {
                item["Сделано"] =
                  item["Сделано"] === "0" ? "" : item["Сделано"];
                item["Брак"] = item["Брак"] === "0" ? "" : item["Брак"];
                item["Изготовить"] =
                  item["Изготовить"] === "0" ? "" : item["Изготовить"];
                item["Утеря"] = item["Утеря"] === "0" ? "" : item["Утеря"];
                item["МожноДелать"] =
                  item["МожноДелать"] === "0" ? "" : item["МожноДелать"];
                item["КоличествоДнейБездействияНадо"] = parseInt(
                  item["КоличествоДнейБездействияНадо"]
                );
                item["addClass"] =
                  item["КоличествоДнейБездействияНадо"] > 5 ? " colorRed" : "";
              });

              const tableHtml = template({ items: items });
              $("#infoZakazForm").html(tableHtml);

              $("#infoZakazRow").insertAfter(row);
              $("#infoZakazRow").show(200);
            }
          },
          error: function (xhr, status, error) {
            console.error("Ошибка:", error);
          },
          complete: function (response) {
            NProgress.done();
          },
        });
      }
    });

    // ************************************************** Брак ********************************************************
    filterForDefectTable = function (data, result = true) {
      try {
        if (!data["Проведен"]) {
          result = false;
        } else if (data["КоличествоБрака"] == 0) {
          result = false;
        } else if ((data["КоличествоОсталосьИсправить"] || 0) == 0) {
          result = false;
        }
      } catch (error) {}

      //console.log('filterForDefectTable', result);

      return result;
    };

    callbackAddNewRowForListDefect = function (data) {
      const userInfo = $("#menu").data("userInfo");
      // const access = userInfo.data["ПравоВноситьИсправлениеБрака"] || false;
      const access = true;

      try {
        if (access) {
          $("#" + data.data["uid"])
            .find(".btnPlay")
            .show();
        } else {
          $("#" + data.data["uid"])
            .find(".btnPlay")
            .remove();
        }
      } catch (error) {
        console.log(error);
      }
    };

    callbackAfterWriteListDefect = function (data) {
      //console.log('callbackAfterWriteListDefect', data);
      const countDefect = $("#ОтчетПоРаботе2022")
        .children("tbody")
        .children(".rowData").length;
      const visibleDefect = countDefect > 0;
      const currState = $("#DefectListMainRow").is(":visible");

      if (visibleDefect !== currState) {
        if (visibleDefect) {
          $("#DefectListMainRow").show(300);
        } else {
          $("#DefectListMainRow").hide(200);
          $("#DefectListRow").hide(200);
        }
      }

      $("#countRowInDefectList").text(countDefect);
      //console.log('callbackAfterWriteListDefect', countDefect, visibleDefect, currState);
    };

    $("#аГруппыЭтаповПроизводства").on(
      "click",
      ".DefectListMainRow",
      function (event) {
        if ($("#DefectListRow").is(":visible")) {
          $("#DefectListRow").hide(200);
        } else {
          $("#DefectListRow").show(300);
          console.log("iiiiiiii");
        }
      }
    );

    $("#ОтчетПоРаботе2022").on("click", ".btnPlay", function (event) {
      if ($("#fixReportRow").is(":visible")) {
        $("#fixReportRow").hide(100);
        return;
      }
      const rowID = $(this).attr("rowID");
      const row = $("#" + rowID);
      const maxCount = parseInt(
        $(row).find('.dataCell[name="КоличествоОсталосьИсправить"]').text() || 0
      );

      $("#sotrudnikFix").val("");
      $("#sotrudnikFix").attr("uid", "");
      setValid("#sotrudnikFix", false);

      $("#dateFix").val("");
      setValid("#dateFix", false);

      $("#time").val("");
      setValid("#time", false);

      $("#countFix").val("");
      $("#countFix").attr("maxCount", maxCount);
      setValid("#countFix", false);

      $("#fixReportRow").attr("report", rowID);
      $("#fixReportRow").insertAfter(row);
      $("#fixReportRow").show();
      $("#sotrudnikFix").focus();
    });

    $("#cancelFixReport").on("click", function (event) {
      clickAnimate(this);
      setTimeout(() => {
        $("#fixReportRow").hide(300);
      }, 200);
    });

    $("#saveFixReport").on("click", function (event) {
      clickAnimate(this);

      const sotrudnik = $("#sotrudnikFix");
      const date = $("#dateFix");
      const time = $("#time");
      const count = $("#countFix");

      if (sotrudnik.hasClass("invalid")) {
        toastr.error("Укажите кто исправлял брак", {});
        return;
      } else if (date.hasClass("invalid")) {
        toastr.error("Укажите когда исправлялся брак");
        return;
      } else if (time.hasClass("invalid")) {
        toastr.error("Укажите сколько времени ушло на исправление брака");
        return;
      } else if (count.hasClass("invalid")) {
        toastr.error("Укажите сколько штук исправлено");
        return;
      }

      const data = {};
      data.reportBrak = $("#fixReportRow").attr("report");
      data.sotrudnik = $(sotrudnik).attr("uid");
      data.date = new Date($(date).val());
      data.time = $(time).val();
      data.count = parseInt($(count).val());

      console.log("data", data);

      NProgress.start();

      $.ajax({
        url: "/app/createFixReport",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log("logToServer", status, data);
        },
      }).always(function () {
        NProgress.done();
        highlight = true;
      });

      setTimeout(() => {
        $("#fixReportRow").hide(300);
      }, 200);
    });

    // **************************************************** ОТК ****************************************************

    $("#аГруппыЭтаповПроизводства").on(
      "click",
      ".OTK_ListMainRow",
      function (event) {
        if ($("#OTK_ListRow").is(":visible")) {
          $("#OTK_ListRow").hide(200);
        } else {
          $("#OTK_ListRow").show(300);
        }

        $("#newReportRow").hide(0);
        $("#infoZakazRow").hide(0);
        $("#listWork").hide(0);

        $("#аГруппыЭтаповПроизводства")
          .children("tbody")
          .children(".rowData")
          .removeClass("selectedGroupEtap");
        $(this).addClass("selectedGroupEtap");
      }
    );

    // callback при изменении данных в строке для определения показать или убрать строку
    filterForOTK = function (data, result = true) {
      console.log("filterForOTK");
      try {
        if (
          !data["Проведен"] ||
          data["СтатусОТК"] ||
          !data["Заказ"]["Активен"] ||
          !data["ЭтапПроизводства"]["ОТК"]
        ) {
          result = false;
        }
      } catch (error) {
        console.log(error);
      }

      console.log("filter for otk", result);
      return result;
    };

    // клик по кнопке Редактировать
    $(tableID).on("click", ".btnEdit", function (event) {
      const row = $(this).closest("tr");
      const data = $(row).data("data");

      $(tableID).find(".btnEdit").show();
      $(tableID).find(".btnOk").hide();
      $(tableID).find("input").prop("disabled", true);

      $(row).find(".btnOk").show();
      $(row).find(".btnEdit").hide();
      $(row).find("input").prop("disabled", false);

      clickAnimate($(row).find(".btnOk"));
      logToServer('Нажата кнопка "Редактировать"', data);
    });

    // клик по кнопке Применить
    $(tableID).on("click", ".btnOk", function (event) {
      const row = $(this).closest("tr");
      const data = $(row).data("data");

      $(row).find(".btnOk").hide();
      $(row).find(".btnEdit").show();
      $(row).find("input").prop("disabled", true);

      clickAnimate($(row).find(".btnEdit"));
      logToServer('Нажата кнопка "Применить"', data);
      sendWSS("updateDataOnServer", "", data);
    });

    callbackAfterWriteListOTK = function (data) {
      const countDefect = $(tableID)
        .children("tbody")
        .children(".rowData").length;
      $("#countRowOTK").text(countDefect);
    };
  });
</script>
