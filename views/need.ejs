<style>

    .selectedGroupEtap > td {
        background-color: rgb(238, 252, 199); /* Наследуется цвет фона родителя */
    }

    #newReportRow input {
        width: 300px;
        flex: inherit;
    }

    .labelNewReport {
        margin-left: 10px;
        margin-top: 3px;
    }

    #groupNewReport {
        width: 430px;
        margin: auto;
        background-color: aliceblue;
        padding: 15px;
        border-radius: 10px;
        /* border: 1px solid #d7e7f5; */
    }

    #saveNewReport {
        margin-right: 15px;
        margin-left: auto;
    }

    #newReportForm {
        padding: 20px;
    }

    #time {
        text-align: center;
    }

    .addingInfo {
        font-size: 0.8em;
        white-space: pre;
    }

    .hide {
        display: none;
    }

    #workInProviderInput {
        height: 25px;
        margin-top: 7px;
    }

    @media (max-width: 450px) {
        #Надо th {
            width: auto !important;  
        }

        #Надо {
            font-size: 0.8em !important;  
        }

        #Надо th:nth-child(2) {
            width: 35% !important;
        }

        #Надо .dataCell {
            text-wrap: wrap;  
        }
        
        #Надо td:nth-child(2) {
            font-size: 0.9em !important;
        }
    }

    #infoZakazForm {
        max-width: 600px;
        margin: auto;
        padding-top: 10px;
        padding-bottom: 10px;
    }

    #infoZakazForm tr {
        height: 25px;
    }

    #infoZakazForm th{
        width: 40px;
    }

    #infoZakazForm th:nth-child(2) {
        width: 160px;
    }
</style>

<h3 class="titlePage">Надо делать</h3>


<table  id="аГруппыЭтаповПроизводства" 
        url="/app/getListGroupEtapNeed" 
        filter="filterForListGroupEtapNeed" 
        addNevRow="callbackAddNewRowForListGroupEtapNeed" 
        append="end" sort="0" init
>
    <tr class="config" style="display: none;">
        <td title="Код"  
            name="Код" 
            style="width: 30px;"><div class="dataCell textAlignCenter"></div></td>
        <td title="Групповой этап"  
            name="Наименование" 
            style="width: 160px;"><div class="dataCell"></div></td>
        <td title="Количество работ" 
            name="КоличествоРаботы" 
            style="width: 100px;"><div class="dataCell textAlignEnd"></div></td>
    </tr>

    <tr id="listWork" style="display: none;" class="selectedGroupEtap">
        <td style="display: none;" id="kod">01</td>
        <td colspan="3">
            <div id="containerTable" style="padding: 5px 0;">
                <table id="Надо" url="/app/getListNeed" filter="filterForNeed" append="end" header addNevRow="callbackAddNewRowForListNeed">
                    <tr class="config" style="display: none;">
                        <td title="МЛ"  
                            name="Заказ" 
                            key="Номер" 
                            class="zakaz" 
                            style="width: 70px;"><div class="dataCell textAlignCenter"></div></td>
                        <td title="Номер детали" 
                            name="Заказ" 
                            key="АртикулНаименование" 
                            style="width: 100%;"><div class="dataCell"></div></td>
                        <td title="Доп инфо" 
                            name="ДопИнфо" 
                            class="addingInfo" 
                            headerClass="addingInfo" 
                            style="width: 230px;"><div class="dataCell"></div></td>
                        <td title="Код операции" 
                            name="ЭтапПроизводства" 
                            key="КодНовый"
                            class="etapInfo" 
                            headerClass="etapInfo"  
                            style="width: 110px;"><div class="dataCell textAlignCenter"></div></td>
                        <td title="Надо" 
                            name="МожноДелать" 
                            style="width: 70px;"><div class="dataCell textAlignEnd"></div></td>
<!--                         <td title="Брак" 
                            name="Брак" 
                            style="width: 70px;"><div class="dataCell textAlignEnd"></div></td> -->
                        <td title="Дни" 
                            name="КоличествоДнейБездействияНадо" 
                            style="width: 70px;"><div class="dataCell textAlignEnd"></div></td>
                        <td title="" 
                            style="width: 55px;"><div class="groupBtnRow">
                                <i class="bi bi-play-circle btnPlay btnRow colorGreen" style="display: none;"></i>
                            </div></td>
                    </tr>

                    <tr id="newReportRow" style="display: none;">
                        <td colspan="99" style="background-color: aliceblue;">
                            <div id="newReportForm">
                                <div id="groupNewReport">
                                    <h5 style="margin-bottom: 20px; font-weight: bold; text-align: center;">Создание отчета</h5>

                                    <div class="input-group mb-2" id="workInProvider">
                                        <label for="date" class="labelNewReport" style="width: 180px;">Сделано у подрядчика :</label>
                                        <input class="" type="checkbox" style="width: 200px;"  value="" id="workInProviderInput">
                                    </div>

                                    <div class="input-group mb-2" id="groupInputProvider" style="display: none;">
                                        <label for="provider" class="labelNewReport" style="width: 180px;">Подрядчик :</label>
                                        <input type="text" 
                                            class="form-control inputFixBrak" 
                                            id="provider" 
                                            url="/app/autocompleteProvider" 
                                            style="width: 200px;"
                                            aria-describedby="basic-addon3">
                                    </div>

                                    <div class="input-group mb-2" id="groupInputSotrudnik" >
                                        <label for="sotrudnik" class="labelNewReport" style="width: 180px;">Сотрудник :</label>
                                        <input type="text" 
                                            class="form-control inputFixBrak" 
                                            id="sotrudnik" 
                                            url="/app/autocompleteSotrydnik" 
                                            style="width: 200px;"
                                            aria-describedby="basic-addon3">
                                    </div>
                
                                    <div class="input-group mb-2">
                                        <label for="date" class="labelNewReport" style="width: 180px;">Дата :</label>
                                        <input type="date" class="form-control inputFixBrak" style="width: 200px;" id="date" aria-describedby="basic-addon3">
                                    </div>
                
                                    <div class="input-group mb-2" id="workTimePeriod">
                                        <label for="time" class="labelNewReport" style="width: 150px;">Время работы</label>
                                        <label for="time" class="labelNewReport textAlignEnd" style="width: 20px; padding-right: 3px;">с:</label>
                                        <input type="text" class="form-control inputFixBrak textAlignCenter" inputmode="numeric" style="width: 80px;" id="timeStart" placeholder="чч:мм" aria-describedby="basic-addon3">
                                        <label for="time" class="labelNewReport textAlignEnd" style="width: 30px;">по:</label>
                                        <input type="text" class="form-control inputFixBrak textAlignCenter" inputmode="numeric" style="width: 80px;" id="timeStop" placeholder="чч:мм" aria-describedby="basic-addon3">
                                    </div>
                
                                    <div class="input-group mb-2">
                                        <label for="time" class="labelNewReport" style="width: 280px;">Количество изготовлено, шт:</label>
                                        <input type="number" class="form-control inputFixBrak textAlignEnd" inputmode="numeric" style="width: 100px;" id="count" aria-describedby="basic-addon3">
                                    </div>

                                    <div class="input-group mb-2 termoobrabotkaProvider">
                                        <label for="time" class="labelNewReport" style="width: 280px;">Вес одной детали, кг:</label>
                                        <input type="number" class="form-control inputFixBrak textAlignEnd" inputmode="numeric" style="width: 100px;" id="weight" aria-describedby="basic-addon3">
                                    </div>

                                    <div class="input-group mb-2 termoobrabotkaProvider">
                                        <label for="time" class="labelNewReport" style="width: 280px;">Цена обработки 1кг, грн:</label>
                                        <input type="number" class="form-control inputFixBrak textAlignEnd" inputmode="numeric" style="width: 100px;" id="price" aria-describedby="basic-addon3">
                                    </div>

                                    <div class="input-group mb-2 obrabotkaProviderPrice">
                                        <label for="time" class="labelNewReport" style="width: 280px;">Цена обработки 1шт, грн:</label>
                                        <input type="number" class="form-control inputFixBrak textAlignEnd" inputmode="numeric" style="width: 100px;" id="priceForOne" aria-describedby="basic-addon3">
                                    </div>
                
                                    <div style="display: flex; margin-top: 20px;">
                                        <button type="button" class="btn btn-success" id="saveNewReport">Сохранить</button>
                                        <button type="button" class="btn btn-secondary" id="cancelNewReport">Отмена</button>
                                    </div>
                                </div>
                
                            </div>
                        </td>
                    </tr>

                    <tr id="infoZakazRow" style="display: none;">
                        <td colspan="6" style="background-color: aliceblue;">
                            <div id="infoZakazForm">
                                Заказ
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </td>
    </tr>
</table>

<script id="infoZakaz-template" type="text/x-handlebars-template">
    <table>
        <thead>
            <tr>
                <th>Код</th>
                <th>Этап производства</th>
                <th>К-во</th>
                <th>Брак</th>
                <th>Надо</th>
                <!-- <th>Можно</th> -->
                <th>Утеря</th>
            </tr>
        </thead>
        <tbody>
            {{#each items}}
            <tr>
                <td class="textAlignCenter">{{КодНовый}}</td>
                <td>{{ЭтапПроизводства}}</td>
                <td class="textAlignEnd">{{Сделано}}</td>
                <td class="textAlignEnd">{{Брак}}</td>
                <!-- <td class="textAlignEnd {{addClass}}">{{Изготовить}}</td> -->
                <td class="textAlignEnd {{addClass}}">{{МожноДелать}}</td>
                <td class="textAlignEnd">{{Утеря}}</td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</script>



<script>
    var access = false;

    $(document).ready(function() {
        initTables();

        initInputProvider();
        initInputSotrudnik();
        initInputTimeMask();
        initInputDate();
        initInputCount();
        initInputWeight();
        initInputPrice();

        // callback при изменении данных в строке для определения показать или убрать строку
        filterForListGroupEtapNeed = function(data, result = true) {
            try {
                if (data['КоличествоРаботы'] == "" || data['КоличествоРаботы'] == "0"){
                    result = false;
                }
            } catch (error) { console.log(error) }

            return result;
        }

        // callback придобавлении строки группового этапа в атрибут пишем есть ли право вносить отчеты
        callbackAddNewRowForListGroupEtapNeed = function (data) {
            try {
                data.data['ДоступApp'].forEach(function(element) {
                    const uidSotr = element['Сотрудник'].uid||'';

                    if (uidSotr === user.uid) {
                        $(`#${data.data.uid}`).attr('access', element['РазрешеноВноситьОтчеты']);
                        return;
                    }
                });
            } catch (error) { console.log(error) }
        }

        // callback при изменении данных в строке для определения показать или убрать строку
        filterForNeed = function(data, result = true) {
            console.log('func filterForNeed', data);  

            try {
                const groupEtapID = $('#listWork').attr('groupEtapID');

                if (groupEtapID !== data['ГрупповойЭтап']['uid']){
                    result = false;
                }

                if (data['МожноДелать'] == ""||data['МожноДелать'] == "0"){
                    result = false;
                }

                if (!data['Заказ']['Активен']){
                    result = false;
                }
            } catch (error) { console.log(error) }

            try {
                if (result) {
                    const row = $("#" + data['uid']);
                    const days = parseInt(data['КоличествоДнейБездействияНадо']);

                    console.log('days', days, 'row', row);

                    if (days >= 5) {
                        console.log('cell', $(row).find('.dataCell[name="КоличествоДнейБездействияНадо"]'));
                        $(row).find('.dataCell[name="КоличествоДнейБездействияНадо"]').addClass('colorRed');
                    }
                }
            } catch (error) { console.log(error) }

            return result;
        }

        callbackAddNewRowForListNeed = function (data) {
            console.log('callbackAddNewRowForListNeed', data);

            try {
                if (access) {
                    $('#' + data.data['uid']).find('.btnPlay').show();        
                } else {
                    $('#' + data.data['uid']).find('.btnPlay').remove(); 
                }
            } catch (error) { console.log(error) }
        }

        callbackWSS = async function(data) {
            console.log('callbackWSS', data);
            callbackTable(data);
        }

        $('#аГруппыЭтаповПроизводства').on('click', '.аГруппыЭтаповПроизводства', function(event){
            console.log(this);

            $('#newReportRow').hide(0);
            $('#infoZakazRow').hide(0);

            const groupEtapID = $(this).attr('id');
            const oldGroupEtapID = $('#listWork').attr('groupEtapID');
            const row = $(this);
            let needInit = false;

            $('#listWork').attr('groupEtapID', groupEtapID)
            
            if (groupEtapID === oldGroupEtapID) {
                if ($('#listWork').is(':visible')) {
                    $('#listWork').hide(200);
                } else {
                    $('#Надо').children('tbody').children('.rowData').remove();
                    needInit = true;
                    $('#listWork').show(200);
                }    
            } else {
                $('#listWork').hide(0);
                $('#Надо').children('tbody').children('.rowData').remove();
                $('#listWork').insertAfter(row);
                $('#listWork').show(200); 
                needInit = true;   
            }

            if (needInit) {
                $('#аГруппыЭтаповПроизводства').children('tbody').children('.rowData').removeClass('selectedGroupEtap');
                $(this).addClass('selectedGroupEtap');
                $('#Надо').data('param', {'groupEtapID':groupEtapID});

                const kod = $(this).find('.dataCell[name="Код"]').text()
                $('#kod').text(kod);

                console.log('listWork visible');
                disableHighlightElement();

                access = eval($(this).attr('access')||'false');

                initTable('#Надо');

                enableHighlightElement();

                $('.addingInfo').addClass('hide');
                $('.etapInfo').removeClass('hide');

                const listEtapDopInfo = ['89fdc2b4-07d8-11ec-816d-000c29006152', 'bf73ce86-47af-11ec-8183-000c29006152', '062236eb-67a8-11ea-813c-000c29006152']

                if (listEtapDopInfo.includes(groupEtapID)) {
                    $('.addingInfo').removeClass('hide'); 
                    $('.etapInfo').addClass('hide'); 
                }

            }else{
                $(this).removeClass('selectedGroupEtap');
            }
        });

        $('#Надо').on('click', '.btnPlay', function(event){
            const rowID = $(this).attr('rowID');
            const row = $('#' + rowID);
            const maxCount = parseInt($(row).find('.dataCell[name="МожноДелать"]').text()||0);
            const data = $(row).data('data');
            const groupEtapID = $('#listWork').attr('groupEtapID');
            const userInfo = $('#menu').data('userInfo');

            clickAnimate(this);

            console.log(data);

            $('#infoZakazRow').hide(0);

            if ($('#newReportRow').is(':visible')) {
                $('#newReportRow').hide(100);
            } else {
                $('#newReportRow').data('data', data);

                $('#provider').val('');
                $('#provider').attr('uid', '');
                setValid('#provider', false);

                $('#sotrudnik').val('');
                $('#sotrudnik').attr('uid', '');
                setValid('#sotrudnik', false);

                $('#date').val('');
                setValid('#date', false);

                $('#timeStart').val('');
                setValid('#timeStart', false);

                $('#timeStop').val('');
                setValid('#timeStop', false);

                $('#count').val('');
                $('#count').attr('maxCount', maxCount);
                setValid('#count', false);

                $('#weight').val('');
                setValid('#weight', false);

                $('#price').val('');
                setValid('#price', false);

                $('#priceForOne').val('');
                setValid('#priceForOne', false);

                $('#workInProviderInput').prop('checked', false);

                $('#groupInputSotrudnik').show();
                $('#groupInputProvider').hide();
                $('.termoobrabotkaProvider').hide();
                $('.obrabotkaProviderPrice').hide();

                if (data.data['ЭтапПроизводства']['НеУчитыватьВремяРаботы']) {
                    $('#workTimePeriod').hide();    
                } else {
                    $('#workTimePeriod').show();    
                }

                $('#newReportRow').attr('report', rowID)
                $('#newReportRow').insertAfter(row);
                $('#newReportRow').show(100);
            }
        });

        function initInputProvider() {
            const userInfo = $('#menu').data('userInfo');

            if (userInfo.data['ПравоВноситьПодряды']) {
                const element = $('#provider');
                const url = $(element).attr('url');

                $(element).autocomplete({ 
                    source: function(req, res) { 
                        $.ajax({ url: url, dataType: "json", data: { term: req.term},
                            success: function(data) { res(data);}
                        });
                    },
                    select: function(event, ui){ 
                        $(this).attr('uid', ui.item.uid);
                        setValid(this, true);
                        $(this).blur();
                    },
                    position: { my: "left bottom", at: "left top" },
                    minLength: 1
                }).on("input" , function() { 
                    $(element).attr('uid', '');
                    setValid(element, false);
                }).on("blur"  , function() { 
                    if(($(element).attr('uid')||'') === ''){
                        $(element).val('');
                    }
                });
            } else {
                $('#workInProvider').hide();
            }
        }

        function initInputSotrudnik() {
            const element = $('#sotrudnik');
            const url = $(element).attr('url');

            $(element).autocomplete({ 
                source: function(req, res) { 
                    $.ajax({ url: url, dataType: "json", data: { term: req.term},
                        success: function(data) { res(data);}
                    });
                },
                select: function(event, ui){ 
                    $(this).attr('uid', ui.item.uid);
                    setValid(this, true);
                    $(this).blur();
                },
                position: { my: "left bottom", at: "left top" },
                minLength: 1
            }).on("input" , function() { 
                $(element).attr('uid', '');
                setValid(element, false);
            }).on("blur"  , function() { 
                if(($(element).attr('uid')||'') === ''){
                    $(element).val('');
                }
            });
        }

        function initInputTimeMask() {

            $('#timeStart').mask('00:A0', {
                'translation':{A: {pattern: /[0-5]/}},
                onComplete: function(cep) {
                    console.log('onComplete cep', cep, this);
                    if(cep != '00:00'){
                        setValid('#timeStart', true);
                    }},
                onChange: function(cep){
                    setValid('#timeStart', false);}
            });

            $('#timeStop').mask('00:A0', {
                'translation':{A: {pattern: /[0-5]/}},
                onComplete: function(cep) {
                    console.log('onComplete cep', cep, this);
                    if(cep != '00:00'){
                        setValid('#timeStop', true);
                    }},
                onChange: function(cep){
                    setValid('#timeStop', false);}
            });
        }

        function initInputDate() {
            $('#date').on("change" , function() {
                const value = $(this).val();
                
                if (value.length == 0) {
                    setValid(this, false);    
                } else {
                    setValid(this, true); 
                }
            })
        }

        function initInputCount() {
            $('#count').on("change" , function() {
                const value = $(this).val();
                const maxCount = parseInt($(this).attr('maxCount')||0);

                if (value == 0 || value === '' || value < 0 || value > maxCount) {
                    setValid(this, false);    
                } else {
                    setValid(this, true); 
                }
            })
        }

        function initInputWeight() {
            $('#weight').on("change" , function() {
                const value = $(this).val();
                console.log(value);
                if (value == 0 || value === '' || value < 0 ) {
                    setValid(this, false);    
                } else {
                    setValid(this, true); 
                }
            })
        }

        function initInputPrice() {
            $('#price').on("change" , function() {
                const value = $(this).val();

                if (value == 0 || value === '' || value < 0 ) {
                    setValid(this, false);    
                } else {
                    setValid(this, true); 
                }
            })
        }

        $('#cancelNewReport').on('click', function(event){
            clickAnimate(this);
            setTimeout(() => { $('#newReportRow').hide(300);}, 200);
        });

        $('#saveNewReport').on('click', function(event){
            clickAnimate(this);

            const workInProvider = $('#workInProviderInput');
            const provider = $('#provider');
            const sotrudnik = $('#sotrudnik');
            const date = $('#date');
            const timeStart = $('#timeStart');
            const timeStop = $('#timeStop');
            const count = $('#count');
            const weight = $('#weight');
            const price = $('#price');
            const priceForOne = $('#priceForOne');

            if (provider.hasClass('invalid') && provider.is(':visible')) {
                toastr.error('Укажите подрядчика')
                return;
            }

            if (sotrudnik.hasClass('invalid') && sotrudnik.is(':visible')) {
                toastr.error('Укажите сотрудника')
                return;
            }

            if (date.hasClass('invalid') && date.is(':visible')) {
                toastr.error('Укажите дату отчета')
                return;
            }

            if (timeStart.hasClass('invalid') && timeStart.is(':visible')) {
                toastr.error('Укажите время начала работы')
                return;
            }

            if (timeStop.hasClass('invalid') && timeStop.is(':visible')) {
                toastr.error('Укажите время окончания работы')
                return;
            }

            if (count.hasClass('invalid')) {
                toastr.error('Укажите сколько штук изготовлено')
                return;
            }

            if (weight.hasClass('invalid') && weight.is(':visible')) {
                toastr.error('Укажите вес одной детали')
                return;
            }

            if (price.hasClass('invalid') && price.is(':visible')) {
                toastr.error('Укажите цену')
                return;
            }

            if (priceForOne.hasClass('invalid') && priceForOne.is(':visible')) {
                toastr.error('Укажите цену')
                return;
            }

            const data = {};
            data.workInProvider = $(workInProvider).prop('checked');
            data.provider = $(provider).attr('uid');
            data.sotrudnik = $(sotrudnik).attr('uid');
            data.date = new Date($(date).val());
            data.timeStart = $(timeStart).val();
            data.timeStop = $(timeStop).val();
            data.count = parseInt($(count).val());
            data.weight = parseInt($(weight).val()||0);
            data.price = parseInt($(price).val()||0);
            data.priceForOne = parseInt($(priceForOne).val()||0);

            data.data = $('#newReportRow').data('data')||{};

            console.log('data', data);

            NProgress.start();

            $.ajax({url: '/app/createNewReport', method: 'POST', contentType: 'application/json',
                data: JSON.stringify(data), 
                success: function(data, status) { 
                    console.log('logToServer', status, data); 

                    if (data.error) {
                        toastr.error(data['Причина']);
                    }else{
                        toastr.success('Отчет создан!');
                    }

                }
            }).always(function() {
                NProgress.done();
                highlight = true;
            });


            setTimeout(() => { $('#newReportRow').hide(300);}, 200);
        });

        $('#workInProviderInput').on('change', function() {
            const data = $('#newReportRow').data('data');

            if (this.checked) {
                $('#groupInputProvider').show();
                $('#groupInputSotrudnik').hide();
                $('#workTimePeriod').hide();

                if (data.data['ГрупповойЭтап']['uid'] === 'c61b8e1e-67a5-11ea-813c-000c29006152') {
                    $('.termoobrabotkaProvider').show(); 
                    $('.obrabotkaProviderPrice').hide();      
                } else {
                    $('.termoobrabotkaProvider').hide();
                    $('.obrabotkaProviderPrice').show();
                }

            } else {
                $('#groupInputSotrudnik').show();
                $('#groupInputProvider').hide();
                $('.termoobrabotkaProvider').hide();
                $('.obrabotkaProviderPrice').hide();
                
                if (data.data['ЭтапПроизводства']['НеУчитыватьВремяРаботы']) {
                    $('#workTimePeriod').hide();    
                } else {
                    $('#workTimePeriod').show();    
                }
            }
        });

        $('#аГруппыЭтаповПроизводства').on('click', '.zakaz', function(event){
            const row = $(this).parent();
            const data = $(row).data('data');
            const zakaz = data.data['Заказ'];
            const zakazUID = zakaz['uid'];
            const oldZakazUID = $('#infoZakazRow').attr('oldZakazUID');
            let needInit = false;

            clickAnimate(this);
            
            $('#infoZakazRow').attr('oldZakazUID', zakazUID);

            if ($('#infoZakazRow').is(':visible')) {
                if (zakazUID !== oldZakazUID) {
                    needInit = true;   
                }else{
                    $('#infoZakazRow').hide(100);
                }    
            }else{
                needInit = true;
            }

            if (needInit) {
                NProgress.start();

                $.ajax({ url: '/app/zakazInfo', type: 'GET', dataType: 'json', data: {zakaz:zakaz.uid}, success: function(response) {
                    console.log('response', response);

                    if (!response.error) {
                        Handlebars.registerHelper('isHighDays', function(days) {
                            console.log('isHighDays', days);
                            return days > 5;
                        });

                        const templateSource = $('#infoZakaz-template').html();
                        const template = Handlebars.compile(templateSource);
                        const items = response['ТекущееСостояниеЭтаповЗаказа']['ЭтапыПроизводства'];

                        items.forEach((item) => {
                            item['Сделано'] = item['Сделано'] === '0' ? '' : item['Сделано'];
                            item['Брак'] = item['Брак'] === '0' ? '' : item['Брак'];
                            item['Изготовить'] = item['Изготовить'] === '0' ? '' : item['Изготовить'];
                            item['Утеря'] = item['Утеря'] === '0' ? '' : item['Утеря'];
                            item['МожноДелать'] = item['МожноДелать'] === '0' ? '' : item['МожноДелать'];

                            item['КоличествоДнейБездействияНадо'] = parseInt(item['КоличествоДнейБездействияНадо']);

                            item['addClass'] = item['КоличествоДнейБездействияНадо'] > 5 ? ' colorRed' : '';
                            
                        });

                        const tableHtml = template({ items: items });
                        $('#infoZakazForm').html(tableHtml);
                        
                        $('#infoZakazRow').insertAfter(row);
                        $('#infoZakazRow').show(200);
                    }
                }, error: function (xhr, status, error) {
                    console.error("Ошибка:", error);
                }, complete: function(response){
                    NProgress.done();
                }});
            };
        });
    });
</script>