<style>
  #content {
    max-width: 500px;
    margin: 0 auto;
  }

  #ЗаявкаНаЗакупку {
    font-size: 1em;
    background-color: inherit;
  }

  thead {
    display: none;
  }

  td {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    border: none;
  }

  #modal .form-control {
    width: 60%;
    margin-left: auto;
  }

  .commandBtn {
    margin-left: auto;
    font-size: xxx-large;
    color: darkgreen;
    line-height: 1em;
  }

  #formNew {
    width: 80%;
    font-size: 30px;
  }

  #saveNew {
    margin-left: auto;
    margin-right: 0.6em;
  }

  .buttonContainer {
    display: flex;
    margin-top: 0.5em;
    justify-content: space-between;
  }

  .rightButtons {
    display: flex;
    justify-content: space-between;
  }

  @media (max-width: 600px) {
    #formNew {
      font-size: 18px;
      width: 90%;
    }

    #saveNew {
      margin-right: 3%;
    }
  }

  .hide {
    display: none;
  }

  .itemComent {
    border: 1px solid #aaa;
    border-radius: 10px;
    /* margin: 10px; */
    margin: 5px 0;
    padding: 5px 10px;
    background-color: white;
  }

  #infoForm {
    max-width: 500px;
    margin: auto;
    padding: 0px 5px;
    user-select: text;
  }

  .form-control {
    font-size: 1em;
    background-color: white !important;
  }

  mark {
    background: yellow;
    padding: 0;
  }

  #textFull {
    margin: 5px 0;
    white-space: break-spaces;
  }

  #kod {
    /*         border: 1px solid #aaa;
        border-radius: 3px;
        padding: 1px 5px; */
    margin-right: 30px;
    font-weight: 600;
    margin-left: 5px;
  }

  #status {
    /*         border: 1px solid #aaa;
        border-radius: 3px;
        padding: 1px 5px; */
    margin-right: 30px;
    font-weight: 600;
    margin-left: 5px;
  }

  #priority {
    /* margin-right: 30px; */
    font-weight: 600;
    /* margin-left: 5px; */
  }

  .srochno {
    color: red;
    margin-left: auto;
  }

  #cancelZayavka {
    margin-left: auto;
  }

  #doneZayavka {
    margin-left: 30px;
  }

  #addNew {
    margin-right: 10px;
  }
</style>

<div id="main">
  <div id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <h3 class="titlePage2">Заявки на закупку</h3>
      <div id="statusMark" class="status">в работе</div>
    </div>

    <div class="commandRow">
      <div class="input-group-search rounded groupSearch" id="groupSearch">
        <input
          type="search"
          id="search"
          class="form-control rounded"
          placeholder="Поиск"
          aria-label="Search"
          aria-describedby="search-addon"
        />
        <span class="input-group-text border-0" id="search-addon">
          <i class="bi bi-search"></i>
        </span>
      </div>

      <div class="btnContainer">
        <div id="sortContainer">
          <img src="img/sort.svg?v=<%= version %>" alt="sort icon" class="commandImg" id="btnSort" />
          <div id="sortList">
            <ul>
              <li id="sortSrok">срок</li>
              <li id="sortStatus">статус</li>
              <li id="sortStanok">станок</li>
              <li id="sortDate">дата</li>
            </ul>
          </div>
        </div>
        <img src="img/check-circle.svg?v=<%= version %>" alt="check icon" class="commandImg commandBtn" id="btnDone" />
        <img src="img/plus-circle.svg?v=<%= version %>" alt="plus icon" class="commandImg commandBtn" id="addNew" />
      </div>
    </div>
  </div>

  <table
    id="ЗаявкаНаЗакупку"
    name="ЗаявкаНаЗакупку"
    url="/app/zakupka"
    callbackBeforeInitTable="callbackBeforeDone"
    filter="callbackFilter"
    callbackAfterInitTable="callbackAfterDone"
    addNevRow="callbackAddNewRow"
    callbackAfterWrite="callbackAfterWrite"
    append="up"
    init
    header
  >
    <tr class="config" style="display: none">
      <td
        title="Дата"
        name="Дата"
        headerClass="colunmDate"
        class="colunmDate"
        style="width: 25%; white-space: normal; display: none"
      >
        <div class="dataCell textAlignCenter" mask="DD.MM HH:mm" typeData="date"></div>
      </td>
      <td title="Текст заявки" class="main" name="ТекстЗаявки" style="width: 55%"></td>
      <td
        title="Автор"
        name="АвторЗаявки"
        headerClass="colunmAuthor"
        class="colunmAuthor"
        style="width: 30%; display: none"
      >
        <div class="dataCell textAlignLeft" style="padding: 5px; overflow: hidden; text-overflow: ellipsis"></div>
      </td>
      <td
        title="Статус"
        name="СтатусЗаявки"
        headerClass="colunmStatus"
        class="colunmStatus"
        style="width: 30%; display: none"
      >
        <div class="dataCell textAlignLeft" style="padding: 5px; overflow: hidden; text-overflow: ellipsis"></div>
      </td>
    </tr>

    <tr id="infoRow" class="hide">
      <td colspan="3" style="background-color: aliceblue">
        <div id="infoForm">
          <div style="display: flex; margin: 5px 0; padding: 5px 0px">
            Номер:
            <div id="kod"></div>
            Статус:
            <div id="status"></div>
            <div id="priority"></div>
          </div>
          <div id="textFull"></div>
          <div id="buttons" style="display: flex; margin-bottom: 20px">
            <button type="button" class="btn btn-secondary" id="cancelZayavka">Отменить</button>
            <button type="button" class="btn btn-success" id="doneZayavka">Готово</button>
          </div>
          <div id="historyComment"></div>
          <div id="blockNewComment" style="display: flex; margin: 5px 0">
            <input
              id="newComment"
              type="text"
              class="form-control"
              placeholder="новый комментарий..."
              aria-describedby="basic-addon2"
            />
            <div class="input-group-append">
              <button id="btnAddNewComment" class="btn btn-success" type="button">Сохранить</button>
            </div>
          </div>
        </div>
      </td>
    </tr>
  </table>
</div>

<div id="formNew" class="formContainer" style="display: none">
  <h5 class="formTitle">Новая заявка на закупку</h5>

  <textarea id="textNew" style="width: 100%; padding: 5px" placeholder="Напишите что и сколько нужно..."></textarea>

  <div class="buttonContainer">
    <button type="button" class="btn btn-secondary formButton" id="setPriority">Срочно</button>
    <div class="rightButtons">
      <button type="button" class="btn btn-success formButton" id="saveNew">Сохранить</button>
      <button type="button" class="btn btn-secondary formButton" id="cancelNew">Отмена</button>
    </div>
  </div>
</div>

<!-- template for tile -->
<style>
  .tileContainer {
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: white;
    margin-bottom: 8px;
    padding: 5px 5px 1px 5px;
    box-shadow: 2px 3px 5px #999;
  }

  .separateDateLine {
    display: flex;

    font-size: small;
    justify-content: center;
    align-items: center;
    margin-bottom: 5px;
    margin-top: 10px;
  }

  .visible {
    display: flex;
  }

  .backgroundYellow {
    background-color: lightyellow;
  }

  .tile1row {
    display: flex;
    font-size: large;
    margin-bottom: 1px;
  }

  .tileText {
    color: black;
    font-weight: bold;
    margin-right: 10px;
    text-wrap: wrap;
  }

  .tileTopic {
  }

  .tile2row {
    display: flex;
    justify-content: space-between;
    font-size: small;
    color: darkgray;
  }

  .tileStatus {
    width: 30%;
  }

  .tileZakupka {
    width: 20%;
  }
  .tileTimer {
    width: 40%;
    text-align: end;
  }

  .tileEye {
    width: 10%;
    text-align: end;
  }
</style>

<script id="tileTemplate" type="text/x-handlebars-template">
  <div class='tileContainer {{doneClass}}'>
    <div class='tile2row'>
      <div class='tileStatus'>{{date}}</div>
      <div class='tileTimer {{timerClass}}' date='{{dateSrok}}'>{{status}}</div>

      <div class='tileEye'>
        {{#if showEyeIcon}}
          <i class='bi bi-eye-slash'></i>
        {{/if}}
      </div>
    </div>

    <div class='tile1row'>
      <div class='tileText'>{{text}}</div>
    </div>

  </div>
</script>

<!-- zakupka info -->
<div id="zakupkaInfo" style="display: none">
  <div class="commandPanel">
    <h4 class="titlePage2">Заявка на закупку</h4>
    <h4 id="orderNum" class="titlePage2">0001</h4>
    <i id="closeZakupkaInfo" class="bi bi-x-circle commandBtn"></i>
  </div>
  <div id="zakupkaContainer">
    <div class="form-group">
      <pre id="zakupkaText">Текс закупки</pre>
    </div>
    <div class="form-group" id="zakupkaPhoto"></div>
    <div class="form-group">
      <label>Дата:</label>
      <input type="text" readonly class="form-control" id="zakupkaDate" />
    </div>
    <div class="form-group">
      <label>Автор:</label>
      <input type="text" readonly class="form-control" id="zakupkaAuthor" />
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    let tableID = '#ЗаявкаНаЗакупку';
    $(tableID).data('param', { active: true });
    var viewRowAllUsers = false;

    initTables();

    addSubscribeWSS('ЗаявкаНаЗакупку_all');

    // callback при получении данных от сервера по wss
    callbackWSS = async function (data) {
      callbackTable(data);
    };

    // callback при изменении данных в строке для определения показать или убрать строку
    callbackFilter = function (data, result = true) {
      console.log('callbackFilter', data);

      if (!viewRowAllUsers) {
        console.log('check access');

        if (data['Сотрудник']['uid'] !== user.uid) {
          result = false;
        }
      }

      if (data['СтатусЗаявки'] === 'Готово') {
        result = false;
      }

      if (data['СтатусЗаявки'] === 'Отменена') {
        result = false;
      }

      return result;
    };

    // callback перед отрисовкой таблицы
    callbackBeforeDone = function (data) {
      // console.log('callbackBeforeDone', data);
      // if (data.hasOwnProperty('full')) {
      //   viewRowAllUsers = data.full;
      // }
      // console.log('viewRowAllUsers', viewRowAllUsers);
      // if (viewRowAllUsers) {
      //   $('.colunmAuthor').show();
      //   $('.colunmStatus').hide();
      // } else {
      //   $('.colunmAuthor').hide();
      //   $('.colunmStatus').show();
      // }
    };

    // callback после отрисовки таблицы
    callbackAfterDone = function (data) {
      console.log('callbackAfterDone', data);
    };

    // callback после вставки новой пустой строки, перед заполнением данными
    callbackAddNewRow = function (data) {
      console.log('callbackAddNewRow', data);
    };

    // callback после внесения изменений в строку с сервера
    callbackAfterWrite = function (data) {
      console.log('callbackAfterWrite', data);

      const table = $(`#${data.tableID}`);
      const row = $(table).find('#' + data.uid);
      let currentRow = $('#' + data.data['uid']);
      currentRow.attr('uid', data.data['uid']);
      let cellForTemplate = currentRow.find('td.main');

      const cell = $(row).find('div[name="АвторЗаявки"]');

      $(cell).html(`<a href="tel:${data.data['Сотрудник']['ОсновнойНомерТелефона']}">${data.data['АвторЗаявки']}</a>`);

      updateHistory();

      const text = data.data.ТекстЗаявки;
      const date = formatDateTime(data.data.Дата);
      const status = data.data.СтатусЗаявки;

      const templateData = {
        text: text,
        date: date,
        status: status,
        showEyeIcon: false,
      };

      generateFromTemplate('#tileTemplate', templateData, cellForTemplate);
    };

    $('#search').on('input', function () {
      console.log('search');
      let searchTerms = $(this).val().split(' ').filter(Boolean);
      $('.rowData').each(function () {
        console.log('row', this);

        let found = true;
        let elements = $(this)
          .find('.tileText')
          .map(function () {
            return { el: $(this) };
          })
          .get();

        elements.forEach(element => {
          element.text = element.el.text().replace(/<mark>|<\/mark>/g, '');
        });

        if (searchTerms.length > 0) {
          found = searchTerms.every(term => {
            const regex = new RegExp(`(${term})`, 'gi');
            return elements.some(element => {
              if (element.text.match(regex)) {
                element.text = element.text.replace(regex, '<mark>$1</mark>');
                return true;
              }
              return false;
            });
          });
        }

        $(this).find('.tileContainer').parent().toggleClass('hide', !found);
        console.log('parent', $(this).find('.tileContainer').parent());

        elements.forEach(element => {
          element.el.html(element.text);
        });

        console.log('elements', elements);
      });
    });

    $('#textNew').on('change', function () {
      const value = $(this).val();

      if (value === '') {
        setValid(this, false);
      } else {
        setValid(this, true);
      }
    });

    function openNewOrder(time) {
      console.log('openNewOrder');

      $('#textNew').val(time);
      $('#main').hide(time);
      $('#formNew').show(time);
    }

    function hideNewOrder(time) {
      $('#formNew').hide(time);
      $('#main').show(time);
    }

    // клик по кнопке Добавить отчет
    $('#addNew').on('click', function (event) {
      clickAnimate(this);

      openNewOrder();
      // return;

      setTimeout(() => {
        $('#formNew').show(300);
      }, 200);
      setTimeout(() => {
        $('#addNew').hide(300);
      }, 200);

      $('#saveNew').prop('disabled', false);

      $('#textNew').val('');
      setValid('#textNew', false);

      $('#setPriority').removeClass('btn-danger');
      $('#setPriority').addClass('btn-secondary');

      setTimeout(() => {
        $('#textNew').focus();
      }, 500);
      window.scrollBy(0, 80);
    });

    $('#saveNew').on('click', function (event) {
      clickAnimate(this);

      $(this).prop('disabled', true);

      const textNew = $('#textNew');

      if (textNew.hasClass('invalid')) {
        toastr.error('Напишите что нужно купить!');
        return;
      }

      const srochno = $('#setPriority').hasClass('btn-danger');

      setTimeout(() => {
        $('#formNew').hide(300);
      }, 200);
      setTimeout(() => {
        $('#addNew').show(300);
      }, 200);

      const data = {};
      data.textNew = textNew.val();
      data.srochno = srochno;

      NProgress.start();

      $.ajax({
        url: '/app/zakupka',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log('success POST', status, data);
        },
      }).always(function () {
        NProgress.done();
      });

      hideNewOrder();
    });

    $('#cancelNew').on('click', function (event) {
      clickAnimate(this);
      hideNewOrder();

      $('#formNew').hide();

      $('#addNew').show();
    });

    function openZakupkaInfo(zakupkaUID) {
      $('#main').hide();
      $('#zakupkaInfo').show();
    }

    function closeZakupkaInfo() {
      $('#zakupkaInfo').hide();
      $('#main').show();
    }

    $('#closeZakupkaInfo').on('click', function () {
      closeZakupkaInfo();
    });
    $('#ЗаявкаНаЗакупку').on('click', '.rowData', function (event) {
      console.log('click rowData');

      let curentRowID = $(this).attr('id');
      let prevRowID = $('#infoRow').attr('curentRow') || '';
      console.log('current row', $(this), $(this).attr('uid'));
      const zakupkaUID = $(this).attr('uid');

      universalRequest(
        '/app/zakupka',
        'GET',
        {},
        { doc: zakupkaUID },
        function onSuccess(response) {
          console.log('Success callback:', response);
        },
        function onError(error) {
          console.log('Error callback:', error);
        },
        function onComplete() {
          console.log('Request completed');
        }
      );

      openZakupkaInfo();
      const data = $(this).data('data');
      renderZakupkaInfo(data);

      return;

      if (curentRowID === prevRowID) {
        $('#infoRow').toggleClass('hide', true);
        $('#infoRow').attr('curentRow', '');
      } else {
        $('#infoRow').toggleClass('hide', false);
        $('#infoRow').attr('curentRow', curentRowID);
        $('#infoRow').insertAfter(this);

        let data = $(this).data('data').data;

        $('#kod').text(data['Номер']);
        $('#status').text(data['СтатусЗаявки']);

        if (data['Приоритет'] === 'Срочно') {
          $('#priority').text('Срочно');
          $('#priority').addClass('srochno');
        } else {
          $('#priority').text('');
          $('#priority').removeClass('srochno');
        }

        $('#newComment').val('');
        setValid('#newComment', false);

        $('#textFull').text(data['ТекстЗаявки']);
        updateHistory();
      }
    });

    function renderZakupkaInfo(data) {
      const uid = data.data.uid;
      const zakupkaText = data.data.ТекстЗаявки;
      const zakupkaDate = formatDateTime(data.data.Дата);
      const zakupkaAuthor = data.data.Сотрудник.Наименование;

      $('#zakupkaInfo').attr('uid', uid);
      $('#zakupkaText').val(zakupkaText);
      $('#zakupkaDate').val(zakupkaDate);
      $('#zakupkaAuthor').val(zakupkaAuthor);
    }

    function updateHistory() {
      let curentrow = $('#infoRow').attr('curentrow') || '';

      if (curentrow === '') {
        return;
      }

      let currRow = $('#' + curentrow);

      if ($(currRow).is(':visible')) {
        let data = $(currRow).data('data').data;
        let history = data['ИсторияКомментариев'];
        console.log(history);

        $('#historyComment').html('');

        $.each(history, function (index, item) {
          let dateRow = moment(item['Дата']).format('DD.MM HH:mm');
          let sotrudnik = item['Сотрудник']['Наименование'];

          let row = $('<div class="itemComent">');
          row.append(
            `<a style='white-space: break-spaces;'>${item['НомерСтроки']}. <strong>${dateRow} - ${sotrudnik}</strong> : ${item.Комментарий}</a>`
          );
          $('#historyComment').append(row);
        });
      }
    }

    // клик по кнопке Добавить новый комментарий
    $('#btnAddNewComment').on('click', function (event) {
      clickAnimate(this);

      const data = {};
      data.textNew = $('#newComment').val();
      data.curentrow = $('#infoRow').attr('curentrow');

      if (data.textNew === '') {
        toastr.error('Пустой комментарий');
        return;
      }

      NProgress.start();

      $.ajax({
        url: '/app/zakupka',
        method: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log('success PUT', status, data);
        },
      }).always(function () {
        NProgress.done();
        $('#newComment').val('');
        setTimeout(updateHistory, 1000);
      });
    });

    $('#setPriority').on('click', function (event) {
      if ($('#setPriority').hasClass('btn-secondary')) {
        $('#setPriority').removeClass('btn-secondary');
        $('#setPriority').addClass('btn-danger');
      } else {
        $('#setPriority').removeClass('btn-danger');
        $('#setPriority').addClass('btn-secondary');
      }
    });

    $('#cancelZayavka').on('click', function (event) {
      clickAnimate(this);

      const data = {};
      data.change = [{ key: 'СтатусЗаявки', value: 'Отменена' }];
      data.curentrow = $('#infoRow').attr('curentrow');

      NProgress.start();

      $.ajax({
        url: '/app/zakupka',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log('success POST', status, data);
        },
      }).always(function () {
        NProgress.done();
        $('#infoRow').toggleClass('hide', true);
        $('#infoRow').attr('curentRow', '');
      });
    });

    $('#doneZayavka').on('click', function (event) {
      clickAnimate(this);

      const data = {};
      data.change = [{ key: 'СтатусЗаявки', value: 'Готово' }];
      data.curentrow = $('#infoRow').attr('curentrow');

      NProgress.start();

      $.ajax({
        url: '/app/zakupka',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data, status) {
          console.log('success POST', status, data);
        },
      }).always(function () {
        NProgress.done();
        $('#infoRow').toggleClass('hide', true);
        $('#infoRow').attr('curentRow', '');
      });
    });
  });
</script>
