<style>
  #content {
    max-width: 500px;
    margin: 0 auto;
  }

  .titleContainer {
    width: 100%;
    align-items: center;
    margin-bottom: 10px;
  }

  #qpart_demz {
    width: 100%;
    font-size: medium;
    padding: 0 5px;
  }

  .ui-autocomplete {
    z-index: 1000;
  }
</style>

<div id="main">
  <div id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-arrow-left-right" id="pageIcon"></i>

      <h3 class="titlePage">QPART - ДЕМЗ</h3>

      <img src="img/plus-circle.svg?v=<%= version %>" alt="plus icon" class="commandImg commandBtn" id="addNew" />
    </div>
  </div>
  <div
    id="qpart_demz"
    url="/app/qpart_demz"
    callbackAfterLoadData="callbackAfterLoadData"
    callbackForRender="callbackForRender"
    type="plate"
  ></div>
</div>

<!-- doc info -->
<style>
  .form-group {
    display: flex;
    align-items: center;
  }

  .form-group label {
    margin-bottom: 0;
    transition: 2s;
    width: 50%;
  }

  #docType {
    text-align: center;
    font-weight: 600;
  }
  .commandBtn {
    margin-right: 5px;
  }

  #newDocForm {
    font-size: large;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
  }

  .firstRow {
    display: flex;
    gap: 10px;
  }

  .flex1 {
    flex: 1;
  }

  .inputTable {
    border-collapse: collapse;
    border: none;
  }

  .inputTable tr,
  .inputTable td {
    border: none;
  }

  .inputTable tbody tr:last-child {
    background-color: #f0f0f0;
    color: #a0a0a0;
    opacity: 0.6;
  }

  .inputTable tbody tr:last-child input {
    background-color: #f0f0f0;
    color: #a0a0a0;
    cursor: not-allowed;
  }

  thead {
    font-size: medium;
  }

  .stage {
    width: 50%;
  }

  .number {
    width: 30%;
  }

  .defect {
    width: 20%;
  }

  #defectCheck {
    transform: scale(2);
  }

  #tableForm {
    margin-bottom: 10px;
  }

  #makePhotoButton {
    font-size: xxx-large;

    line-height: normal;
  }
  #downloadPhotoButton {
    font-size: xxx-large;

    line-height: normal;
  }
</style>

<div id="docInfo" style="display: none">
  <!-- <div class="commandPanel">
    <i id="closeDocInfo" class="bi bi-x-circle commandBtn"></i>
  </div> -->
  <div id="forTitle"></div>

  <div id="newDocForm" style="display: none">
    <div class="form-group">
      <!-- <label for="docType">Вид операції</label> -->
      <select class="form-select form-control" id="docType" aria-label="Вид операції">
        <option value="qpart">QPART => ДЕМЗ</option>
        <option value="demz">ДЕМЗ => QPART</option>
      </select>
    </div>

    <div class="firstRow">
      <div class="form-group input-group mb-3 flex1">
        <div class="input-group-prepend">
          <span class="input-group-text" id="basic-addon1"><i class="bi bi-truck"></i></span>
        </div>
        <input
          type="number"
          class="form-control"
          aria-describedby="basic-addon1"
          id="tripNumber"
          placeholder="номер авто"
        />
      </div>

      <div class="form-group input-group mb-3 flex1">
        <div class="input-group-prepend">
          <span class="input-group-text" id="basic-addon1"><i class="bi bi-calendar"></i></span>
        </div>
        <input type="text" class="form-control" id="docDate" placeholder="дата" />
      </div>
    </div>

    <div id="tableForm">
      <table class="inputTable" id="inputTable">
        <thead>
          <tr>
            <th class="stage">Етап</th>
            <th class="number">К-ть</th>
            <th class="defect">Брак</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><input type="text" class="form-control controledInput stageInput" placeholder="етап..." /></td>
            <td><input type="number" class="form-control controledInput numberInput" placeholder="кількість..." /></td>
            <td><input type="checkbox" class="controledInput" id="defectCheck" /></td>
          </tr>
        </tbody>
      </table>
    </div>

    <div id="imgContainer"></div>

    <div class="form-group" id="orderButtonGroup">
      <div id="groupButton">
        <input type="file" id="makePhoto" accept="image/*" capture="environment" multiple style="display: none" />
        <label for="makePhoto"
          ><i class="bi bi-camera" id="makePhotoButton" elementForAttach="attachedFilesForNewOrder"></i
        ></label>
        <input type="file" id="downloadPhoto" accept="image/*" style="display: none" />
        <label for="downloadPhoto"
          ><i class="bi bi-download" id="downloadPhotoButton" elementForAttach="attachedFilesForNewOrder"></i
        ></label>

        <button type="button" class="btn btn-secondary btn-lg" id="cancelDoc">Отмена</button>
        <button type="button" class="btn btn-success btn-lg" id="saveDoc">Сохранить</button>
      </div>
    </div>
  </div>

  <div id="forTable"></div>
</div>

<style>
  .docContainer {
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: white;
    margin-bottom: 15px;
    padding: 5px;
    box-shadow: 2px 3px 5px #999;
    width: 100%;
  }

  .detailed {
    font-size: 16px;
  }

  .detailed .stage {
    width: 60%;
  }

  td {
    padding: 3px;
  }

  .count {
    width: 20%;
    text-align: right;
  }

  .brak {
    position: relative;
  }

  .brak::after {
    content: 'брак';
    position: absolute;
    background-color: white;
    color: red;
    right: 5px;
    padding: 0 0 0 5px;
  }

  .docTitle {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
    font-size: large;
    padding: 0 3px;
  }

  .qpart-demz {
    background-color: darkgreen;
    color: white;
    padding: 2px 4px 0 4px;
    border-radius: 4px;
  }

  .demz-qpart {
    background-color: rgb(0, 38, 255);
    color: white;
    padding: 2px 4px 0 4px;
    border-radius: 4px;
  }

  .docNumber {
    width: 25%;
  }

  .docDateEvent {
    width: 25%;
    text-align: end;
  }
</style>

<script id="tileTemplate" type="text/x-handlebars-template">
  {{> docTitleTemplate}}
  {{> tableDetailsTemplate}}
</script>

<script id="docTitleTemplate" type="text/x-handlebars-template">
  <div class='docTitle'>
    <div class='docNumber'><i class='bi bi-truck'></i> {{НомерПоездкиЗаДень}}</div>
    <div class='docName {{className}}'>{{ВидОперации}}</div>
    <div class='docDateEvent'>{{ДатаСобытияФормат}}</div>
  </div>
</script>

<script id="tableDetailsTemplate" type="text/x-handlebars-template">
  <table class='detailed'>
    <tbody>
        {{#each Детали}}
          <tr>
            <td class='stage {{#if Брак}}brak{{/if}}'>{{Этап.Наименование}}</td>
            <td class='count'>{{Количество}} шт</td>
          </tr>
        {{/each}}
    </tbody>
  </table>
</script>

<script>
  $(document).ready(function () {
    const platesID = '#qpart_demz';
    pageUID = 'ce4e3ff4-50d6-11ef-825f-000c29006152';
    userRights = $('#menu').data('userRight')[pageUID];
    const uid = user.uid;

    Handlebars.registerPartial('docTitleTemplate', $('#docTitleTemplate').html());
    Handlebars.registerPartial('tableDetailsTemplate', $('#tableDetailsTemplate').html());

    const source = document.getElementById('tileTemplate').innerHTML;
    const template = Handlebars.compile(source);

    const defaultParam = {
      page: 0,
      limit: 20,
    };

    $(platesID).data('defaultParam', defaultParam);
    initListPlate(platesID, true);

    $.datepicker.setDefaults($.datepicker.regional['ua']);

    $('#docDate').datepicker({
      changeMonth: true,
      showOtherMonths: true,
      selectOtherMonths: true,
      dateFormat: 'dd.mm.yy',
    });

    callbackAfterLoadData = function (response) {
      const param = $(platesID).data('param');
      param.date = response.nextDate;
      $(platesID).data('param', param);
    };

    callbackForRender = function (data) {
      containerForTile = `#${data.uid}`;
      if ($(containerForTile).length === 0) return;
      console.log('QPART data', data, containerForTile);
      data.className = data.ВидОперации === 'QPART => ДЕМЗ' ? 'qpart-demz' : 'demz-qpart';
      console.log('data', data);

      const html = template(data);
      $(containerForTile).html(html);
    };

    function docInfoOpen(data = {}, mode = 'view') {
      console.log('data, mode', data, mode);
      $('#main').hide();
      $('#docInfo').show();
      if (mode === 'view') {
        console.log('mode = view');
        renderExistDoc(data);
      } else {
        renderNewDoc();
      }
    }

    function docInfoClose() {
      $('#docInfo').hide();
      $('#main').show();
      $('#forTitle').empty();
      $('#forTable').empty();
      $('#inputTable tbody tr').not(':first').remove();
      $('#inputTable tbody tr:first').find('input').val('');
      $('#inputTable tbody tr:first').find('input[type="checkbox"]').prop('checked', false);
      $('#newDocForm').hide();
    }

    function renderExistDoc(data) {
      const titleTemplate = Handlebars.compile($('#docTitleTemplate').html());
      const tableDetailsTemplate = Handlebars.compile($('#tableDetailsTemplate').html());
      const titleHtml = titleTemplate(data);
      const html = tableDetailsTemplate(data);
      $('#forTitle').html(titleHtml);
      $('#forTable').html(html);
    }

    function renderNewDoc() {
      console.log('userRights', userRights);
      if (userRights.canCreateDEMZQPART) {
        $('#docType').val('demz');
      }

      if (userRights.canCreateQPARTDEMZ) {
        $('#docType').val('qpart');
      }

      if (!userRights.canCreateDEMZQPART || !userRights.canCreateDEMZQPART) {
        $('#docType').prop('disabled', true);
      }

      $('#newDocForm').show();
    }

    $('#addNew').on('click', function (event) {
      clickAnimate(this);
      console.log('addNew');
      docInfoOpen({}, 'create');
    });

    $('#closeDocInfo').on('click', function () {
      console.log('closeDocInfo');
      clickAnimate(this);
      docInfoClose();
    });

    $(document).on('click', '.plateListItem', function () {
      const data = $(this).data('data');
      console.log('data', data);
      docInfoOpen(data, 'view');
    });

    const autocompleteStage = ['Опція 1', 'Опція 2', 'Опція 3', 'Опція 4'];

    function initializeAutocomplete() {
      $('input.stageInput').autocomplete({
        source: autocompleteStage,
        minLength: 0,
      });
    }

    initializeAutocomplete();

    function addRow() {
      const newRow = `
             <tr>
              <td><input type="text" class="form-control controledInput stageInput" placeholder="етап" /></td>
              <td><input type="number" class="form-control controledInput numberInput" placeholder="кількість" /></td>
              <td><input type="checkbox" class="controledInput" id="defectCheck" /></td>
            </tr>
        `;
      $('#inputTable tbody').append(newRow);
      initializeAutocomplete();
    }

    $('#inputTable').on('focus', 'input.controledInput', function () {
      console.log('focus on table');
      const $lastRow = $('#inputTable tbody tr:last-child');
      if ($(this).closest('tr').is($lastRow)) {
        addRow();
      }
    });

    function collectTableData() {
      const tableData = [];

      $('#inputTable tbody tr')
        .not(':last')
        .each(function () {
          console.log('collectTableData this', this);
          const detail = $(this).find('input.stageInput').val();
          const count = $(this).find('input.numberInput').val();
          const defect = $(this).find('input[type="checkbox"]').is(':checked');

          tableData.push({
            Деталь: detail,
            Количество: count,
            Брак: defect,
          });
        });

      $('#inputTable').data('data', tableData);
    }

    $('#inputTable').on('blur', 'input', function () {
      collectTableData();
    });

    $('#inputTable').on('change', 'input[type="checkbox"]', function () {
      collectTableData();
    });

    function getMediaFiles() {
      const mediaFiles = [];
      $('#imgContainer .attachedImg .src-source').each(function (index) {
        const src = $(this).attr('src-source');
        const name = (index + 1).toString() + '.png';
        mediaFiles.push({
          name: name,
          data: dataURLtoBlob(src),
        });
      });
      console.log('Generated media files:', mediaFiles);
      return mediaFiles;
    }

    function dataURLtoBlob(dataURL) {
      const [header, data] = dataURL.split(',');
      const mime = header.match(/:(.*?);/)[1];
      const binary = atob(data);
      const array = [];
      for (let i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
      }
      return new Blob([new Uint8Array(array)], { type: mime });
    }

    $('#saveDoc').on('click', async function () {
      console.log('saveDoc on click');
      clickAnimate(this);
      const mediaFiles = getMediaFiles();

      try {
        await saveFilesToStorage(mediaFiles, uid, uid);
        console.log('Files saved successfully!');
      } catch (error) {
        console.error('Error saving files:', error);
      }

      const tripNumber = $('#tripNumber').val();
      if (tripNumber === '') {
        toastr.error('Заповніть номер відправлення');
        $('#tripNumber').focus();
        return;
      }

      const docDate = $('#docDate').val();
      if (docDate === '') {
        toastr.error('Заповніть номер відправлення');
        $('#docDate').focus();
        return;
      }

      const details = $('#inputTable').data('data');

      console.log('tripNumber, docDate, details', tripNumber, docDate, details);
      return;

      NProgress.start();
      console.log('statusZakupka', statusZakupka);

      let media = [];
      let names = [];
      $('#attachedFilesForNewOrder')
        .children()
        .each((index, child) => {
          const blob = $(child).children('.source').data('blob');
          const blobPreview = $(child).children('.preview').data('blob');

          let file = { data: blob };
          let filePreview = { data: blobPreview };
          if (blob.type === 'image/jpeg') {
            file.name = index.toString() + '.png';
            filePreview.name = 'p' + index.toString() + '.png';
          } else if (blob.type === 'video/mp4') {
            file.name = index.toString() + '.mp4';
            filePreview.name = 'p' + index.toString() + '.png';
          } else {
            file.name = index.toString() + '.none';
            console.log('unknown type of blob', blob.type, file.name);
          }

          media.push(file);
          media.push(filePreview);
          names.push(file.name);
        });

      const data = {
        textNew: zakupkaText,
        priority: priority,
        files: names,
      };

      console.log('data from zakupkaForm', data);

      sendDataTo1C(data, 'POST', async function (response) {
        await saveFilesToStorage(media, response.uid, response.uid);
        $('#formZakupka').hide();
        $('#content').show();
      });
      NProgress.done();
    });

    $('#cancelDoc').on('click', function () {
      docInfoClose();
    });

    function handleFileSelection(files, inputElement) {
      const imgContainer = $('#imgContainer');

      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        reader.onload = function (event) {
          const imgWrapper = $('<div>').addClass('attachedImg');

          const img = $('<img>')
            .addClass('src-source')
            .attr('src-source', event.target.result)
            .attr('src', event.target.result)
            .attr('alt', 'Image')
            .css({
              'object-fit': 'cover',
              margin: '5px',
              height: '150px',
            });

          imgWrapper.append(img);

          imgContainer.append(imgWrapper);
        };

        reader.readAsDataURL(file);
      }
    }

    $(document).on('click', '.attachedImg', function () {
      mediaviewer(this);
    });

    $('#makePhoto').on('change', function (event) {
      const files = event.target.files;
      if (files.length > 0) {
        handleFileSelection(files, this);
        $(this).val('');
      }
    });

    $('#downloadPhoto').on('change', function (event) {
      const files = event.target.files;
      if (files.length > 0) {
        handleFileSelection(files, this);
      }
    });
  });
</script>
