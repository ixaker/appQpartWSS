<style>
  #content {
    max-width: 500px;
    margin: 0 auto;
  }

  header h1 {
    font-size: xx-large;
  }
  /*
      input[type='date']::-webkit-calendar-picker-indicator {
        opacity: 0;
      }

      input[type='date'] {
        -moz-appearance: textfield;
      }

      input[type='date']::-ms-clear {
        display: none;
      }

      input[type='date'] {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 0;
        width: auto;
      } */

  .titleContainer {
    width: 100%;
    align-items: center;
    margin-bottom: 10px;
  }

  .commandPanel {
    display: flex;
  }

  #qpart_demz {
    width: 100%;
    font-size: medium;
    padding: 0 5px;
  }

  .ui-autocomplete {
    z-index: 1000;
  }

  .form-control {
    font-size: large;
    height: auto;
    padding: 0;
    line-height: auto;
  }

  .ui-autocomplete {
    font-size: large;
  }

  .photoCount {
    font-size: x-large;
    position: relative;
  }

  .photoCountContainer {
    display: flex;
    align-items: center;
    gap: 3px;
  }
</style>

<div id="main">
  <div id="commandPanel" class="commandPanel">
    <div class="titleContainer">
      <i class="bi bi-arrow-left-right" id="pageIcon"></i>

      <h3 class="titlePage">QPART - ДЕМЗ</h3>
      <div id="btnGroup">
        <div id="btnQpart">
          <img
            src="img/plus-circle.svg?v=<%= version %>"
            alt="plus icon"
            class="commandImg commandBtn"
            id="addNewQpart"
          />
          <div class="btnDesctiption">QPART</div>
        </div>
        <div id="btnDemz">
          <img
            src="img/plus-circle.svg?v=<%= version %>"
            alt="plus icon"
            class="commandImg commandBtn"
            id="addNewDemz"
          />
          <div class="btnDesctiption">ДЕМЗ</div>
        </div>
      </div>
    </div>
  </div>
  <div
    id="qpart_demz"
    url="/app/qpart_demz"
    callbackAfterLoadData="callbackAfterLoadData"
    callbackForRender="callbackForRender"
    callbackClick="callbackClick"
    type="plate"
    paggination="false"
  ></div>
</div>

<!-- doc info -->
<style>
  .form-group {
    display: flex;
    align-items: center;
  }

  .form-group label {
    margin-bottom: 0;
    transition: 2s;
  }

  #docType {
    text-align: center;
    font-weight: 600;
  }
  .commandBtn {
    margin-right: 5px;
  }

  #newDocForm {
    font-size: large;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
  }

  #forTable {
    margin-bottom: 10px;
  }

  .firstRow {
    display: flex;
    gap: 10px;
  }

  .flex1 {
    flex: 1;
  }

  .inputTable {
    border-collapse: collapse;
  }

  .inputTable td:focus-within {
    background-color: aliceblue;
  }

  /* .inputTable tbody tr:last-child {
        background-color: #f0f0f0;
        color: #a0a0a0;
        opacity: 0.6;
      }


      .inputTable tbody tr:last-child input {
        background-color: #f0f0f0;
        color: #a0a0a0;
      } */

  thead {
    font-size: medium;
  }

  .controledInput {
    border: none;
  }

  .controledInput:focus {
    border: none;
    box-shadow: none;
    background-color: aliceblue;
  }

  #tableForm {
    margin-bottom: 10px;
  }

  #downloadPhotoButton,
  #makePhotoButton {
    font-size: xxx-large;
    line-height: normal;
    width: 100%;
  }

  .photoBtn {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .photoLabel {
    width: 100%;
    margin-bottom: 0;
    flex: 1;
    justify-content: center;
    align-items: center;
    display: flex;
  }

  .imgContainer {
    display: grid;
    grid-template-columns: repeat(3, minmax(100px, 1fr));
    gap: 5px;
    justify-content: start;
  }

  .attachedImg {
    width: 100%;
    position: relative;
    min-height: 100px;
    display: flex;
    align-items: flex-start;
  }

  .attachedImg img {
    width: 100%;
  }

  .preview {
    background: linear-gradient(90deg, #e0e0e0 25%, #f5f5f5 50%, #e0e0e0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: 4px;
    width: 100%;
    height: 100px;
  }

  @keyframes loading {
    0% {
      background-position: 0% 0%;
    }
    100% {
      background-position: 100% 0%;
    }
  }

  .preview.loaded {
    background: none;
    height: auto;
  }

  #btnGroup {
    margin-left: auto;
    display: flex;
  }

  #btnQpart,
  #btnDemz {
    margin-right: 5px;
    margin-left: 15px;
    height: fit-content;
  }

  #addNewDemz,
  #addNewQpart {
    margin: 0;
  }
  .btnDesctiption {
    margin-top: 5px;
    font-size: x-small;
    width: 100%;
    text-align: center;
    display: none;
    color: green;
    font-weight: bold;
  }

  #docTypeQpart,
  #docTypeDemz {
    display: none;
    font-size: x-large;
    text-align: center;
    margin-bottom: 10px;
    background-color: white;
    padding: 5px;
    border-radius: 5px;
  }

  #groupButton {
    justify-content: flex-start;
  }

  #details {
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .detailHead {
    display: flex;
  }

  .numberInput {
    text-align: right;
    padding: 0;
  }

  .detailCheckbox {
    display: flex;
    justify-content: flex-start;
    gap: 5px;
    font-size: large;
  }

  .detailConfirm {
    display: flex;
    justify-content: space-between;
  }

  .checkboxGroup {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .hidden-checkbox {
    display: none;
  }

  .checkbox-label {
    display: inline-flex;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    text-align: center;
    align-items: center;
    font-weight: 700;
    font-size: small;
    line-height: 1.5;
    background-color: #6c757d;
    color: #fff;
    border: 1px solid #6c757d;
    transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s;
    cursor: pointer;
  }

  .hidden-checkbox:checked + .checkbox-label {
    background-color: darkgreen;
    border-color: darkgreen;
  }

  .checkbox-label:active {
    background-color: #004085;
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
  }

  .checkbox-label i {
    margin-left: 0.5rem;
  }
</style>

<script id="docTemplate" type="text/x-handlebars-template">
  <header class='commandPanel'>
    <h1>Відвантаження</h1>
    <i id='closeDocInfo' class='bi bi-x-circle commandBtn'></i>
  </header>

  <div
  class='plateListItem'
  uid="{{uid}}"
  >
    <div class='docTitle'>
      <div class="docNumber input-group">
        <div class="input-group-prepend">
          <span class="input-group-text">
            <i class="bi bi-truck"></i>
          </span>
        </div>
        <input
          type="number"
          class="form-control tripNumber"
          name="tripNumber"
          placeholder=""
          aria-describedby="номер машини"
          value="{{НомерПоездкиЗаДень}}"
          min="0"
          max="99"
          oninput="if(this.value.length > 2) this.value = this.value.slice(0, 2);"
          {{#unless canEdit}}disabled{{/unless}}
        />
      </div>

      <div class='docName {{className}}'>{{ВидОперации}}</div>
      <div class='docDateEvent input-group'>
          <input
            type='text'
            class='form-control docDate'
            placeholder=''
            aria-describedby='дата'
            value='{{ДатаСобытияФормат}}'
            data-date='{{Дата}}'
            readonly
            {{#unless canEdit}}disabled{{/unless}}
          />
      </div>
    </div>

    <div id='details'>
      <div class='detailHead'>
        <table class='detailed' id='inputTable'>
          <thead>
            <tr>
              <th class='stage'>Этап</th>
              <th class='count'>К-во</th>
              <th class='defect'><i class='bi bi-clipboard-x-fill'></i></th>
              <th class='rework'><i class='bi bi-arrow-repeat'></i></th>
              <!-- <th class='comment'><i class="bi bi-chat-right-text-fill"></i></th> -->
            </tr>
          </thead>
          <tbody>
            {{#unless Детали}}
              <tr class='docRow'>
                <td class='stage'>
                  <input
                    type='text'
                    class='form-control controledInput stageInput'
                    name="stageInput "
                    placeholder='етап...'
                    value='{{Этап.Наименование}}'
                    data-value='{{Этап.uid}}'
                    {{#unless canEdit}}disabled{{/unless}}
                  />

                  <span class='removeRowBtn'><i class='bi bi-x'></i></span>
                  <i class='bi bi-chat-right-text-fill commentBtn'></i>
                </td>
                <td class='count'>
                  <input
                    type='number'
                    class='form-control controledInput numberInput'
                    placeholder=''
                    value=''
                    {{#unless canEdit}}disabled{{/unless}}
                  />
                </td>
                <td class='defect'>
                  <input type="checkbox" class="controledInput defectInput" {{#unless canEdit}}disabled{{/unless}}/>
                </td>
                <td class='rework'>
                  <input type='checkbox' class='controledInput reworkInput' {{#unless canEdit}}disabled{{/unless}}/>
                </td>
              </tr>
              <tr class='commentRow'>
                <td colspan='4'>
                  <input type='text' class='form-control controledInput commentInput' placeholder='' value='{{Комментарий}}' />
                </td>
              </tr>
            {{/unless}}
            {{#each Детали}}
              <tr class='docRow'>
                <td class='stage'>
                  <input
                    type='text'
                    class='form-control controledInput stageInput'
                    name="stageInput"
                    placeholder='етап...'
                    value='{{Этап.Наименование}}111'
                    data-value='{{Этап.uid}}'
                    {{#unless ../canEdit}}disabled{{/unless}}
                  />

                  <span class='removeRowBtn'><i class='bi bi-x'></i></span>
                  <i class='bi bi-chat-right-text-fill commentBtn'></i>
                </td>
                <td class='count'>
                  <input
                    type='number'
                    class='form-control controledInput numberInput'
                    placeholder=''
                    value='{{Количество}}'
                    {{#unless ../canEdit}}disabled{{/unless}}
                  />
                </td>
                <td class='defect'>
                  <input type='checkbox' class='controledInput defectInput' {{#if Брак}} checked {{/if}} {{#unless ../canEdit}}disabled{{/unless}}/>
                </td>
                <td class='rework'>
                  <input type='checkbox' class='controledInput reworkInput' {{#if Доработка}} checked {{/if}} {{#unless ../canEdit}}disabled{{/unless}}/>
                </td>
              </tr>
              {{#if Комментарий}}
              <tr class='commentRow' style="display: table-row">
                <td colspan='4'>
                  <input type='text' class='form-control controledInput commentInput' placeholder='' value='{{Комментарий}}' {{#unless ../canEdit}}disabled{{/unless}} />
                </td>
              </tr>
              {{/if}}
              {{#unless Комментарий}}
              <tr class='commentRow' style="display: none">
                <td colspan='4'>
                  <input type='text' class='form-control controledInput commentInput' placeholder='' value='' {{#unless ../canEdit}}readonly{{/unless}}/>
                </td>
              </tr>
              {{/unless}}
            {{/each}}
          </tbody>
        </table>
      </div>

    {{> photoGallery title='Фото ДЕМЗ' canEdit=canEdit files=ФайлыДемз showButton=true operationType=ВидОперации}}

    <div id='saveDoc' class='btn btn-secondary'>Зберегти</div>

  </div>
</script>

<script id="photoGalleryTemplate" type="text/x-handlebars-template">
  <div class='photoContainer'>
    <!-- <div class='galleryTitle'>{{title}}</div> -->
    <div class='imgContainer attachedImgContainer'>
      {{#each Файлы}}
        <div class='attachedImg'>
          <img
            class='src-source source'
            src-source='storage/{{ИД}}/{{ИД}}/{{Файл}}'
            src='storage/{{ИД}}/{{ИД}}/{{Файл}}'
            alt='Image'
          />
          <img
            class='preview'
            src='storage/{{ИД}}/{{ИД}}/p{{Файл}}'
            alt='Preview Image'
            onload='this.classList.add("loaded");'
            onerror='this.src="img/error-image.svg"; this.classList.add("loaded");'
          />
          <span class='userFotoDelete'> <i class='bi bi-trash'></i></span>
        </div>
      {{/each}}
      {{#if showButton}}
        <div class='btnAddPhoto'>
          <input
            type='file'
            id='makePhoto{{operationType}}'
            accept='image/*'
            capture='environment'
            multiple
            style='display: none'
            {{#unless canEdit}}disabled{{/unless}}
          />
          <label for='makePhoto{{operationType}}' class='photoLabel' ><i
              class='bi bi-camera btn btn-secondary photoBtn'
              id='makePhotoButton'
            ></i></label>
          <input type='file' id='downloadPhoto{{operationType}}' accept='image/*' style='display: none'  {{#unless canEdit}}disabled{{/unless}}/>
          <label for='downloadPhoto{{operationType}}' class='photoLabel' ><i
              class='bi bi-download btn btn-secondary photoBtn'
              id='downloadPhotoButton'
            ></i></label>
        </div>
      {{/if}}
    </div>
  </div>
</script>

<div id="docInfo" style="display: none"></div>

<style>
  .docContainer {
    border: 1px solid lightgrey;
    border-radius: 5px;
    background-color: white;
    margin-bottom: 15px;
    padding: 5px;
    box-shadow: 2px 3px 5px #999;
    width: 100%;
  }

  .detailed {
    font-size: x-large;
    margin-top: 5px;
  }

  .detailed .stage {
    width: 66%;
  }

  .detailed th {
    background-color: rgb(226 226 226);
    color: darkgreen;
    border: 1px solid rgb(202, 202, 202);
    color: darkgreen;
    font-size: x-large;
  }

  .docRow {
    position: relative;
  }

  td {
    padding: 3px;
    height: auto;
  }

  .stage {
    position: relative;
    width: auto;
  }

  .stageInput {
    flex: 1;
    padding-left: 18px;
    padding-right: 30px;
  }

  .count {
    width: 15%;
    text-align: right;
    overflow: hidden;
    text-wrap: nowrap;
    text-overflow: clip;
  }

  .count th {
    text-align: center;
  }

  .defect,
  .rework {
    width: 10%;
    text-align: center;
  }

  .defectInput,
  .reworkInput {
    transform: scale(2);
  }

  .commentBtn {
    position: absolute;
    top: 50%;
    right: 3px;
    font-size: x-large;
    transform: translateY(-50%);
    color: darkgreen;
    z-index: 1;
  }

  .commentBtn::after {
    content: '';
    position: absolute;
    top: -10px;
    left: -10px;
    right: -10px;
    bottom: -10px;
    background: transparent;
    z-index: -1;
  }

  .commentRow {
    display: none;
  }

  .commentInput {
    font-size: small;
  }

  .checkIcon {
    color: green;
  }

  .brak {
    position: relative;
  }

  .numberInput {
    text-align: right;
  }

  .brak::after {
    content: 'брак';
    position: absolute;
    background-color: white;
    color: red;
    right: 5px;
    padding: 0 0 0 5px;
  }

  .docTitle {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: large;
    padding: 0 3px;
  }

  .qpart-demz {
    background-color: darkgreen;
    color: white;
    padding: 2px 4px 0 4px;
    border-radius: 4px;
  }

  .demz-qpart {
    background-color: rgb(0, 38, 255);
    color: white;
    padding: 2px 4px 0 4px;
    border-radius: 4px;
  }

  .truck {
    width: 30%;
  }

  .calendar {
    width: 70%;
  }

  #docInfo {
    padding: 0 5px;
  }

  #docDate {
    text-align: center;
  }

  .bi-truck {
    font-size: x-large;
    margin-right: 5px;
  }

  .bi-calendar {
    font-size: large;
  }
  .docNumber {
    width: 20%;
    font-size: large;
    margin: 0;
  }

  .docNumber span {
    padding: 0 5px;
  }

  .tripNumber {
    font-size: large;
    padding: 0;
    text-align: center;
  }

  .docDateEvent {
    width: 20%;
    min-width: 85px;
    font-size: large;
    text-align: end;
  }

  .docDate {
    text-align: center;
  }

  .stageTd {
    position: relative;
    padding-left: 10px;
  }

  .removeRowBtn {
    color: red;
    font-weight: bold;
    font-size: x-large;
    position: absolute;
    left: 0px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    width: 50px;
    height: 38px;
    display: flex;
    align-items: center;
  }

  #saveDoc {
  }

  .galleryTitle {
    font-size: x-large;
    width: 100%;
    text-align: center;
    margin-bottom: 10px;
  }

  .btnAddPhoto {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: column;
    gap: 5px;
  }

  .btnSaveDoc {
  }
</style>

<script id="tileTemplate" type="text/x-handlebars-template">
  {{> docTitleTemplate}}
  {{> tableDetailsTemplate}}
</script>

<script id="docTitleTemplate" type="text/x-handlebars-template">
  <div class='docTitle defaultCursor'>
    <div class='docNumber input-group'>
      <div class='input-group-prepend'>
        <span class='input-group-text'>
          <i class='bi bi-truck'></i>
        </span>
      </div>
      <input
        type='text'
        class='form-control tripNumber'
        name='tripNumber'
        placeholder=''
        aria-describedby='номер машини'
        value='{{НомерПоездкиЗаДень}}'
      />
    </div>
    <!-- <div class='docNumber'><i class='bi bi-truck'></i> {{НомерПоездкиЗаДень}}</div> -->
    <div class='docName {{className}}'>{{ВидОперации}}</div>
    <div class='photoCountContainer'>
      <i class='bi bi-image photoCount'></i>
      <span>{{Файлы.length}}</span>
    </div>
    <div class='docDateEvent'>{{ДатаСобытияФормат}}</div>
  </div>
</script>

<script id="tableDetailsTemplate" type="text/x-handlebars-template">
  {{#if Детали}}
  <table class='detailed defaultCursor'>

    <thead>
      <tr>
        <th class='stage'>Этап</th>
        <th class='count'>К-во</th>
        <th class='defect'><i class="bi bi-clipboard-x-fill"></i></th>
        <th class='rework'><i class="bi bi-arrow-repeat"></i></th>
      </tr>
    </thead>

    <tbody>
        {{#each Детали}}
          <tr>
            <td class='stage {{#if Брак}}brak{{/if}}'>{{Этап.Наименование}}</td>
            <td class='count'>{{Количество}}</td>
            <td class='defect'>
              {{#if Брак}} <i class="bi bi-check-lg checkIcon"></i> {{/if}}
            </td>
            <td class='rework'>
              {{#if Доработка}} <i class="bi bi-check-lg checkIcon"></i> {{/if}}
            </td>
          </tr>
        {{/each}}
    </tbody>
  </table>
  {{/if}}
</script>

<script id="photoGallery" type="text/x-handlebars-template">
  <div class='galleryTitle'>{{title}}1111111111111</div>
  <div class='imgContainer attachedImgContainer'>
    {{#each Файлы}}
      <div class='attachedImg'>
        <img
          class='src-source source'
          src-source='storage/{{ИД}}/{{ИД}}/{{Файл}}'
          src='storage/{{ИД}}/{{ИД}}/{{Файл}}'
          alt='Image'
        />
        <img class='preview' src='storage/{{ИД}}/{{ИД}}/p{{Файл}}' />
      </div>
    {{/each}}
  </div>
  <div class='btnAddPhoto'>
    <input
      type='file'
      id='makePhoto{{ВидОперации}}'
      accept='image/*'
      capture='environment'
      multiple
      style='display: none'
    />
    <label for='makePhoto{{ВидОперации}}'><i class='bi bi-camera' id='makePhotoButton'></i></label>
    <input type='file' id='downloadPhoto{{ВидОперации}}' accept='image/*' style='display: none' />
    <label for='downloadPhoto{{ВидОперации}}'><i class='bi bi-download' id='downloadPhotoButton'></i></label>
  </div>
</script>

<script>
  $(document).ready(function () {
    let canEdit = true;
    const platesID = '#qpart_demz';
    pageUID = 'ce4e3ff4-50d6-11ef-825f-000c29006152';
    userRights = $('#menu').data('userRight')[pageUID];
    const uid = user.uid;
    let autocompleteStage;
    console.log('userRights', userRights);

    !userRights.canCreateDEMZ ? $('#btnDemz').hide() : '';
    !userRights.canCreateQPART ? $('#btnQpart').hide() : '';

    if (userRights.canCreateDEMZ && userRights.canCreateQPART) {
      console.log('userRights have all rights');
      $('.btnDesctiption').show();
    }

    const photoGallerySource = document.getElementById('photoGalleryTemplate').innerHTML;
    Handlebars.registerPartial('photoGallery', photoGallerySource);
    const docTemplateSource = document.getElementById('docTemplate').innerHTML;
    const docTemplate = Handlebars.compile(docTemplateSource);

    Handlebars.registerPartial('docTitleTemplate', $('#docTitleTemplate').html());
    Handlebars.registerPartial('tableDetailsTemplate', $('#tableDetailsTemplate').html());

    const source = document.getElementById('tileTemplate').innerHTML;
    const template = Handlebars.compile(source);

    const defaultParam = {
      page: 0,
      limit: 20,
    };

    $(platesID).data('defaultParam', defaultParam);
    initListPlate(platesID, true);

    callbackAfterLoadData = function (response) {
      const param = $(platesID).data('param');
      // response.passRender = true;
      param.date = response.nextDate;
      $(platesID).data('param', param);
      autocompleteStage = response.СписокЭтапов;
    };

    function generateNewPlate(data, containerForTile) {
      data.className = data.ВидОперации === 'QPART => ДЕМЗ' ? 'qpart-demz' : 'demz-qpart';
      generateFromTemplate('#tileTemplate', data, containerForTile);
    }

    callbackForRender = function (data) {
      containerForTile = `#${data.uid}`;
      if ($(containerForTile).length === 0) return;
      generateNewPlate(data, containerForTile);
    };

    callbackClick = function (element) {
      const data = $(element).data('data');
      console.log('callbackClick data', data);
      docInfoOpen(data);
    };

    function docInfoClose() {
      console.log('docInfoClose');
      $('#docInfo').hide();
      $('#main').show();
      $('#forTitle').empty();
      $('#forTable').empty();
      $('#forGalleryDemz').empty();
      $('#forGalleryQpart').empty();
      $('#inputTable tbody tr').not(':first').remove();
      $('#inputTable tbody tr:first').find('input').val('');
      $('#inputTable tbody tr:first').find('input[type="checkbox"]').prop('checked', false);
      $('#newDocForm').hide();
      // $('.confirm').hide();
    }

    function generatePhotoContainer(data, direction) {
      console.log('generatePhotoContainer');
      const titles = {
        demz: 'Фото з ДЕМЗ',
        qpart: 'Фото з QPart',
      };
      data.title = titles[direction];
      const photoGallery = Handlebars.compile($('#photoGallery').html());
      const gallery = photoGallery(data);
      if (direction === 'demz') {
        container = '#forGalleryDemz';
      }
      if (direction === 'qpart') {
        container = '#forGalleryQpart';
      }
      $(container).html(gallery);
    }

    function docInfoOpen(data = {}) {
      console.log('docInfoOpen data', data);
      $('#main').hide();
      $('#docInfo').show();
      renderDoc(data);
    }

    function renderDoc(data = {}) {
      const docContainer = $('#docInfo');
      console.log('data.ВидОперации', data.ВидОперации);
      data.canEdit = data.ВидОперации === 'QPART => ДЕМЗ' ? userRights.canCreateQPART : userRights.canCreateDEMZ;
      if (userRights.canCreatePhoto) {
        data.canEdit = true;
      }
      console.log('renderDoc data', data);
      generateFromTemplate('#docTemplate', data, '#docInfo');
      collectTableData(docContainer.find('.docTitle'));

      console.log('$.docDate', $('.docDate'));
      initializeAutocomplete();
      $.datepicker.setDefaults($.datepicker.regional['uk']);
      $('.docDate').datepicker({
        dateFormat: 'DD, dd.mm',
        maxDate: new Date(),
        position: {
          my: 'center top',
          at: 'center bottom',
          of: '#shiftDate',
        },
        onSelect: function (dateText, inst) {
          const daysOfWeek = ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];

          const date = $(this).datepicker('getDate');
          const dayOfWeek = daysOfWeek[date.getDay()];
          const formattedDate = `${dayOfWeek} ${$.datepicker.formatDate('dd.mm', date)}`;
          const dateValue = date.toISOString();
          $(this).data('date', dateValue);
          $(this).val(formattedDate);
        },
      });

      $('#closeDocInfo').on('click', function () {
        clickAnimate(this);
        docInfoClose();
      });

      $('.checkboxGroup input').change(function () {
        console.log('checkboxGroup click this', this);
        const label = $(this).siblings('label');
        const icon = label.find('i');
        clickAnimate(label);

        if ($(this).is(':checked')) {
          icon.removeClass('bi-x').addClass('bi-check rotate');
        } else {
          icon.removeClass('bi-check').addClass('bi-x rotate');
        }
      });

      $('#testTable').tablesorter();
    }

    function renderNewDoc(direction) {
      console.log('userRights', userRights);
      // generatePhotoContainer({}, direction);
      if (direction === 'demz') {
        $('#docTypeQpart').hide();
        $('#docTypeDemz').show();
      }

      if (direction === 'qpart') {
        $('#docTypeQpart').show();
        $('#docTypeDemz').hide();
      }
      $('#docTitle').text(direction);
      $('#newDocForm').show();
    }

    $('#addNewQpart').on('click', function (event) {
      clickAnimate(this);
      const data = {
        ВидОперации: 'QPART => ДЕМЗ',
      };
      docInfoOpen(data);
    });

    $('#addNewDemz').on('click', function (event) {
      clickAnimate(this);
      const data = {
        ВидОперации: 'ДЕМЗ => QPART',
      };
      docInfoOpen(data);
    });

    // const autocompleteStage = ['Опція 1', 'Опція 2', 'Опція 3', 'Опція 4'];

    function initializeAutocomplete() {
      $('input.stageInput').autocomplete({
        source: autocompleteStage,
        minLength: 0,
        position: {
          my: 'left top',
          at: 'left bottom',
          collision: 'fit flip',
        },
        select: function (event, ui) {
          $(this).val(ui.item.label);
          $(this).data('value', ui.item.value);
          console.log('autocomplite select value', ui.item.value, ui.item);
          return false;
        },
      });
      // .on('blur', function () {
      //   if (!$(this).data('value')) {
      //     $(this).val('');
      //     $(this).data('value', '');
      //   }
      // });
    }

    initializeAutocomplete();

    function addRow() {
      const newRow = `
               <tr class="docRow">
                <td class='stage'>
                  <input type="text" class="form-control controledInput stageInput" placeholder="" />
                  <span class="removeRowBtn"><i class="bi bi-x"></i></span>
                  <i class='bi bi-chat-right-text-fill commentBtn'></i>
                </td>
                <td><input type="number" class="form-control controledInput numberInput" placeholder="" /></td>
                <td><input type="checkbox" class="controledInput defectInput"/></td>
                <td><input type="checkbox" class="controledInput reworkInput" ></td>
              </tr>
              <tr class='commentRow'>
                <td colspan='4'>
                  <input type='text' class='form-control controledInput commentInput' placeholder='' value='' />
                </td>
              </tr>
          `;
      $('#inputTable tbody').append(newRow);
      initializeAutocomplete();
    }

    $(document).on('focus', 'input.controledInput', function () {
      const $currentRow = $(this).closest('tr');
      const $nextRow = $currentRow.nextAll('tr.docRow');

      if ($nextRow.length === 0 && canEdit) {
        addRow();
      }
    });

    $(document).on('click', '.removeRowBtn', function () {
      const $row = $(this).closest('tr');
      const $inputs = $row.find('input');
      $inputs.toArray().forEach(input => console.log($(input).is(':checked') || $(input).val() !== ''));
      const hasValue = $inputs.toArray().some(input => {
        const $input = $(input);
        return $input.is(':checkbox') ? $input.is(':checked') : $input.val() !== '';
      });

      if ($('#inputTable tbody tr').length > 1) {
        if (hasValue) {
          $row.find('input').val('');
          $row.find('input[type="checkbox"]').prop('checked', false);
        } else {
          $row.remove();
        }
      } else {
        $row.find('input').val('');
        $row.find('input[type="checkbox"]').prop('checked', false);
      }
    });

    $(document).on('click', '.commentBtn', function () {
      if (!canEdit) return;
      console.log('click commentBtn');
      const container = $(this).closest('.docRow');
      const commentRow = container.next('.commentRow');
      let commentInput = commentRow.find('.commentInput');
      commentRow.toggle();
      commentInput.focus();
    });

    function collectTableData(element) {
      const tableData = [];
      const container = $(element).closest('.plateListItem');
      console.log('container from collectTableData', container, container.find('#inputTable tbody').find('tr.docRow'));

      container
        .find('#inputTable tbody')
        .find('tr.docRow')
        .each(function () {
          const uid = $(this).find('input.stageInput').data('value');
          const count = $(this).find('input.numberInput').val();
          const comment = $(this).next('.commentRow').find('input.commentInput').val();
          const defect = $(this).find('input.defectInput').is(':checked');
          const rework = $(this).find('input.reworkInput').is(':checked');
          if (uid) {
            tableData.push({
              Этап: {
                uid: uid,
              },
              Количество: count,
              Комментарий: comment,
              Брак: defect,
              Доработка: rework,
            });
          }
        });
      console.log('tableData', tableData);
      container.data('data', tableData);
    }

    $(document).on('blur', 'input', function () {
      collectTableData(this);
    });

    $('.inputTable').on('change', 'input[type="checkbox"]', function () {
      collectTableData(this);
    });

    function getMediaFiles() {
      const mediaFiles = [];
      $('.imgContainer .attachedImg .src-source').each(function (index) {
        const src = $(this).attr('src-source');
        const blob = $(this).attr('src-source');
        const name = (index + 1).toString() + '.png';
        mediaFiles.push({
          name: name,
          data: src,
        });
      });
      return mediaFiles;
    }

    function dataURLtoBlob(dataURL) {
      const [header, data] = dataURL.split(',');
      const mime = header.match(/:(.*?);/)[1];
      const binary = atob(data);
      const array = [];
      for (let i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
      }
      return new Blob([new Uint8Array(array)], { type: mime });
    }

    function sendDataTo1C(data, method = 'GET', callback) {
      universalRequest(
        '/app/qpart_demz',
        method,
        data,
        {},
        function onSuccess(response) {
          if (response.error) {
            toastr.error('Помилка звязку', response['Причина']);
          } else {
            toastr.success('Дані збережено');
            if (typeof callback === 'function') {
              callback(response);
            }
          }
        },
        function onError(error) {
          toastr.error('Error', error);
        },
        function onComplete() {}
      );
    }

    $(document)
      .off('click', '#saveDoc')
      .on('click', '#saveDoc', async function () {
        if (!canEdit) return;
        clickAnimate(this);
        const mediaFiles = getMediaFiles();

        // try {
        //   await saveFilesToStorage(mediaFiles, uid, uid);
        //   console.log('Files saved successfully!');
        // } catch (error) {
        //   console.error('Error saving files:', error);
        // }

        const container = $(this).closest('.plateListItem');
        const uid = container.attr('uid');
        const tripNumber = container.find('.tripNumber');
        const tripNumberValue = tripNumber.val();
        if (tripNumberValue === '0') {
          toastr.error('Заповніть номер відправлення');
          tripNumber.focus();
          return;
        }

        const operationType = container.find('.docName').text();

        const docDate = container.find('.docDate').data('date');
        console.log('docDate', docDate);
        if (docDate === '') {
          toastr.error('Заповніть дату відправлення');
          $('#docDate').focus();
          return;
        }

        const details = container.data('data');

        NProgress.start();

        let media = [];
        let names = [];
        container
          .find('.imgContainer')
          .children()
          .slice(0, -1)
          .each((index, child) => {
            const blob = $(child).children('.source').data('blob');
            const blobPreview = $(child).children('.preview').data('blob');

            const src = $(child).children('.source').attr('src');
            const fileType = src ? src.substring(src.length - 3) : 'unknown';

            let file = {};
            let filePreview = {};

            if (blob) {
              file = { data: blob };
              filePreview = { data: blobPreview };
              if (blob.type === 'image/jpeg') {
                file.name = index.toString() + '.png';
                filePreview.name = 'p' + index.toString() + '.png';
              } else if (blob.type === 'video/mp4') {
                file.name = index.toString() + '.mp4';
                filePreview.name = 'p' + index.toString() + '.png';
              } else {
                file.name = index.toString() + '.none';
              }
              media.push(file);
              media.push(filePreview);
            } else {
              if (fileType !== 'unknown') {
                file.name = index.toString() + '.' + fileType;
              }
            }
            names.push(file.name);
          });

        const data = {
          Детали: details,
          НомерПоездкиЗаДень: tripNumberValue,
          ВидОперации: operationType,
          ДатаСобытия: docDate,
          Файлы: names,
        };

        if (uid) {
          data.uid = uid;
        }
        console.log('data from saveDoc', data);
        sendDataTo1C(data, 'POST', async function (response) {
          await saveFilesToStorage(media, response.uid, response.uid);
          docInfoClose();
          hadleResponseAfterSave(response);
        });
        NProgress.done();
      });

    function hadleResponseAfterSave(response) {
      console.log('response from handleResponseAfterSave', response);
      plateData = response.item.data;
      const uid = plateData.uid;
      const plateId = `#${uid}`;

      if ($(plateId).length) {
        console.log('plate exsist');
        $(plateId).html();
        plateData.className = plateData.ВидОперации === 'QPART => ДЕМЗ' ? 'qpart-demz' : 'demz-qpart';
        generateFromTemplate('#tileTemplate', plateData, plateId);
      } else {
        const newBlock = `<div id="${uid}" class="plateListItem"></div>`;
        $('.plateListItem').first().before(newBlock);
        console.log('plate not exsist');
        generateNewPlate(plateData, $(plateId));
      }
      $(plateId).data('data', plateData);
    }

    // $('#cancelDoc').on('click', function () {
    //   docInfoClose();
    // });

    function handleFileSelection(files, container) {
      const imgContainer = $(container);
      const btnAddPhoto = $('.btnAddPhoto');

      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        reader.onload = function (event) {
          const imgWrapper = $('<div>').addClass('attachedImg');

          const img = $('<img>')
            .addClass('src-source')
            .addClass('source')
            .attr('src-source', URL.createObjectURL(file))
            .attr('src', URL.createObjectURL(file))
            .attr('alt', 'Image')
            .data('blob', file)
            .css({
              'object-fit': 'cover',
            });

          const deleteBtn = `<span class='userFotoDelete'> <i class='bi bi-trash'></i></span>`;

          imgWrapper.append(img);
          imgWrapper.append(deleteBtn);

          resizeImage(file)
            .then(resizedImageBlob => {
              const previewImg = $('<img>')
                .addClass('preview loaded')
                .attr('src', URL.createObjectURL(resizedImageBlob))
                .data('blob', resizedImageBlob);

              imgWrapper.append(previewImg);
            })
            .catch(error => {});

          btnAddPhoto.before(imgWrapper);
        };

        reader.readAsDataURL(file);
      }
    }

    $(document).on('click', '.attachedImg', function () {
      mediaviewer(this);
    });

    $(document).on('click', '.userFotoDelete', function (event) {
      event.stopPropagation();
      clickAnimate(this);
      const deleteFoto = confirm('Ви впевнені, що хочете видалити цю фотографію?');
      const photo = $(this).closest('.attachedImg');
      photo.remove();
    });

    $(document).on('change', 'input[type="file"]', function (event) {
      const $photoContainer = $(this).closest('.photoContainer');
      const $imgContainer = $photoContainer.find('.imgContainer');
      // const $imgContainer = $(this).closest('.imgContainer');

      const files = event.target.files;
      if (files.length > 0) {
        handleFileSelection(files, $imgContainer);
        $(this).val('');
      }
    });
  });
</script>
